
Nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006e84  08006e84  00007e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eec  08006eec  00008010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006eec  08006eec  00007eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ef4  08006ef4  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ef4  08006ef4  00007ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ef8  08006ef8  00007ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006efc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004db8  20000010  08006f0c  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004dc8  08006f0c  00008dc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d5ba  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e88  00000000  00000000  000255fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  00029488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001459  00000000  00000000  0002ae80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f3e  00000000  00000000  0002c2d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e6c3  00000000  00000000  00030217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eba5a  00000000  00000000  0004e8da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a334  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f50  00000000  00000000  0013a378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001412c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006e6c 	.word	0x08006e6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08006e6c 	.word	0x08006e6c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fd82 	bl	8001048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f822 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 f9dc 	bl	8000904 <MX_GPIO_Init>
  MX_DMA_Init();
 800054c:	f000 f9ba 	bl	80008c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000550:	f000 f98e 	bl	8000870 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000554:	f000 f8da 	bl	800070c <MX_DAC_Init>
  MX_ADC1_Init();
 8000558:	f000 f886 	bl	8000668 <MX_ADC1_Init>
  MX_I2C1_Init();
 800055c:	f000 f900 	bl	8000760 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000560:	f000 f92c 	bl	80007bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000564:	f003 fec4 	bl	80042f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000568:	4a05      	ldr	r2, [pc, #20]	@ (8000580 <main+0x44>)
 800056a:	2100      	movs	r1, #0
 800056c:	4805      	ldr	r0, [pc, #20]	@ (8000584 <main+0x48>)
 800056e:	f003 ff09 	bl	8004384 <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a04      	ldr	r2, [pc, #16]	@ (8000588 <main+0x4c>)
 8000576:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000578:	f003 fede 	bl	8004338 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <main+0x40>
 8000580:	08006ea8 	.word	0x08006ea8
 8000584:	080009fd 	.word	0x080009fd
 8000588:	200001cc 	.word	0x200001cc

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	@ 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2234      	movs	r2, #52	@ 0x34
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f006 fc2c 	bl	8006df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000660 <SystemClock_Config+0xd4>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	4a29      	ldr	r2, [pc, #164]	@ (8000660 <SystemClock_Config+0xd4>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c0:	4b27      	ldr	r3, [pc, #156]	@ (8000660 <SystemClock_Config+0xd4>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005cc:	2300      	movs	r3, #0
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	4b24      	ldr	r3, [pc, #144]	@ (8000664 <SystemClock_Config+0xd8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005d8:	4a22      	ldr	r2, [pc, #136]	@ (8000664 <SystemClock_Config+0xd8>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b20      	ldr	r3, [pc, #128]	@ (8000664 <SystemClock_Config+0xd8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000600:	2310      	movs	r3, #16
 8000602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000604:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000608:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060a:	2304      	movs	r3, #4
 800060c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800060e:	2302      	movs	r3, #2
 8000610:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000612:	2302      	movs	r3, #2
 8000614:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fae8 	bl	8002bf0 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000626:	f000 fa03 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2102      	movs	r1, #2
 8000646:	4618      	mov	r0, r3
 8000648:	f001 ff56 	bl	80024f8 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000652:	f000 f9ed 	bl	8000a30 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	@ 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800067a:	4b21      	ldr	r3, [pc, #132]	@ (8000700 <MX_ADC1_Init+0x98>)
 800067c:	4a21      	ldr	r2, [pc, #132]	@ (8000704 <MX_ADC1_Init+0x9c>)
 800067e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000680:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <MX_ADC1_Init+0x98>)
 8000682:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000686:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000688:	4b1d      	ldr	r3, [pc, #116]	@ (8000700 <MX_ADC1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <MX_ADC1_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000694:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_ADC1_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069a:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <MX_ADC1_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a2:	4b17      	ldr	r3, [pc, #92]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a8:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006aa:	4a17      	ldr	r2, [pc, #92]	@ (8000708 <MX_ADC1_Init+0xa0>)
 80006ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ae:	4b14      	ldr	r3, [pc, #80]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c8:	480d      	ldr	r0, [pc, #52]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006ca:	f000 fcff 	bl	80010cc <HAL_ADC_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006d4:	f000 f9ac 	bl	8000a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006d8:	2300      	movs	r3, #0
 80006da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006dc:	2301      	movs	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	@ (8000700 <MX_ADC1_Init+0x98>)
 80006ea:	f000 fd33 	bl	8001154 <HAL_ADC_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006f4:	f000 f99c 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	3710      	adds	r7, #16
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000002c 	.word	0x2000002c
 8000704:	40012000 	.word	0x40012000
 8000708:	0f000001 	.word	0x0f000001

0800070c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_DAC_Init+0x4c>)
 800071c:	4a0f      	ldr	r2, [pc, #60]	@ (800075c <MX_DAC_Init+0x50>)
 800071e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000720:	480d      	ldr	r0, [pc, #52]	@ (8000758 <MX_DAC_Init+0x4c>)
 8000722:	f001 f827 	bl	8001774 <HAL_DAC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800072c:	f000 f980 	bl	8000a30 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	@ (8000758 <MX_DAC_Init+0x4c>)
 8000740:	f001 f89a 	bl	8001878 <HAL_DAC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800074a:	f000 f971 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000d4 	.word	0x200000d4
 800075c:	40007400 	.word	0x40007400

08000760 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000766:	4a13      	ldr	r2, [pc, #76]	@ (80007b4 <MX_I2C1_Init+0x54>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800076c:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <MX_I2C1_Init+0x58>)
 800076e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800077e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000782:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800079e:	f001 fd67 	bl	8002270 <HAL_I2C_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a8:	f000 f942 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000e8 	.word	0x200000e8
 80007b4:	40005400 	.word	0x40005400
 80007b8:	000186a0 	.word	0x000186a0

080007bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	@ 0x28
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
 80007da:	615a      	str	r2, [r3, #20]
 80007dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007de:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <MX_TIM4_Init+0xac>)
 80007e0:	4a22      	ldr	r2, [pc, #136]	@ (800086c <MX_TIM4_Init+0xb0>)
 80007e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80007e4:	4b20      	ldr	r3, [pc, #128]	@ (8000868 <MX_TIM4_Init+0xac>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <MX_TIM4_Init+0xac>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <MX_TIM4_Init+0xac>)
 80007f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_TIM4_Init+0xac>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <MX_TIM4_Init+0xac>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000804:	4818      	ldr	r0, [pc, #96]	@ (8000868 <MX_TIM4_Init+0xac>)
 8000806:	f002 fd5b 	bl	80032c0 <HAL_TIM_PWM_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000810:	f000 f90e 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4619      	mov	r1, r3
 8000822:	4811      	ldr	r0, [pc, #68]	@ (8000868 <MX_TIM4_Init+0xac>)
 8000824:	f003 f9cc 	bl	8003bc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800082e:	f000 f8ff 	bl	8000a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000832:	2360      	movs	r3, #96	@ 0x60
 8000834:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	4619      	mov	r1, r3
 8000848:	4807      	ldr	r0, [pc, #28]	@ (8000868 <MX_TIM4_Init+0xac>)
 800084a:	f002 fe79 	bl	8003540 <HAL_TIM_PWM_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000854:	f000 f8ec 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000858:	4803      	ldr	r0, [pc, #12]	@ (8000868 <MX_TIM4_Init+0xac>)
 800085a:	f000 fa81 	bl	8000d60 <HAL_TIM_MspPostInit>

}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	@ 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000013c 	.word	0x2000013c
 800086c:	40000800 	.word	0x40000800

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000876:	4a12      	ldr	r2, [pc, #72]	@ (80008c0 <MX_USART2_UART_Init+0x50>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_USART2_UART_Init+0x4c>)
 80008a8:	f003 fa1a 	bl	8003ce0 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008b2:	f000 f8bd 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000184 	.word	0x20000184
 80008c0:	40004400 	.word	0x40004400

080008c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_DMA_Init+0x3c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000900 <MX_DMA_Init+0x3c>)
 80008d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_DMA_Init+0x3c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2105      	movs	r1, #5
 80008ea:	2038      	movs	r0, #56	@ 0x38
 80008ec:	f000 ff18 	bl	8001720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008f0:	2038      	movs	r0, #56	@ 0x38
 80008f2:	f000 ff31 	bl	8001758 <HAL_NVIC_EnableIRQ>

}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	@ 0x28
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b34      	ldr	r3, [pc, #208]	@ (80009f0 <MX_GPIO_Init+0xec>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a33      	ldr	r2, [pc, #204]	@ (80009f0 <MX_GPIO_Init+0xec>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b31      	ldr	r3, [pc, #196]	@ (80009f0 <MX_GPIO_Init+0xec>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b2d      	ldr	r3, [pc, #180]	@ (80009f0 <MX_GPIO_Init+0xec>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a2c      	ldr	r2, [pc, #176]	@ (80009f0 <MX_GPIO_Init+0xec>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b2a      	ldr	r3, [pc, #168]	@ (80009f0 <MX_GPIO_Init+0xec>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b26      	ldr	r3, [pc, #152]	@ (80009f0 <MX_GPIO_Init+0xec>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a25      	ldr	r2, [pc, #148]	@ (80009f0 <MX_GPIO_Init+0xec>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b23      	ldr	r3, [pc, #140]	@ (80009f0 <MX_GPIO_Init+0xec>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_GPIO_Init+0xec>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a1e      	ldr	r2, [pc, #120]	@ (80009f0 <MX_GPIO_Init+0xec>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_GPIO_Init+0xec>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2120      	movs	r1, #32
 800098e:	4819      	ldr	r0, [pc, #100]	@ (80009f4 <MX_GPIO_Init+0xf0>)
 8000990:	f001 fc54 	bl	800223c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	4813      	ldr	r0, [pc, #76]	@ (80009f8 <MX_GPIO_Init+0xf4>)
 80009ac:	f001 fab2 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b0:	2320      	movs	r3, #32
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <MX_GPIO_Init+0xf0>)
 80009c8:	f001 faa4 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009cc:	2340      	movs	r3, #64	@ 0x40
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <MX_GPIO_Init+0xf0>)
 80009e2:	f001 fa97 	bl	8001f14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	@ 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40020800 	.word	0x40020800

080009fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f003 fd4f 	bl	80044a8 <osDelay>
 8000a0a:	e7fb      	b.n	8000a04 <StartDefaultTask+0x8>

08000a0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a1e:	f000 fb35 	bl	800108c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40001000 	.word	0x40001000

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <Error_Handler+0x8>

08000a3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <HAL_MspInit+0x54>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4a:	4a11      	ldr	r2, [pc, #68]	@ (8000a90 <HAL_MspInit+0x54>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <HAL_MspInit+0x54>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <HAL_MspInit+0x54>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <HAL_MspInit+0x54>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6e:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <HAL_MspInit+0x54>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	f06f 0001 	mvn.w	r0, #1
 8000a82:	f000 fe4d 	bl	8001720 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	@ 0x30
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a49      	ldr	r2, [pc, #292]	@ (8000bd8 <HAL_ADC_MspInit+0x144>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	f040 808b 	bne.w	8000bce <HAL_ADC_MspInit+0x13a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
 8000abc:	4b47      	ldr	r3, [pc, #284]	@ (8000bdc <HAL_ADC_MspInit+0x148>)
 8000abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac0:	4a46      	ldr	r2, [pc, #280]	@ (8000bdc <HAL_ADC_MspInit+0x148>)
 8000ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ac6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac8:	4b44      	ldr	r3, [pc, #272]	@ (8000bdc <HAL_ADC_MspInit+0x148>)
 8000aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	4b40      	ldr	r3, [pc, #256]	@ (8000bdc <HAL_ADC_MspInit+0x148>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000adc:	4a3f      	ldr	r2, [pc, #252]	@ (8000bdc <HAL_ADC_MspInit+0x148>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae4:	4b3d      	ldr	r3, [pc, #244]	@ (8000bdc <HAL_ADC_MspInit+0x148>)
 8000ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	4b39      	ldr	r3, [pc, #228]	@ (8000bdc <HAL_ADC_MspInit+0x148>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af8:	4a38      	ldr	r2, [pc, #224]	@ (8000bdc <HAL_ADC_MspInit+0x148>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b00:	4b36      	ldr	r3, [pc, #216]	@ (8000bdc <HAL_ADC_MspInit+0x148>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b32      	ldr	r3, [pc, #200]	@ (8000bdc <HAL_ADC_MspInit+0x148>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b14:	4a31      	ldr	r2, [pc, #196]	@ (8000bdc <HAL_ADC_MspInit+0x148>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bdc <HAL_ADC_MspInit+0x148>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4829      	ldr	r0, [pc, #164]	@ (8000be0 <HAL_ADC_MspInit+0x14c>)
 8000b3c:	f001 f9ea 	bl	8001f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b40:	2303      	movs	r3, #3
 8000b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b44:	2303      	movs	r3, #3
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4824      	ldr	r0, [pc, #144]	@ (8000be4 <HAL_ADC_MspInit+0x150>)
 8000b54:	f001 f9de 	bl	8001f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481f      	ldr	r0, [pc, #124]	@ (8000be8 <HAL_ADC_MspInit+0x154>)
 8000b6c:	f001 f9d2 	bl	8001f14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b70:	4b1e      	ldr	r3, [pc, #120]	@ (8000bec <HAL_ADC_MspInit+0x158>)
 8000b72:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf0 <HAL_ADC_MspInit+0x15c>)
 8000b74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <HAL_ADC_MspInit+0x158>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bec <HAL_ADC_MspInit+0x158>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <HAL_ADC_MspInit+0x158>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b88:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <HAL_ADC_MspInit+0x158>)
 8000b8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b90:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <HAL_ADC_MspInit+0x158>)
 8000b92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b98:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <HAL_ADC_MspInit+0x158>)
 8000b9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b9e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <HAL_ADC_MspInit+0x158>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <HAL_ADC_MspInit+0x158>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <HAL_ADC_MspInit+0x158>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bb2:	480e      	ldr	r0, [pc, #56]	@ (8000bec <HAL_ADC_MspInit+0x158>)
 8000bb4:	f000 fec4 	bl	8001940 <HAL_DMA_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8000bbe:	f7ff ff37 	bl	8000a30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a09      	ldr	r2, [pc, #36]	@ (8000bec <HAL_ADC_MspInit+0x158>)
 8000bc6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bc8:	4a08      	ldr	r2, [pc, #32]	@ (8000bec <HAL_ADC_MspInit+0x158>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bce:	bf00      	nop
 8000bd0:	3730      	adds	r7, #48	@ 0x30
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40012000 	.word	0x40012000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020800 	.word	0x40020800
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40020400 	.word	0x40020400
 8000bec:	20000074 	.word	0x20000074
 8000bf0:	40026410 	.word	0x40026410

08000bf4 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1b      	ldr	r2, [pc, #108]	@ (8000c80 <HAL_DAC_MspInit+0x8c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d12f      	bne.n	8000c76 <HAL_DAC_MspInit+0x82>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <HAL_DAC_MspInit+0x90>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	4a19      	ldr	r2, [pc, #100]	@ (8000c84 <HAL_DAC_MspInit+0x90>)
 8000c20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <HAL_DAC_MspInit+0x90>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <HAL_DAC_MspInit+0x90>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <HAL_DAC_MspInit+0x90>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <HAL_DAC_MspInit+0x90>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c4e:	2310      	movs	r3, #16
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c52:	2303      	movs	r3, #3
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <HAL_DAC_MspInit+0x94>)
 8000c62:	f001 f957 	bl	8001f14 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	210f      	movs	r1, #15
 8000c6a:	2036      	movs	r0, #54	@ 0x36
 8000c6c:	f000 fd58 	bl	8001720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c70:	2036      	movs	r0, #54	@ 0x36
 8000c72:	f000 fd71 	bl	8001758 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	@ 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40007400 	.word	0x40007400
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a19      	ldr	r2, [pc, #100]	@ (8000d10 <HAL_I2C_MspInit+0x84>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d12c      	bne.n	8000d08 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <HAL_I2C_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a17      	ldr	r2, [pc, #92]	@ (8000d14 <HAL_I2C_MspInit+0x88>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <HAL_I2C_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd0:	2312      	movs	r3, #18
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480c      	ldr	r0, [pc, #48]	@ (8000d18 <HAL_I2C_MspInit+0x8c>)
 8000ce8:	f001 f914 	bl	8001f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <HAL_I2C_MspInit+0x88>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf4:	4a07      	ldr	r2, [pc, #28]	@ (8000d14 <HAL_I2C_MspInit+0x88>)
 8000cf6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfc:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <HAL_I2C_MspInit+0x88>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d08:	bf00      	nop
 8000d0a:	3728      	adds	r7, #40	@ 0x28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40005400 	.word	0x40005400
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020400 	.word	0x40020400

08000d1c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0b      	ldr	r2, [pc, #44]	@ (8000d58 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10d      	bne.n	8000d4a <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <HAL_TIM_PWM_MspInit+0x40>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a09      	ldr	r2, [pc, #36]	@ (8000d5c <HAL_TIM_PWM_MspInit+0x40>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <HAL_TIM_PWM_MspInit+0x40>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40000800 	.word	0x40000800
 8000d5c:	40023800 	.word	0x40023800

08000d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <HAL_TIM_MspPostInit+0x68>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d11d      	bne.n	8000dbe <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <HAL_TIM_MspPostInit+0x6c>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <HAL_TIM_MspPostInit+0x6c>)
 8000d8c:	f043 0302 	orr.w	r3, r3, #2
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <HAL_TIM_MspPostInit+0x6c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d9e:	2340      	movs	r3, #64	@ 0x40
 8000da0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <HAL_TIM_MspPostInit+0x70>)
 8000dba:	f001 f8ab 	bl	8001f14 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3720      	adds	r7, #32
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40000800 	.word	0x40000800
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020400 	.word	0x40020400

08000dd4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a19      	ldr	r2, [pc, #100]	@ (8000e58 <HAL_UART_MspInit+0x84>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d12b      	bne.n	8000e4e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	4a17      	ldr	r2, [pc, #92]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a10      	ldr	r2, [pc, #64]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e2e:	230c      	movs	r3, #12
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e3e:	2307      	movs	r3, #7
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000e4a:	f001 f863 	bl	8001f14 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	@ 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40004400 	.word	0x40004400
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000

08000e64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	@ 0x38
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4b33      	ldr	r3, [pc, #204]	@ (8000f48 <HAL_InitTick+0xe4>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	4a32      	ldr	r2, [pc, #200]	@ (8000f48 <HAL_InitTick+0xe4>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e84:	4b30      	ldr	r3, [pc, #192]	@ (8000f48 <HAL_InitTick+0xe4>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e90:	f107 0210 	add.w	r2, r7, #16
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 fc46 	bl	800272c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ea0:	6a3b      	ldr	r3, [r7, #32]
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d103      	bne.n	8000eb2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eaa:	f001 fc17 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8000eae:	6378      	str	r0, [r7, #52]	@ 0x34
 8000eb0:	e004      	b.n	8000ebc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000eb2:	f001 fc13 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ebe:	4a23      	ldr	r2, [pc, #140]	@ (8000f4c <HAL_InitTick+0xe8>)
 8000ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec4:	0c9b      	lsrs	r3, r3, #18
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000eca:	4b21      	ldr	r3, [pc, #132]	@ (8000f50 <HAL_InitTick+0xec>)
 8000ecc:	4a21      	ldr	r2, [pc, #132]	@ (8000f54 <HAL_InitTick+0xf0>)
 8000ece:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f50 <HAL_InitTick+0xec>)
 8000ed2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ed6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f50 <HAL_InitTick+0xec>)
 8000eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000edc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	@ (8000f50 <HAL_InitTick+0xec>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <HAL_InitTick+0xec>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <HAL_InitTick+0xec>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ef0:	4817      	ldr	r0, [pc, #92]	@ (8000f50 <HAL_InitTick+0xec>)
 8000ef2:	f002 f91b 	bl	800312c <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000efc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d11b      	bne.n	8000f3c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f04:	4812      	ldr	r0, [pc, #72]	@ (8000f50 <HAL_InitTick+0xec>)
 8000f06:	f002 f96b 	bl	80031e0 <HAL_TIM_Base_Start_IT>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d111      	bne.n	8000f3c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f18:	2036      	movs	r0, #54	@ 0x36
 8000f1a:	f000 fc1d 	bl	8001758 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d808      	bhi.n	8000f36 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	2036      	movs	r0, #54	@ 0x36
 8000f2a:	f000 fbf9 	bl	8001720 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <HAL_InitTick+0xf4>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	e002      	b.n	8000f3c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3738      	adds	r7, #56	@ 0x38
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	431bde83 	.word	0x431bde83
 8000f50:	2000042c 	.word	0x2000042c
 8000f54:	40001000 	.word	0x40001000
 8000f58:	20000004 	.word	0x20000004

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <NMI_Handler+0x4>

08000f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <MemManage_Handler+0x4>

08000f74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <TIM6_DAC_IRQHandler+0x20>)
 8000f9a:	791b      	ldrb	r3, [r3, #4]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d002      	beq.n	8000fa8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8000fa2:	4804      	ldr	r0, [pc, #16]	@ (8000fb4 <TIM6_DAC_IRQHandler+0x20>)
 8000fa4:	f000 fc08 	bl	80017b8 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8000fa8:	4803      	ldr	r0, [pc, #12]	@ (8000fb8 <TIM6_DAC_IRQHandler+0x24>)
 8000faa:	f002 f9d8 	bl	800335e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000d4 	.word	0x200000d4
 8000fb8:	2000042c 	.word	0x2000042c

08000fbc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <DMA2_Stream0_IRQHandler+0x10>)
 8000fc2:	f000 fd6b 	bl	8001a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000074 	.word	0x20000074

08000fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <SystemInit+0x20>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fda:	4a05      	ldr	r2, [pc, #20]	@ (8000ff0 <SystemInit+0x20>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ff4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800102c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ff8:	f7ff ffea 	bl	8000fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ffc:	480c      	ldr	r0, [pc, #48]	@ (8001030 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ffe:	490d      	ldr	r1, [pc, #52]	@ (8001034 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001000:	4a0d      	ldr	r2, [pc, #52]	@ (8001038 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001014:	4c0a      	ldr	r4, [pc, #40]	@ (8001040 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001022:	f005 fef1 	bl	8006e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001026:	f7ff fa89 	bl	800053c <main>
  bx  lr    
 800102a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800102c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001038:	08006efc 	.word	0x08006efc
  ldr r2, =_sbss
 800103c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001040:	20004dc8 	.word	0x20004dc8

08001044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC_IRQHandler>
	...

08001048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0d      	ldr	r2, [pc, #52]	@ (8001088 <HAL_Init+0x40>)
 8001052:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001056:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0a      	ldr	r2, [pc, #40]	@ (8001088 <HAL_Init+0x40>)
 800105e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001062:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a07      	ldr	r2, [pc, #28]	@ (8001088 <HAL_Init+0x40>)
 800106a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800106e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 fb4a 	bl	800170a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	200f      	movs	r0, #15
 8001078:	f7ff fef4 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107c:	f7ff fcde 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023c00 	.word	0x40023c00

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000474 	.word	0x20000474

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000474 	.word	0x20000474

080010cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e033      	b.n	800114a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d109      	bne.n	80010fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fcd2 	bl	8000a94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	2b00      	cmp	r3, #0
 8001108:	d118      	bne.n	800113c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001112:	f023 0302 	bic.w	r3, r3, #2
 8001116:	f043 0202 	orr.w	r2, r3, #2
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f94a 	bl	80013b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	f023 0303 	bic.w	r3, r3, #3
 8001132:	f043 0201 	orr.w	r2, r3, #1
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	@ 0x40
 800113a:	e001      	b.n	8001140 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x1c>
 800116c:	2302      	movs	r3, #2
 800116e:	e113      	b.n	8001398 <HAL_ADC_ConfigChannel+0x244>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b09      	cmp	r3, #9
 800117e:	d925      	bls.n	80011cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68d9      	ldr	r1, [r3, #12]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	461a      	mov	r2, r3
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	3b1e      	subs	r3, #30
 8001196:	2207      	movs	r2, #7
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43da      	mvns	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	400a      	ands	r2, r1
 80011a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68d9      	ldr	r1, [r3, #12]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	4603      	mov	r3, r0
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4403      	add	r3, r0
 80011be:	3b1e      	subs	r3, #30
 80011c0:	409a      	lsls	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	e022      	b.n	8001212 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6919      	ldr	r1, [r3, #16]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	2207      	movs	r2, #7
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	400a      	ands	r2, r1
 80011ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6919      	ldr	r1, [r3, #16]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	4603      	mov	r3, r0
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4403      	add	r3, r0
 8001208:	409a      	lsls	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b06      	cmp	r3, #6
 8001218:	d824      	bhi.n	8001264 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	3b05      	subs	r3, #5
 800122c:	221f      	movs	r2, #31
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	400a      	ands	r2, r1
 800123a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	3b05      	subs	r3, #5
 8001256:	fa00 f203 	lsl.w	r2, r0, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	635a      	str	r2, [r3, #52]	@ 0x34
 8001262:	e04c      	b.n	80012fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b0c      	cmp	r3, #12
 800126a:	d824      	bhi.n	80012b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	3b23      	subs	r3, #35	@ 0x23
 800127e:	221f      	movs	r2, #31
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43da      	mvns	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	400a      	ands	r2, r1
 800128c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	3b23      	subs	r3, #35	@ 0x23
 80012a8:	fa00 f203 	lsl.w	r2, r0, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80012b4:	e023      	b.n	80012fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	3b41      	subs	r3, #65	@ 0x41
 80012c8:	221f      	movs	r2, #31
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	400a      	ands	r2, r1
 80012d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	3b41      	subs	r3, #65	@ 0x41
 80012f2:	fa00 f203 	lsl.w	r2, r0, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012fe:	4b29      	ldr	r3, [pc, #164]	@ (80013a4 <HAL_ADC_ConfigChannel+0x250>)
 8001300:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a28      	ldr	r2, [pc, #160]	@ (80013a8 <HAL_ADC_ConfigChannel+0x254>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d10f      	bne.n	800132c <HAL_ADC_ConfigChannel+0x1d8>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b12      	cmp	r3, #18
 8001312:	d10b      	bne.n	800132c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1d      	ldr	r2, [pc, #116]	@ (80013a8 <HAL_ADC_ConfigChannel+0x254>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12b      	bne.n	800138e <HAL_ADC_ConfigChannel+0x23a>
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1c      	ldr	r2, [pc, #112]	@ (80013ac <HAL_ADC_ConfigChannel+0x258>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d003      	beq.n	8001348 <HAL_ADC_ConfigChannel+0x1f4>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b11      	cmp	r3, #17
 8001346:	d122      	bne.n	800138e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a11      	ldr	r2, [pc, #68]	@ (80013ac <HAL_ADC_ConfigChannel+0x258>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d111      	bne.n	800138e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <HAL_ADC_ConfigChannel+0x25c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a11      	ldr	r2, [pc, #68]	@ (80013b4 <HAL_ADC_ConfigChannel+0x260>)
 8001370:	fba2 2303 	umull	r2, r3, r2, r3
 8001374:	0c9a      	lsrs	r2, r3, #18
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001380:	e002      	b.n	8001388 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	3b01      	subs	r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f9      	bne.n	8001382 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40012300 	.word	0x40012300
 80013a8:	40012000 	.word	0x40012000
 80013ac:	10000012 	.word	0x10000012
 80013b0:	20000000 	.word	0x20000000
 80013b4:	431bde83 	.word	0x431bde83

080013b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013c0:	4b79      	ldr	r3, [pc, #484]	@ (80015a8 <ADC_Init+0x1f0>)
 80013c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	431a      	orrs	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6859      	ldr	r1, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	021a      	lsls	r2, r3, #8
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001432:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6899      	ldr	r1, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800144a:	4a58      	ldr	r2, [pc, #352]	@ (80015ac <ADC_Init+0x1f4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d022      	beq.n	8001496 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800145e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6899      	ldr	r1, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6899      	ldr	r1, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	e00f      	b.n	80014b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0202 	bic.w	r2, r2, #2
 80014c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6899      	ldr	r1, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7e1b      	ldrb	r3, [r3, #24]
 80014d0:	005a      	lsls	r2, r3, #1
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d01b      	beq.n	800151c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001502:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6859      	ldr	r1, [r3, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150e:	3b01      	subs	r3, #1
 8001510:	035a      	lsls	r2, r3, #13
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	e007      	b.n	800152c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800152a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800153a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	3b01      	subs	r3, #1
 8001548:	051a      	lsls	r2, r3, #20
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6899      	ldr	r1, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800156e:	025a      	lsls	r2, r3, #9
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001586:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6899      	ldr	r1, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	029a      	lsls	r2, r3, #10
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	609a      	str	r2, [r3, #8]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40012300 	.word	0x40012300
 80015ac:	0f000001 	.word	0x0f000001

080015b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	@ (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	@ (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	db0b      	blt.n	800163e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	f003 021f 	and.w	r2, r3, #31
 800162c:	4907      	ldr	r1, [pc, #28]	@ (800164c <__NVIC_EnableIRQ+0x38>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	2001      	movs	r0, #1
 8001636:	fa00 f202 	lsl.w	r2, r0, r2
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000e100 	.word	0xe000e100

08001650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db0a      	blt.n	800167a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	490c      	ldr	r1, [pc, #48]	@ (800169c <__NVIC_SetPriority+0x4c>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	0112      	lsls	r2, r2, #4
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	440b      	add	r3, r1
 8001674:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001678:	e00a      	b.n	8001690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4908      	ldr	r1, [pc, #32]	@ (80016a0 <__NVIC_SetPriority+0x50>)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	3b04      	subs	r3, #4
 8001688:	0112      	lsls	r2, r2, #4
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	440b      	add	r3, r1
 800168e:	761a      	strb	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000e100 	.word	0xe000e100
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	@ 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f1c3 0307 	rsb	r3, r3, #7
 80016be:	2b04      	cmp	r3, #4
 80016c0:	bf28      	it	cs
 80016c2:	2304      	movcs	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3304      	adds	r3, #4
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d902      	bls.n	80016d4 <NVIC_EncodePriority+0x30>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3b03      	subs	r3, #3
 80016d2:	e000      	b.n	80016d6 <NVIC_EncodePriority+0x32>
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	401a      	ands	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43d9      	mvns	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	4313      	orrs	r3, r2
         );
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3724      	adds	r7, #36	@ 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ff4c 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001732:	f7ff ff61 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 8001736:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	68b9      	ldr	r1, [r7, #8]
 800173c:	6978      	ldr	r0, [r7, #20]
 800173e:	f7ff ffb1 	bl	80016a4 <NVIC_EncodePriority>
 8001742:	4602      	mov	r2, r0
 8001744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001748:	4611      	mov	r1, r2
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ff80 	bl	8001650 <__NVIC_SetPriority>
}
 8001750:	bf00      	nop
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff54 	bl	8001614 <__NVIC_EnableIRQ>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e014      	b.n	80017b0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	791b      	ldrb	r3, [r3, #4]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d105      	bne.n	800179c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fa2c 	bl	8000bf4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2202      	movs	r2, #2
 80017a0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ce:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d01d      	beq.n	8001816 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d018      	beq.n	8001816 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2204      	movs	r2, #4
 80017e8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800180e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f827 	bl	8001864 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d01d      	beq.n	800185c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d018      	beq.n	800185c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2204      	movs	r2, #4
 800182e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	f043 0202 	orr.w	r2, r3, #2
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001844:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001854:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f867 	bl	800192a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <HAL_DAC_ConfigChannel+0x1c>
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e042      	b.n	800191e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	795b      	ldrb	r3, [r3, #5]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_DAC_ConfigChannel+0x2c>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e03c      	b.n	800191e <HAL_DAC_ConfigChannel+0xa6>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2201      	movs	r2, #1
 80018a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2202      	movs	r2, #2
 80018ae:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6819      	ldr	r1, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	22c0      	movs	r2, #192	@ 0xc0
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	400a      	ands	r2, r1
 800190e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2201      	movs	r2, #1
 8001914:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800191c:	7ffb      	ldrb	r3, [r7, #31]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3724      	adds	r7, #36	@ 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff fbb2 	bl	80010b4 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e099      	b.n	8001a90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2202      	movs	r2, #2
 8001960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0201 	bic.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800197c:	e00f      	b.n	800199e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800197e:	f7ff fb99 	bl	80010b4 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b05      	cmp	r3, #5
 800198a:	d908      	bls.n	800199e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2220      	movs	r2, #32
 8001990:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2203      	movs	r2, #3
 8001996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e078      	b.n	8001a90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1e8      	bne.n	800197e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	4b38      	ldr	r3, [pc, #224]	@ (8001a98 <HAL_DMA_Init+0x158>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d107      	bne.n	8001a08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a00:	4313      	orrs	r3, r2
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f023 0307 	bic.w	r3, r3, #7
 8001a1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d117      	bne.n	8001a62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00e      	beq.n	8001a62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f9e9 	bl	8001e1c <DMA_CheckFifoParam>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2240      	movs	r2, #64	@ 0x40
 8001a54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e016      	b.n	8001a90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f9a0 	bl	8001db0 <DMA_CalcBaseAndBitshift>
 8001a70:	4603      	mov	r3, r0
 8001a72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a78:	223f      	movs	r2, #63	@ 0x3f
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	f010803f 	.word	0xf010803f

08001a9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001aa8:	4b8e      	ldr	r3, [pc, #568]	@ (8001ce4 <HAL_DMA_IRQHandler+0x248>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a8e      	ldr	r2, [pc, #568]	@ (8001ce8 <HAL_DMA_IRQHandler+0x24c>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	0a9b      	lsrs	r3, r3, #10
 8001ab4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d01a      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d013      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0204 	bic.w	r2, r2, #4
 8001aee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af4:	2208      	movs	r2, #8
 8001af6:	409a      	lsls	r2, r3
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d012      	beq.n	8001b3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b36:	f043 0202 	orr.w	r2, r3, #2
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b42:	2204      	movs	r2, #4
 8001b44:	409a      	lsls	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d012      	beq.n	8001b74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00b      	beq.n	8001b74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b60:	2204      	movs	r2, #4
 8001b62:	409a      	lsls	r2, r3
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b6c:	f043 0204 	orr.w	r2, r3, #4
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b78:	2210      	movs	r2, #16
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d043      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d03c      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b96:	2210      	movs	r2, #16
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d018      	beq.n	8001bde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d108      	bne.n	8001bcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d024      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4798      	blx	r3
 8001bca:	e01f      	b.n	8001c0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01b      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4798      	blx	r3
 8001bdc:	e016      	b.n	8001c0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d107      	bne.n	8001bfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0208 	bic.w	r2, r2, #8
 8001bfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c10:	2220      	movs	r2, #32
 8001c12:	409a      	lsls	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 808f 	beq.w	8001d3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 8087 	beq.w	8001d3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c32:	2220      	movs	r2, #32
 8001c34:	409a      	lsls	r2, r3
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d136      	bne.n	8001cb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0216 	bic.w	r2, r2, #22
 8001c54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d103      	bne.n	8001c76 <HAL_DMA_IRQHandler+0x1da>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d007      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0208 	bic.w	r2, r2, #8
 8001c84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c8a:	223f      	movs	r2, #63	@ 0x3f
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d07e      	beq.n	8001da8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	4798      	blx	r3
        }
        return;
 8001cb2:	e079      	b.n	8001da8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d01d      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10d      	bne.n	8001cec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d031      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	4798      	blx	r3
 8001ce0:	e02c      	b.n	8001d3c <HAL_DMA_IRQHandler+0x2a0>
 8001ce2:	bf00      	nop
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d023      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	4798      	blx	r3
 8001cfc:	e01e      	b.n	8001d3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10f      	bne.n	8001d2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0210 	bic.w	r2, r2, #16
 8001d1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d032      	beq.n	8001daa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d022      	beq.n	8001d96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2205      	movs	r2, #5
 8001d54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d307      	bcc.n	8001d84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f2      	bne.n	8001d68 <HAL_DMA_IRQHandler+0x2cc>
 8001d82:	e000      	b.n	8001d86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	4798      	blx	r3
 8001da6:	e000      	b.n	8001daa <HAL_DMA_IRQHandler+0x30e>
        return;
 8001da8:	bf00      	nop
    }
  }
}
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	3b10      	subs	r3, #16
 8001dc0:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <DMA_CalcBaseAndBitshift+0x64>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dca:	4a13      	ldr	r2, [pc, #76]	@ (8001e18 <DMA_CalcBaseAndBitshift+0x68>)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d909      	bls.n	8001df2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001de6:	f023 0303 	bic.w	r3, r3, #3
 8001dea:	1d1a      	adds	r2, r3, #4
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	659a      	str	r2, [r3, #88]	@ 0x58
 8001df0:	e007      	b.n	8001e02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001dfa:	f023 0303 	bic.w	r3, r3, #3
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	aaaaaaab 	.word	0xaaaaaaab
 8001e18:	08006ee4 	.word	0x08006ee4

08001e1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d11f      	bne.n	8001e76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d856      	bhi.n	8001eea <DMA_CheckFifoParam+0xce>
 8001e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e44 <DMA_CheckFifoParam+0x28>)
 8001e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e42:	bf00      	nop
 8001e44:	08001e55 	.word	0x08001e55
 8001e48:	08001e67 	.word	0x08001e67
 8001e4c:	08001e55 	.word	0x08001e55
 8001e50:	08001eeb 	.word	0x08001eeb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d046      	beq.n	8001eee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e64:	e043      	b.n	8001eee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e6e:	d140      	bne.n	8001ef2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e74:	e03d      	b.n	8001ef2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e7e:	d121      	bne.n	8001ec4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d837      	bhi.n	8001ef6 <DMA_CheckFifoParam+0xda>
 8001e86:	a201      	add	r2, pc, #4	@ (adr r2, 8001e8c <DMA_CheckFifoParam+0x70>)
 8001e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8c:	08001e9d 	.word	0x08001e9d
 8001e90:	08001ea3 	.word	0x08001ea3
 8001e94:	08001e9d 	.word	0x08001e9d
 8001e98:	08001eb5 	.word	0x08001eb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea0:	e030      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d025      	beq.n	8001efa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eb2:	e022      	b.n	8001efa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ebc:	d11f      	bne.n	8001efe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ec2:	e01c      	b.n	8001efe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d903      	bls.n	8001ed2 <DMA_CheckFifoParam+0xb6>
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d003      	beq.n	8001ed8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ed0:	e018      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed6:	e015      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001edc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00e      	beq.n	8001f02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee8:	e00b      	b.n	8001f02 <DMA_CheckFifoParam+0xe6>
      break;
 8001eea:	bf00      	nop
 8001eec:	e00a      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      break;
 8001eee:	bf00      	nop
 8001ef0:	e008      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      break;
 8001ef2:	bf00      	nop
 8001ef4:	e006      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      break;
 8001ef6:	bf00      	nop
 8001ef8:	e004      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      break;
 8001efa:	bf00      	nop
 8001efc:	e002      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      break;   
 8001efe:	bf00      	nop
 8001f00:	e000      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      break;
 8001f02:	bf00      	nop
    }
  } 
  
  return status; 
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	e165      	b.n	80021fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f30:	2201      	movs	r2, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f040 8154 	bne.w	80021f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d005      	beq.n	8001f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d130      	bne.n	8001fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	2203      	movs	r2, #3
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 0201 	and.w	r2, r3, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d017      	beq.n	8002004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d123      	bne.n	8002058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	08da      	lsrs	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3208      	adds	r2, #8
 8002018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	220f      	movs	r2, #15
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	08da      	lsrs	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3208      	adds	r2, #8
 8002052:	69b9      	ldr	r1, [r7, #24]
 8002054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80ae 	beq.w	80021f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b5d      	ldr	r3, [pc, #372]	@ (8002214 <HAL_GPIO_Init+0x300>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002214 <HAL_GPIO_Init+0x300>)
 80020a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002214 <HAL_GPIO_Init+0x300>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b6:	4a58      	ldr	r2, [pc, #352]	@ (8002218 <HAL_GPIO_Init+0x304>)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	220f      	movs	r2, #15
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4f      	ldr	r2, [pc, #316]	@ (800221c <HAL_GPIO_Init+0x308>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d025      	beq.n	800212e <HAL_GPIO_Init+0x21a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002220 <HAL_GPIO_Init+0x30c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01f      	beq.n	800212a <HAL_GPIO_Init+0x216>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002224 <HAL_GPIO_Init+0x310>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d019      	beq.n	8002126 <HAL_GPIO_Init+0x212>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002228 <HAL_GPIO_Init+0x314>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d013      	beq.n	8002122 <HAL_GPIO_Init+0x20e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4b      	ldr	r2, [pc, #300]	@ (800222c <HAL_GPIO_Init+0x318>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00d      	beq.n	800211e <HAL_GPIO_Init+0x20a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4a      	ldr	r2, [pc, #296]	@ (8002230 <HAL_GPIO_Init+0x31c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d007      	beq.n	800211a <HAL_GPIO_Init+0x206>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a49      	ldr	r2, [pc, #292]	@ (8002234 <HAL_GPIO_Init+0x320>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d101      	bne.n	8002116 <HAL_GPIO_Init+0x202>
 8002112:	2306      	movs	r3, #6
 8002114:	e00c      	b.n	8002130 <HAL_GPIO_Init+0x21c>
 8002116:	2307      	movs	r3, #7
 8002118:	e00a      	b.n	8002130 <HAL_GPIO_Init+0x21c>
 800211a:	2305      	movs	r3, #5
 800211c:	e008      	b.n	8002130 <HAL_GPIO_Init+0x21c>
 800211e:	2304      	movs	r3, #4
 8002120:	e006      	b.n	8002130 <HAL_GPIO_Init+0x21c>
 8002122:	2303      	movs	r3, #3
 8002124:	e004      	b.n	8002130 <HAL_GPIO_Init+0x21c>
 8002126:	2302      	movs	r3, #2
 8002128:	e002      	b.n	8002130 <HAL_GPIO_Init+0x21c>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_GPIO_Init+0x21c>
 800212e:	2300      	movs	r3, #0
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	f002 0203 	and.w	r2, r2, #3
 8002136:	0092      	lsls	r2, r2, #2
 8002138:	4093      	lsls	r3, r2
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002140:	4935      	ldr	r1, [pc, #212]	@ (8002218 <HAL_GPIO_Init+0x304>)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	3302      	adds	r3, #2
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800214e:	4b3a      	ldr	r3, [pc, #232]	@ (8002238 <HAL_GPIO_Init+0x324>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002172:	4a31      	ldr	r2, [pc, #196]	@ (8002238 <HAL_GPIO_Init+0x324>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002178:	4b2f      	ldr	r3, [pc, #188]	@ (8002238 <HAL_GPIO_Init+0x324>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800219c:	4a26      	ldr	r2, [pc, #152]	@ (8002238 <HAL_GPIO_Init+0x324>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021a2:	4b25      	ldr	r3, [pc, #148]	@ (8002238 <HAL_GPIO_Init+0x324>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002238 <HAL_GPIO_Init+0x324>)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <HAL_GPIO_Init+0x324>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f0:	4a11      	ldr	r2, [pc, #68]	@ (8002238 <HAL_GPIO_Init+0x324>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3301      	adds	r3, #1
 80021fa:	61fb      	str	r3, [r7, #28]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	2b0f      	cmp	r3, #15
 8002200:	f67f ae96 	bls.w	8001f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	3724      	adds	r7, #36	@ 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	40013800 	.word	0x40013800
 800221c:	40020000 	.word	0x40020000
 8002220:	40020400 	.word	0x40020400
 8002224:	40020800 	.word	0x40020800
 8002228:	40020c00 	.word	0x40020c00
 800222c:	40021000 	.word	0x40021000
 8002230:	40021400 	.word	0x40021400
 8002234:	40021800 	.word	0x40021800
 8002238:	40013c00 	.word	0x40013c00

0800223c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
 8002248:	4613      	mov	r3, r2
 800224a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800224c:	787b      	ldrb	r3, [r7, #1]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002252:	887a      	ldrh	r2, [r7, #2]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002258:	e003      	b.n	8002262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800225a:	887b      	ldrh	r3, [r7, #2]
 800225c:	041a      	lsls	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	619a      	str	r2, [r3, #24]
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e12b      	b.n	80024da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fcf8 	bl	8000c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2224      	movs	r2, #36	@ 0x24
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022d4:	f000 fa02 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 80022d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4a81      	ldr	r2, [pc, #516]	@ (80024e4 <HAL_I2C_Init+0x274>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d807      	bhi.n	80022f4 <HAL_I2C_Init+0x84>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a80      	ldr	r2, [pc, #512]	@ (80024e8 <HAL_I2C_Init+0x278>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	bf94      	ite	ls
 80022ec:	2301      	movls	r3, #1
 80022ee:	2300      	movhi	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	e006      	b.n	8002302 <HAL_I2C_Init+0x92>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a7d      	ldr	r2, [pc, #500]	@ (80024ec <HAL_I2C_Init+0x27c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	bf94      	ite	ls
 80022fc:	2301      	movls	r3, #1
 80022fe:	2300      	movhi	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e0e7      	b.n	80024da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4a78      	ldr	r2, [pc, #480]	@ (80024f0 <HAL_I2C_Init+0x280>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0c9b      	lsrs	r3, r3, #18
 8002314:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	430a      	orrs	r2, r1
 8002328:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a6a      	ldr	r2, [pc, #424]	@ (80024e4 <HAL_I2C_Init+0x274>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d802      	bhi.n	8002344 <HAL_I2C_Init+0xd4>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	3301      	adds	r3, #1
 8002342:	e009      	b.n	8002358 <HAL_I2C_Init+0xe8>
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	4a69      	ldr	r2, [pc, #420]	@ (80024f4 <HAL_I2C_Init+0x284>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	099b      	lsrs	r3, r3, #6
 8002356:	3301      	adds	r3, #1
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	430b      	orrs	r3, r1
 800235e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800236a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	495c      	ldr	r1, [pc, #368]	@ (80024e4 <HAL_I2C_Init+0x274>)
 8002374:	428b      	cmp	r3, r1
 8002376:	d819      	bhi.n	80023ac <HAL_I2C_Init+0x13c>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1e59      	subs	r1, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fbb1 f3f3 	udiv	r3, r1, r3
 8002386:	1c59      	adds	r1, r3, #1
 8002388:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800238c:	400b      	ands	r3, r1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <HAL_I2C_Init+0x138>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1e59      	subs	r1, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a0:	3301      	adds	r3, #1
 80023a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a6:	e051      	b.n	800244c <HAL_I2C_Init+0x1dc>
 80023a8:	2304      	movs	r3, #4
 80023aa:	e04f      	b.n	800244c <HAL_I2C_Init+0x1dc>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d111      	bne.n	80023d8 <HAL_I2C_Init+0x168>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1e58      	subs	r0, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6859      	ldr	r1, [r3, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	440b      	add	r3, r1
 80023c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c6:	3301      	adds	r3, #1
 80023c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e012      	b.n	80023fe <HAL_I2C_Init+0x18e>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1e58      	subs	r0, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	0099      	lsls	r1, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_Init+0x196>
 8002402:	2301      	movs	r3, #1
 8002404:	e022      	b.n	800244c <HAL_I2C_Init+0x1dc>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10e      	bne.n	800242c <HAL_I2C_Init+0x1bc>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1e58      	subs	r0, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	440b      	add	r3, r1
 800241c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002420:	3301      	adds	r3, #1
 8002422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800242a:	e00f      	b.n	800244c <HAL_I2C_Init+0x1dc>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1e58      	subs	r0, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	0099      	lsls	r1, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002442:	3301      	adds	r3, #1
 8002444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002448:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	6809      	ldr	r1, [r1, #0]
 8002450:	4313      	orrs	r3, r2
 8002452:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800247a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6911      	ldr	r1, [r2, #16]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68d2      	ldr	r2, [r2, #12]
 8002486:	4311      	orrs	r1, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	430b      	orrs	r3, r1
 800248e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	000186a0 	.word	0x000186a0
 80024e8:	001e847f 	.word	0x001e847f
 80024ec:	003d08ff 	.word	0x003d08ff
 80024f0:	431bde83 	.word	0x431bde83
 80024f4:	10624dd3 	.word	0x10624dd3

080024f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0cc      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800250c:	4b68      	ldr	r3, [pc, #416]	@ (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d90c      	bls.n	8002534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b65      	ldr	r3, [pc, #404]	@ (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b63      	ldr	r3, [pc, #396]	@ (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0b8      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800254c:	4b59      	ldr	r3, [pc, #356]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4a58      	ldr	r2, [pc, #352]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002556:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002564:	4b53      	ldr	r3, [pc, #332]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a52      	ldr	r2, [pc, #328]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800256e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002570:	4b50      	ldr	r3, [pc, #320]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	494d      	ldr	r1, [pc, #308]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d044      	beq.n	8002618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	4b47      	ldr	r3, [pc, #284]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d119      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e07f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b6:	4b3f      	ldr	r3, [pc, #252]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e06f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c6:	4b3b      	ldr	r3, [pc, #236]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e067      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d6:	4b37      	ldr	r3, [pc, #220]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f023 0203 	bic.w	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4934      	ldr	r1, [pc, #208]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e8:	f7fe fd64 	bl	80010b4 <HAL_GetTick>
 80025ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f0:	f7fe fd60 	bl	80010b4 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e04f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	4b2b      	ldr	r3, [pc, #172]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 020c 	and.w	r2, r3, #12
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	429a      	cmp	r2, r3
 8002616:	d1eb      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002618:	4b25      	ldr	r3, [pc, #148]	@ (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d20c      	bcs.n	8002640 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b22      	ldr	r3, [pc, #136]	@ (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e032      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800264c:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4916      	ldr	r1, [pc, #88]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800266a:	4b12      	ldr	r3, [pc, #72]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	490e      	ldr	r1, [pc, #56]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800267e:	f000 f887 	bl	8002790 <HAL_RCC_GetSysClockFreq>
 8002682:	4602      	mov	r2, r0
 8002684:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	490a      	ldr	r1, [pc, #40]	@ (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	5ccb      	ldrb	r3, [r1, r3]
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	4a09      	ldr	r2, [pc, #36]	@ (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800269a:	4b09      	ldr	r3, [pc, #36]	@ (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fbe0 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023c00 	.word	0x40023c00
 80026b4:	40023800 	.word	0x40023800
 80026b8:	08006ecc 	.word	0x08006ecc
 80026bc:	20000000 	.word	0x20000000
 80026c0:	20000004 	.word	0x20000004

080026c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c8:	4b03      	ldr	r3, [pc, #12]	@ (80026d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000000 	.word	0x20000000

080026dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026e0:	f7ff fff0 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0a9b      	lsrs	r3, r3, #10
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4903      	ldr	r1, [pc, #12]	@ (8002700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800
 8002700:	08006edc 	.word	0x08006edc

08002704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002708:	f7ff ffdc 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	0b5b      	lsrs	r3, r3, #13
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	4903      	ldr	r1, [pc, #12]	@ (8002728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800271a:	5ccb      	ldrb	r3, [r1, r3]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40023800 	.word	0x40023800
 8002728:	08006edc 	.word	0x08006edc

0800272c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	220f      	movs	r2, #15
 800273a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800273c:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0203 	and.w	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002748:	4b0f      	ldr	r3, [pc, #60]	@ (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002754:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002760:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <HAL_RCC_GetClockConfig+0x5c>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800276e:	4b07      	ldr	r3, [pc, #28]	@ (800278c <HAL_RCC_GetClockConfig+0x60>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 020f 	and.w	r2, r3, #15
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	40023c00 	.word	0x40023c00

08002790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002794:	b0ae      	sub	sp, #184	@ 0xb8
 8002796:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b6:	4bcb      	ldr	r3, [pc, #812]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b0c      	cmp	r3, #12
 80027c0:	f200 8206 	bhi.w	8002bd0 <HAL_RCC_GetSysClockFreq+0x440>
 80027c4:	a201      	add	r2, pc, #4	@ (adr r2, 80027cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80027c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ca:	bf00      	nop
 80027cc:	08002801 	.word	0x08002801
 80027d0:	08002bd1 	.word	0x08002bd1
 80027d4:	08002bd1 	.word	0x08002bd1
 80027d8:	08002bd1 	.word	0x08002bd1
 80027dc:	08002809 	.word	0x08002809
 80027e0:	08002bd1 	.word	0x08002bd1
 80027e4:	08002bd1 	.word	0x08002bd1
 80027e8:	08002bd1 	.word	0x08002bd1
 80027ec:	08002811 	.word	0x08002811
 80027f0:	08002bd1 	.word	0x08002bd1
 80027f4:	08002bd1 	.word	0x08002bd1
 80027f8:	08002bd1 	.word	0x08002bd1
 80027fc:	08002a01 	.word	0x08002a01
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002800:	4bb9      	ldr	r3, [pc, #740]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002802:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002806:	e1e7      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002808:	4bb8      	ldr	r3, [pc, #736]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x35c>)
 800280a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800280e:	e1e3      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002810:	4bb4      	ldr	r3, [pc, #720]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002818:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800281c:	4bb1      	ldr	r3, [pc, #708]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d071      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002828:	4bae      	ldr	r3, [pc, #696]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	099b      	lsrs	r3, r3, #6
 800282e:	2200      	movs	r2, #0
 8002830:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002834:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002838:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800283c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002840:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002844:	2300      	movs	r3, #0
 8002846:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800284a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800284e:	4622      	mov	r2, r4
 8002850:	462b      	mov	r3, r5
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f04f 0100 	mov.w	r1, #0
 800285a:	0159      	lsls	r1, r3, #5
 800285c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002860:	0150      	lsls	r0, r2, #5
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4621      	mov	r1, r4
 8002868:	1a51      	subs	r1, r2, r1
 800286a:	6439      	str	r1, [r7, #64]	@ 0x40
 800286c:	4629      	mov	r1, r5
 800286e:	eb63 0301 	sbc.w	r3, r3, r1
 8002872:	647b      	str	r3, [r7, #68]	@ 0x44
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002880:	4649      	mov	r1, r9
 8002882:	018b      	lsls	r3, r1, #6
 8002884:	4641      	mov	r1, r8
 8002886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288a:	4641      	mov	r1, r8
 800288c:	018a      	lsls	r2, r1, #6
 800288e:	4641      	mov	r1, r8
 8002890:	1a51      	subs	r1, r2, r1
 8002892:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002894:	4649      	mov	r1, r9
 8002896:	eb63 0301 	sbc.w	r3, r3, r1
 800289a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80028a8:	4649      	mov	r1, r9
 80028aa:	00cb      	lsls	r3, r1, #3
 80028ac:	4641      	mov	r1, r8
 80028ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028b2:	4641      	mov	r1, r8
 80028b4:	00ca      	lsls	r2, r1, #3
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	4603      	mov	r3, r0
 80028bc:	4622      	mov	r2, r4
 80028be:	189b      	adds	r3, r3, r2
 80028c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028c2:	462b      	mov	r3, r5
 80028c4:	460a      	mov	r2, r1
 80028c6:	eb42 0303 	adc.w	r3, r2, r3
 80028ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028d8:	4629      	mov	r1, r5
 80028da:	024b      	lsls	r3, r1, #9
 80028dc:	4621      	mov	r1, r4
 80028de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028e2:	4621      	mov	r1, r4
 80028e4:	024a      	lsls	r2, r1, #9
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028ee:	2200      	movs	r2, #0
 80028f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80028fc:	f7fd fc88 	bl	8000210 <__aeabi_uldivmod>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4613      	mov	r3, r2
 8002906:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800290a:	e067      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290c:	4b75      	ldr	r3, [pc, #468]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	2200      	movs	r2, #0
 8002914:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002918:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800291c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002924:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002926:	2300      	movs	r3, #0
 8002928:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800292a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800292e:	4622      	mov	r2, r4
 8002930:	462b      	mov	r3, r5
 8002932:	f04f 0000 	mov.w	r0, #0
 8002936:	f04f 0100 	mov.w	r1, #0
 800293a:	0159      	lsls	r1, r3, #5
 800293c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002940:	0150      	lsls	r0, r2, #5
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4621      	mov	r1, r4
 8002948:	1a51      	subs	r1, r2, r1
 800294a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800294c:	4629      	mov	r1, r5
 800294e:	eb63 0301 	sbc.w	r3, r3, r1
 8002952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002960:	4649      	mov	r1, r9
 8002962:	018b      	lsls	r3, r1, #6
 8002964:	4641      	mov	r1, r8
 8002966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800296a:	4641      	mov	r1, r8
 800296c:	018a      	lsls	r2, r1, #6
 800296e:	4641      	mov	r1, r8
 8002970:	ebb2 0a01 	subs.w	sl, r2, r1
 8002974:	4649      	mov	r1, r9
 8002976:	eb63 0b01 	sbc.w	fp, r3, r1
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002986:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800298a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800298e:	4692      	mov	sl, r2
 8002990:	469b      	mov	fp, r3
 8002992:	4623      	mov	r3, r4
 8002994:	eb1a 0303 	adds.w	r3, sl, r3
 8002998:	623b      	str	r3, [r7, #32]
 800299a:	462b      	mov	r3, r5
 800299c:	eb4b 0303 	adc.w	r3, fp, r3
 80029a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029ae:	4629      	mov	r1, r5
 80029b0:	028b      	lsls	r3, r1, #10
 80029b2:	4621      	mov	r1, r4
 80029b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029b8:	4621      	mov	r1, r4
 80029ba:	028a      	lsls	r2, r1, #10
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029c4:	2200      	movs	r2, #0
 80029c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80029c8:	677a      	str	r2, [r7, #116]	@ 0x74
 80029ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80029ce:	f7fd fc1f 	bl	8000210 <__aeabi_uldivmod>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4613      	mov	r3, r2
 80029d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029dc:	4b41      	ldr	r3, [pc, #260]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	3301      	adds	r3, #1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80029ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029fe:	e0eb      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a00:	4b38      	ldr	r3, [pc, #224]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a0c:	4b35      	ldr	r3, [pc, #212]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d06b      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a18:	4b32      	ldr	r3, [pc, #200]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	099b      	lsrs	r3, r3, #6
 8002a1e:	2200      	movs	r2, #0
 8002a20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a30:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a34:	4622      	mov	r2, r4
 8002a36:	462b      	mov	r3, r5
 8002a38:	f04f 0000 	mov.w	r0, #0
 8002a3c:	f04f 0100 	mov.w	r1, #0
 8002a40:	0159      	lsls	r1, r3, #5
 8002a42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a46:	0150      	lsls	r0, r2, #5
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	1a51      	subs	r1, r2, r1
 8002a50:	61b9      	str	r1, [r7, #24]
 8002a52:	4629      	mov	r1, r5
 8002a54:	eb63 0301 	sbc.w	r3, r3, r1
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a66:	4659      	mov	r1, fp
 8002a68:	018b      	lsls	r3, r1, #6
 8002a6a:	4651      	mov	r1, sl
 8002a6c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a70:	4651      	mov	r1, sl
 8002a72:	018a      	lsls	r2, r1, #6
 8002a74:	4651      	mov	r1, sl
 8002a76:	ebb2 0801 	subs.w	r8, r2, r1
 8002a7a:	4659      	mov	r1, fp
 8002a7c:	eb63 0901 	sbc.w	r9, r3, r1
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a94:	4690      	mov	r8, r2
 8002a96:	4699      	mov	r9, r3
 8002a98:	4623      	mov	r3, r4
 8002a9a:	eb18 0303 	adds.w	r3, r8, r3
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	462b      	mov	r3, r5
 8002aa2:	eb49 0303 	adc.w	r3, r9, r3
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	024b      	lsls	r3, r1, #9
 8002ab8:	4621      	mov	r1, r4
 8002aba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002abe:	4621      	mov	r1, r4
 8002ac0:	024a      	lsls	r2, r1, #9
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002aca:	2200      	movs	r2, #0
 8002acc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ace:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ad0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ad4:	f7fd fb9c 	bl	8000210 <__aeabi_uldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4613      	mov	r3, r2
 8002ade:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae2:	e065      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x420>
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	00f42400 	.word	0x00f42400
 8002aec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af0:	4b3d      	ldr	r3, [pc, #244]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	099b      	lsrs	r3, r3, #6
 8002af6:	2200      	movs	r2, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	4611      	mov	r1, r2
 8002afc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b00:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b02:	2300      	movs	r3, #0
 8002b04:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b06:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b0a:	4642      	mov	r2, r8
 8002b0c:	464b      	mov	r3, r9
 8002b0e:	f04f 0000 	mov.w	r0, #0
 8002b12:	f04f 0100 	mov.w	r1, #0
 8002b16:	0159      	lsls	r1, r3, #5
 8002b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b1c:	0150      	lsls	r0, r2, #5
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4641      	mov	r1, r8
 8002b24:	1a51      	subs	r1, r2, r1
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	4649      	mov	r1, r9
 8002b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b3c:	4659      	mov	r1, fp
 8002b3e:	018b      	lsls	r3, r1, #6
 8002b40:	4651      	mov	r1, sl
 8002b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b46:	4651      	mov	r1, sl
 8002b48:	018a      	lsls	r2, r1, #6
 8002b4a:	4651      	mov	r1, sl
 8002b4c:	1a54      	subs	r4, r2, r1
 8002b4e:	4659      	mov	r1, fp
 8002b50:	eb63 0501 	sbc.w	r5, r3, r1
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	00eb      	lsls	r3, r5, #3
 8002b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b62:	00e2      	lsls	r2, r4, #3
 8002b64:	4614      	mov	r4, r2
 8002b66:	461d      	mov	r5, r3
 8002b68:	4643      	mov	r3, r8
 8002b6a:	18e3      	adds	r3, r4, r3
 8002b6c:	603b      	str	r3, [r7, #0]
 8002b6e:	464b      	mov	r3, r9
 8002b70:	eb45 0303 	adc.w	r3, r5, r3
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b82:	4629      	mov	r1, r5
 8002b84:	028b      	lsls	r3, r1, #10
 8002b86:	4621      	mov	r1, r4
 8002b88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	028a      	lsls	r2, r1, #10
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b98:	2200      	movs	r2, #0
 8002b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b9c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002b9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ba2:	f7fd fb35 	bl	8000210 <__aeabi_uldivmod>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4613      	mov	r3, r2
 8002bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	0f1b      	lsrs	r3, r3, #28
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002bbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bce:	e003      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x45c>)
 8002bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	37b8      	adds	r7, #184	@ 0xb8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	00f42400 	.word	0x00f42400

08002bf0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e28d      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8083 	beq.w	8002d16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c10:	4b94      	ldr	r3, [pc, #592]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 030c 	and.w	r3, r3, #12
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d019      	beq.n	8002c50 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c1c:	4b91      	ldr	r3, [pc, #580]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c28:	4b8e      	ldr	r3, [pc, #568]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c34:	d00c      	beq.n	8002c50 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c36:	4b8b      	ldr	r3, [pc, #556]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c3e:	2b0c      	cmp	r3, #12
 8002c40:	d112      	bne.n	8002c68 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c42:	4b88      	ldr	r3, [pc, #544]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c4e:	d10b      	bne.n	8002c68 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c50:	4b84      	ldr	r3, [pc, #528]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d05b      	beq.n	8002d14 <HAL_RCC_OscConfig+0x124>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d157      	bne.n	8002d14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e25a      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c70:	d106      	bne.n	8002c80 <HAL_RCC_OscConfig+0x90>
 8002c72:	4b7c      	ldr	r3, [pc, #496]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7b      	ldr	r2, [pc, #492]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e01d      	b.n	8002cbc <HAL_RCC_OscConfig+0xcc>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xb4>
 8002c8a:	4b76      	ldr	r3, [pc, #472]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a75      	ldr	r2, [pc, #468]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b73      	ldr	r3, [pc, #460]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a72      	ldr	r2, [pc, #456]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCC_OscConfig+0xcc>
 8002ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a6e      	ldr	r2, [pc, #440]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6b      	ldr	r2, [pc, #428]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d013      	beq.n	8002cec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe f9f6 	bl	80010b4 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7fe f9f2 	bl	80010b4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	@ 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e21f      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	4b61      	ldr	r3, [pc, #388]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0xdc>
 8002cea:	e014      	b.n	8002d16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe f9e2 	bl	80010b4 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf4:	f7fe f9de 	bl	80010b4 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	@ 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e20b      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d06:	4b57      	ldr	r3, [pc, #348]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x104>
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d06f      	beq.n	8002e02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d22:	4b50      	ldr	r3, [pc, #320]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d017      	beq.n	8002d5e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d105      	bne.n	8002d46 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d46:	4b47      	ldr	r3, [pc, #284]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d11c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d52:	4b44      	ldr	r3, [pc, #272]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d116      	bne.n	8002d8c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	4b41      	ldr	r3, [pc, #260]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_RCC_OscConfig+0x186>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e1d3      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d76:	4b3b      	ldr	r3, [pc, #236]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4937      	ldr	r1, [pc, #220]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8a:	e03a      	b.n	8002e02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d94:	4b34      	ldr	r3, [pc, #208]	@ (8002e68 <HAL_RCC_OscConfig+0x278>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7fe f98b 	bl	80010b4 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da2:	f7fe f987 	bl	80010b4 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e1b4      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db4:	4b2b      	ldr	r3, [pc, #172]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc0:	4b28      	ldr	r3, [pc, #160]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4925      	ldr	r1, [pc, #148]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	e015      	b.n	8002e02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd6:	4b24      	ldr	r3, [pc, #144]	@ (8002e68 <HAL_RCC_OscConfig+0x278>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe f96a 	bl	80010b4 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de4:	f7fe f966 	bl	80010b4 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e193      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d036      	beq.n	8002e7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e16:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <HAL_RCC_OscConfig+0x27c>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1c:	f7fe f94a 	bl	80010b4 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e24:	f7fe f946 	bl	80010b4 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e173      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e36:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <HAL_RCC_OscConfig+0x274>)
 8002e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x234>
 8002e42:	e01b      	b.n	8002e7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e44:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <HAL_RCC_OscConfig+0x27c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4a:	f7fe f933 	bl	80010b4 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	e00e      	b.n	8002e70 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e52:	f7fe f92f 	bl	80010b4 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d907      	bls.n	8002e70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e15c      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
 8002e64:	40023800 	.word	0x40023800
 8002e68:	42470000 	.word	0x42470000
 8002e6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e70:	4b8a      	ldr	r3, [pc, #552]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002e72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ea      	bne.n	8002e52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8097 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8e:	4b83      	ldr	r3, [pc, #524]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10f      	bne.n	8002eba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	4b7f      	ldr	r3, [pc, #508]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	4a7e      	ldr	r2, [pc, #504]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eaa:	4b7c      	ldr	r3, [pc, #496]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eba:	4b79      	ldr	r3, [pc, #484]	@ (80030a0 <HAL_RCC_OscConfig+0x4b0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d118      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec6:	4b76      	ldr	r3, [pc, #472]	@ (80030a0 <HAL_RCC_OscConfig+0x4b0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a75      	ldr	r2, [pc, #468]	@ (80030a0 <HAL_RCC_OscConfig+0x4b0>)
 8002ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe f8ef 	bl	80010b4 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eda:	f7fe f8eb 	bl	80010b4 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e118      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eec:	4b6c      	ldr	r3, [pc, #432]	@ (80030a0 <HAL_RCC_OscConfig+0x4b0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d106      	bne.n	8002f0e <HAL_RCC_OscConfig+0x31e>
 8002f00:	4b66      	ldr	r3, [pc, #408]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f04:	4a65      	ldr	r2, [pc, #404]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f0c:	e01c      	b.n	8002f48 <HAL_RCC_OscConfig+0x358>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x340>
 8002f16:	4b61      	ldr	r3, [pc, #388]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1a:	4a60      	ldr	r2, [pc, #384]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f1c:	f043 0304 	orr.w	r3, r3, #4
 8002f20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f22:	4b5e      	ldr	r3, [pc, #376]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f26:	4a5d      	ldr	r2, [pc, #372]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCC_OscConfig+0x358>
 8002f30:	4b5a      	ldr	r3, [pc, #360]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f34:	4a59      	ldr	r2, [pc, #356]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f3c:	4b57      	ldr	r3, [pc, #348]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f40:	4a56      	ldr	r2, [pc, #344]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f42:	f023 0304 	bic.w	r3, r3, #4
 8002f46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d015      	beq.n	8002f7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fe f8b0 	bl	80010b4 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f58:	f7fe f8ac 	bl	80010b4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e0d7      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0ee      	beq.n	8002f58 <HAL_RCC_OscConfig+0x368>
 8002f7a:	e014      	b.n	8002fa6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7fe f89a 	bl	80010b4 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f84:	f7fe f896 	bl	80010b4 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e0c1      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9a:	4b40      	ldr	r3, [pc, #256]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1ee      	bne.n	8002f84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fa6:	7dfb      	ldrb	r3, [r7, #23]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fac:	4b3b      	ldr	r3, [pc, #236]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	4a3a      	ldr	r2, [pc, #232]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002fb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80ad 	beq.w	800311c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fc2:	4b36      	ldr	r3, [pc, #216]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d060      	beq.n	8003090 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d145      	bne.n	8003062 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd6:	4b33      	ldr	r3, [pc, #204]	@ (80030a4 <HAL_RCC_OscConfig+0x4b4>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe f86a 	bl	80010b4 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe f866 	bl	80010b4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e093      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	4b29      	ldr	r3, [pc, #164]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003010:	019b      	lsls	r3, r3, #6
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	3b01      	subs	r3, #1
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003024:	061b      	lsls	r3, r3, #24
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302c:	071b      	lsls	r3, r3, #28
 800302e:	491b      	ldr	r1, [pc, #108]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8003030:	4313      	orrs	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003034:	4b1b      	ldr	r3, [pc, #108]	@ (80030a4 <HAL_RCC_OscConfig+0x4b4>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fe f83b 	bl	80010b4 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003042:	f7fe f837 	bl	80010b4 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e064      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003054:	4b11      	ldr	r3, [pc, #68]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x452>
 8003060:	e05c      	b.n	800311c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <HAL_RCC_OscConfig+0x4b4>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe f824 	bl	80010b4 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7fe f820 	bl	80010b4 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e04d      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	4b06      	ldr	r3, [pc, #24]	@ (800309c <HAL_RCC_OscConfig+0x4ac>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x480>
 800308e:	e045      	b.n	800311c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e040      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
 800309c:	40023800 	.word	0x40023800
 80030a0:	40007000 	.word	0x40007000
 80030a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003128 <HAL_RCC_OscConfig+0x538>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d030      	beq.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d129      	bne.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d122      	bne.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030d8:	4013      	ands	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d119      	bne.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	3b01      	subs	r3, #1
 80030f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d10f      	bne.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003102:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d107      	bne.n	8003118 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800

0800312c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e041      	b.n	80031c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f839 	bl	80031ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3304      	adds	r3, #4
 8003168:	4619      	mov	r1, r3
 800316a:	4610      	mov	r0, r2
 800316c:	f000 fad2 	bl	8003714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d001      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e04e      	b.n	8003296 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a23      	ldr	r2, [pc, #140]	@ (80032a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d022      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x80>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003222:	d01d      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x80>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1f      	ldr	r2, [pc, #124]	@ (80032a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d018      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x80>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1e      	ldr	r2, [pc, #120]	@ (80032ac <HAL_TIM_Base_Start_IT+0xcc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d013      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x80>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1c      	ldr	r2, [pc, #112]	@ (80032b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00e      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x80>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1b      	ldr	r2, [pc, #108]	@ (80032b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d009      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x80>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a19      	ldr	r2, [pc, #100]	@ (80032b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_TIM_Base_Start_IT+0x80>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a18      	ldr	r2, [pc, #96]	@ (80032bc <HAL_TIM_Base_Start_IT+0xdc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d111      	bne.n	8003284 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b06      	cmp	r3, #6
 8003270:	d010      	beq.n	8003294 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0201 	orr.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003282:	e007      	b.n	8003294 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40000c00 	.word	0x40000c00
 80032b4:	40010400 	.word	0x40010400
 80032b8:	40014000 	.word	0x40014000
 80032bc:	40001800 	.word	0x40001800

080032c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e041      	b.n	8003356 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7fd fd18 	bl	8000d1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f000 fa08 	bl	8003714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d020      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01b      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f06f 0202 	mvn.w	r2, #2
 8003392:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f995 	bl	80036d8 <HAL_TIM_IC_CaptureCallback>
 80033ae:	e005      	b.n	80033bc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f987 	bl	80036c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f998 	bl	80036ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d01b      	beq.n	800340e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f06f 0204 	mvn.w	r2, #4
 80033de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f96f 	bl	80036d8 <HAL_TIM_IC_CaptureCallback>
 80033fa:	e005      	b.n	8003408 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f961 	bl	80036c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f972 	bl	80036ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d01b      	beq.n	800345a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f06f 0208 	mvn.w	r2, #8
 800342a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2204      	movs	r2, #4
 8003430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f949 	bl	80036d8 <HAL_TIM_IC_CaptureCallback>
 8003446:	e005      	b.n	8003454 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f93b 	bl	80036c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f94c 	bl	80036ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d01b      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f06f 0210 	mvn.w	r2, #16
 8003476:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2208      	movs	r2, #8
 800347c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f923 	bl	80036d8 <HAL_TIM_IC_CaptureCallback>
 8003492:	e005      	b.n	80034a0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f915 	bl	80036c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f926 	bl	80036ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00c      	beq.n	80034ca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f06f 0201 	mvn.w	r2, #1
 80034c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fd faa1 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00c      	beq.n	80034ee <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fbef 	bl	8003ccc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00c      	beq.n	8003512 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800350a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f8f7 	bl	8003700 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00c      	beq.n	8003536 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f06f 0220 	mvn.w	r2, #32
 800352e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fbc1 	bl	8003cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800355a:	2302      	movs	r3, #2
 800355c:	e0ae      	b.n	80036bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b0c      	cmp	r3, #12
 800356a:	f200 809f 	bhi.w	80036ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800356e:	a201      	add	r2, pc, #4	@ (adr r2, 8003574 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	080035a9 	.word	0x080035a9
 8003578:	080036ad 	.word	0x080036ad
 800357c:	080036ad 	.word	0x080036ad
 8003580:	080036ad 	.word	0x080036ad
 8003584:	080035e9 	.word	0x080035e9
 8003588:	080036ad 	.word	0x080036ad
 800358c:	080036ad 	.word	0x080036ad
 8003590:	080036ad 	.word	0x080036ad
 8003594:	0800362b 	.word	0x0800362b
 8003598:	080036ad 	.word	0x080036ad
 800359c:	080036ad 	.word	0x080036ad
 80035a0:	080036ad 	.word	0x080036ad
 80035a4:	0800366b 	.word	0x0800366b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f956 	bl	8003860 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699a      	ldr	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0208 	orr.w	r2, r2, #8
 80035c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0204 	bic.w	r2, r2, #4
 80035d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6999      	ldr	r1, [r3, #24]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	619a      	str	r2, [r3, #24]
      break;
 80035e6:	e064      	b.n	80036b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f9a6 	bl	8003940 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6999      	ldr	r1, [r3, #24]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	021a      	lsls	r2, r3, #8
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	619a      	str	r2, [r3, #24]
      break;
 8003628:	e043      	b.n	80036b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f9fb 	bl	8003a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0208 	orr.w	r2, r2, #8
 8003644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0204 	bic.w	r2, r2, #4
 8003654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69d9      	ldr	r1, [r3, #28]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	61da      	str	r2, [r3, #28]
      break;
 8003668:	e023      	b.n	80036b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fa4f 	bl	8003b14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69da      	ldr	r2, [r3, #28]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69d9      	ldr	r1, [r3, #28]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	021a      	lsls	r2, r3, #8
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	61da      	str	r2, [r3, #28]
      break;
 80036aa:	e002      	b.n	80036b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	75fb      	strb	r3, [r7, #23]
      break;
 80036b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a43      	ldr	r2, [pc, #268]	@ (8003834 <TIM_Base_SetConfig+0x120>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d013      	beq.n	8003754 <TIM_Base_SetConfig+0x40>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003732:	d00f      	beq.n	8003754 <TIM_Base_SetConfig+0x40>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a40      	ldr	r2, [pc, #256]	@ (8003838 <TIM_Base_SetConfig+0x124>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00b      	beq.n	8003754 <TIM_Base_SetConfig+0x40>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a3f      	ldr	r2, [pc, #252]	@ (800383c <TIM_Base_SetConfig+0x128>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d007      	beq.n	8003754 <TIM_Base_SetConfig+0x40>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a3e      	ldr	r2, [pc, #248]	@ (8003840 <TIM_Base_SetConfig+0x12c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <TIM_Base_SetConfig+0x40>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a3d      	ldr	r2, [pc, #244]	@ (8003844 <TIM_Base_SetConfig+0x130>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d108      	bne.n	8003766 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a32      	ldr	r2, [pc, #200]	@ (8003834 <TIM_Base_SetConfig+0x120>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d02b      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003774:	d027      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2f      	ldr	r2, [pc, #188]	@ (8003838 <TIM_Base_SetConfig+0x124>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d023      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a2e      	ldr	r2, [pc, #184]	@ (800383c <TIM_Base_SetConfig+0x128>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01f      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a2d      	ldr	r2, [pc, #180]	@ (8003840 <TIM_Base_SetConfig+0x12c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01b      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a2c      	ldr	r2, [pc, #176]	@ (8003844 <TIM_Base_SetConfig+0x130>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d017      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a2b      	ldr	r2, [pc, #172]	@ (8003848 <TIM_Base_SetConfig+0x134>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a2a      	ldr	r2, [pc, #168]	@ (800384c <TIM_Base_SetConfig+0x138>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00f      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a29      	ldr	r2, [pc, #164]	@ (8003850 <TIM_Base_SetConfig+0x13c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00b      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a28      	ldr	r2, [pc, #160]	@ (8003854 <TIM_Base_SetConfig+0x140>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d007      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a27      	ldr	r2, [pc, #156]	@ (8003858 <TIM_Base_SetConfig+0x144>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d003      	beq.n	80037c6 <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a26      	ldr	r2, [pc, #152]	@ (800385c <TIM_Base_SetConfig+0x148>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d108      	bne.n	80037d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003834 <TIM_Base_SetConfig+0x120>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d003      	beq.n	8003806 <TIM_Base_SetConfig+0xf2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a10      	ldr	r2, [pc, #64]	@ (8003844 <TIM_Base_SetConfig+0x130>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d103      	bne.n	800380e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f043 0204 	orr.w	r2, r3, #4
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	601a      	str	r2, [r3, #0]
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40010000 	.word	0x40010000
 8003838:	40000400 	.word	0x40000400
 800383c:	40000800 	.word	0x40000800
 8003840:	40000c00 	.word	0x40000c00
 8003844:	40010400 	.word	0x40010400
 8003848:	40014000 	.word	0x40014000
 800384c:	40014400 	.word	0x40014400
 8003850:	40014800 	.word	0x40014800
 8003854:	40001800 	.word	0x40001800
 8003858:	40001c00 	.word	0x40001c00
 800385c:	40002000 	.word	0x40002000

08003860 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f023 0201 	bic.w	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800388e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0303 	bic.w	r3, r3, #3
 8003896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f023 0302 	bic.w	r3, r3, #2
 80038a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a20      	ldr	r2, [pc, #128]	@ (8003938 <TIM_OC1_SetConfig+0xd8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <TIM_OC1_SetConfig+0x64>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a1f      	ldr	r2, [pc, #124]	@ (800393c <TIM_OC1_SetConfig+0xdc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d10c      	bne.n	80038de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f023 0308 	bic.w	r3, r3, #8
 80038ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f023 0304 	bic.w	r3, r3, #4
 80038dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a15      	ldr	r2, [pc, #84]	@ (8003938 <TIM_OC1_SetConfig+0xd8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <TIM_OC1_SetConfig+0x8e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a14      	ldr	r2, [pc, #80]	@ (800393c <TIM_OC1_SetConfig+0xdc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d111      	bne.n	8003912 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	621a      	str	r2, [r3, #32]
}
 800392c:	bf00      	nop
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40010000 	.word	0x40010000
 800393c:	40010400 	.word	0x40010400

08003940 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f023 0210 	bic.w	r2, r3, #16
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800396e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f023 0320 	bic.w	r3, r3, #32
 800398a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a22      	ldr	r2, [pc, #136]	@ (8003a24 <TIM_OC2_SetConfig+0xe4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_OC2_SetConfig+0x68>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a21      	ldr	r2, [pc, #132]	@ (8003a28 <TIM_OC2_SetConfig+0xe8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d10d      	bne.n	80039c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a17      	ldr	r2, [pc, #92]	@ (8003a24 <TIM_OC2_SetConfig+0xe4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_OC2_SetConfig+0x94>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a16      	ldr	r2, [pc, #88]	@ (8003a28 <TIM_OC2_SetConfig+0xe8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d113      	bne.n	80039fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	621a      	str	r2, [r3, #32]
}
 8003a16:	bf00      	nop
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40010000 	.word	0x40010000
 8003a28:	40010400 	.word	0x40010400

08003a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0303 	bic.w	r3, r3, #3
 8003a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a21      	ldr	r2, [pc, #132]	@ (8003b0c <TIM_OC3_SetConfig+0xe0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_OC3_SetConfig+0x66>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a20      	ldr	r2, [pc, #128]	@ (8003b10 <TIM_OC3_SetConfig+0xe4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d10d      	bne.n	8003aae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a16      	ldr	r2, [pc, #88]	@ (8003b0c <TIM_OC3_SetConfig+0xe0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <TIM_OC3_SetConfig+0x92>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a15      	ldr	r2, [pc, #84]	@ (8003b10 <TIM_OC3_SetConfig+0xe4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d113      	bne.n	8003ae6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	621a      	str	r2, [r3, #32]
}
 8003b00:	bf00      	nop
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40010400 	.word	0x40010400

08003b14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	031b      	lsls	r3, r3, #12
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a12      	ldr	r2, [pc, #72]	@ (8003bb8 <TIM_OC4_SetConfig+0xa4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <TIM_OC4_SetConfig+0x68>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a11      	ldr	r2, [pc, #68]	@ (8003bbc <TIM_OC4_SetConfig+0xa8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d109      	bne.n	8003b90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	019b      	lsls	r3, r3, #6
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	621a      	str	r2, [r3, #32]
}
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40010000 	.word	0x40010000
 8003bbc:	40010400 	.word	0x40010400

08003bc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e05a      	b.n	8003c8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a21      	ldr	r2, [pc, #132]	@ (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d022      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c24:	d01d      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d018      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00e      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a18      	ldr	r2, [pc, #96]	@ (8003cac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a17      	ldr	r2, [pc, #92]	@ (8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a15      	ldr	r2, [pc, #84]	@ (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d10c      	bne.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	40000400 	.word	0x40000400
 8003ca4:	40000800 	.word	0x40000800
 8003ca8:	40000c00 	.word	0x40000c00
 8003cac:	40010400 	.word	0x40010400
 8003cb0:	40014000 	.word	0x40014000
 8003cb4:	40001800 	.word	0x40001800

08003cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e042      	b.n	8003d78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fd f864 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2224      	movs	r2, #36	@ 0x24
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f82b 	bl	8003d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d84:	b0c0      	sub	sp, #256	@ 0x100
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9c:	68d9      	ldr	r1, [r3, #12]
 8003d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	ea40 0301 	orr.w	r3, r0, r1
 8003da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003dd8:	f021 010c 	bic.w	r1, r1, #12
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003de6:	430b      	orrs	r3, r1
 8003de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfa:	6999      	ldr	r1, [r3, #24]
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	ea40 0301 	orr.w	r3, r0, r1
 8003e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b8f      	ldr	r3, [pc, #572]	@ (800404c <UART_SetConfig+0x2cc>)
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d005      	beq.n	8003e20 <UART_SetConfig+0xa0>
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8004050 <UART_SetConfig+0x2d0>)
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d104      	bne.n	8003e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e20:	f7fe fc70 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 8003e24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003e28:	e003      	b.n	8003e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e2a:	f7fe fc57 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e3c:	f040 810c 	bne.w	8004058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e44:	2200      	movs	r2, #0
 8003e46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e52:	4622      	mov	r2, r4
 8003e54:	462b      	mov	r3, r5
 8003e56:	1891      	adds	r1, r2, r2
 8003e58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e5a:	415b      	adcs	r3, r3
 8003e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e62:	4621      	mov	r1, r4
 8003e64:	eb12 0801 	adds.w	r8, r2, r1
 8003e68:	4629      	mov	r1, r5
 8003e6a:	eb43 0901 	adc.w	r9, r3, r1
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e82:	4690      	mov	r8, r2
 8003e84:	4699      	mov	r9, r3
 8003e86:	4623      	mov	r3, r4
 8003e88:	eb18 0303 	adds.w	r3, r8, r3
 8003e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e90:	462b      	mov	r3, r5
 8003e92:	eb49 0303 	adc.w	r3, r9, r3
 8003e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003eae:	460b      	mov	r3, r1
 8003eb0:	18db      	adds	r3, r3, r3
 8003eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	eb42 0303 	adc.w	r3, r2, r3
 8003eba:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ec4:	f7fc f9a4 	bl	8000210 <__aeabi_uldivmod>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4b61      	ldr	r3, [pc, #388]	@ (8004054 <UART_SetConfig+0x2d4>)
 8003ece:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	011c      	lsls	r4, r3, #4
 8003ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ee8:	4642      	mov	r2, r8
 8003eea:	464b      	mov	r3, r9
 8003eec:	1891      	adds	r1, r2, r2
 8003eee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ef0:	415b      	adcs	r3, r3
 8003ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ef8:	4641      	mov	r1, r8
 8003efa:	eb12 0a01 	adds.w	sl, r2, r1
 8003efe:	4649      	mov	r1, r9
 8003f00:	eb43 0b01 	adc.w	fp, r3, r1
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f18:	4692      	mov	sl, r2
 8003f1a:	469b      	mov	fp, r3
 8003f1c:	4643      	mov	r3, r8
 8003f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f26:	464b      	mov	r3, r9
 8003f28:	eb4b 0303 	adc.w	r3, fp, r3
 8003f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f44:	460b      	mov	r3, r1
 8003f46:	18db      	adds	r3, r3, r3
 8003f48:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	eb42 0303 	adc.w	r3, r2, r3
 8003f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f5a:	f7fc f959 	bl	8000210 <__aeabi_uldivmod>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4611      	mov	r1, r2
 8003f64:	4b3b      	ldr	r3, [pc, #236]	@ (8004054 <UART_SetConfig+0x2d4>)
 8003f66:	fba3 2301 	umull	r2, r3, r3, r1
 8003f6a:	095b      	lsrs	r3, r3, #5
 8003f6c:	2264      	movs	r2, #100	@ 0x64
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	1acb      	subs	r3, r1, r3
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f7a:	4b36      	ldr	r3, [pc, #216]	@ (8004054 <UART_SetConfig+0x2d4>)
 8003f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f88:	441c      	add	r4, r3
 8003f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	1891      	adds	r1, r2, r2
 8003fa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003fa4:	415b      	adcs	r3, r3
 8003fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003fac:	4641      	mov	r1, r8
 8003fae:	1851      	adds	r1, r2, r1
 8003fb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	414b      	adcs	r3, r1
 8003fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	00cb      	lsls	r3, r1, #3
 8003fc8:	4651      	mov	r1, sl
 8003fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fce:	4651      	mov	r1, sl
 8003fd0:	00ca      	lsls	r2, r1, #3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4642      	mov	r2, r8
 8003fda:	189b      	adds	r3, r3, r2
 8003fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	460a      	mov	r2, r1
 8003fe4:	eb42 0303 	adc.w	r3, r2, r3
 8003fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004000:	460b      	mov	r3, r1
 8004002:	18db      	adds	r3, r3, r3
 8004004:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004006:	4613      	mov	r3, r2
 8004008:	eb42 0303 	adc.w	r3, r2, r3
 800400c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800400e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004016:	f7fc f8fb 	bl	8000210 <__aeabi_uldivmod>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4b0d      	ldr	r3, [pc, #52]	@ (8004054 <UART_SetConfig+0x2d4>)
 8004020:	fba3 1302 	umull	r1, r3, r3, r2
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	2164      	movs	r1, #100	@ 0x64
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	3332      	adds	r3, #50	@ 0x32
 8004032:	4a08      	ldr	r2, [pc, #32]	@ (8004054 <UART_SetConfig+0x2d4>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	f003 0207 	and.w	r2, r3, #7
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4422      	add	r2, r4
 8004046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004048:	e106      	b.n	8004258 <UART_SetConfig+0x4d8>
 800404a:	bf00      	nop
 800404c:	40011000 	.word	0x40011000
 8004050:	40011400 	.word	0x40011400
 8004054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800405c:	2200      	movs	r2, #0
 800405e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004062:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800406a:	4642      	mov	r2, r8
 800406c:	464b      	mov	r3, r9
 800406e:	1891      	adds	r1, r2, r2
 8004070:	6239      	str	r1, [r7, #32]
 8004072:	415b      	adcs	r3, r3
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
 8004076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800407a:	4641      	mov	r1, r8
 800407c:	1854      	adds	r4, r2, r1
 800407e:	4649      	mov	r1, r9
 8004080:	eb43 0501 	adc.w	r5, r3, r1
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	00eb      	lsls	r3, r5, #3
 800408e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004092:	00e2      	lsls	r2, r4, #3
 8004094:	4614      	mov	r4, r2
 8004096:	461d      	mov	r5, r3
 8004098:	4643      	mov	r3, r8
 800409a:	18e3      	adds	r3, r4, r3
 800409c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040a0:	464b      	mov	r3, r9
 80040a2:	eb45 0303 	adc.w	r3, r5, r3
 80040a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040c6:	4629      	mov	r1, r5
 80040c8:	008b      	lsls	r3, r1, #2
 80040ca:	4621      	mov	r1, r4
 80040cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040d0:	4621      	mov	r1, r4
 80040d2:	008a      	lsls	r2, r1, #2
 80040d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040d8:	f7fc f89a 	bl	8000210 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4b60      	ldr	r3, [pc, #384]	@ (8004264 <UART_SetConfig+0x4e4>)
 80040e2:	fba3 2302 	umull	r2, r3, r3, r2
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	011c      	lsls	r4, r3, #4
 80040ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040fc:	4642      	mov	r2, r8
 80040fe:	464b      	mov	r3, r9
 8004100:	1891      	adds	r1, r2, r2
 8004102:	61b9      	str	r1, [r7, #24]
 8004104:	415b      	adcs	r3, r3
 8004106:	61fb      	str	r3, [r7, #28]
 8004108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800410c:	4641      	mov	r1, r8
 800410e:	1851      	adds	r1, r2, r1
 8004110:	6139      	str	r1, [r7, #16]
 8004112:	4649      	mov	r1, r9
 8004114:	414b      	adcs	r3, r1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004124:	4659      	mov	r1, fp
 8004126:	00cb      	lsls	r3, r1, #3
 8004128:	4651      	mov	r1, sl
 800412a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800412e:	4651      	mov	r1, sl
 8004130:	00ca      	lsls	r2, r1, #3
 8004132:	4610      	mov	r0, r2
 8004134:	4619      	mov	r1, r3
 8004136:	4603      	mov	r3, r0
 8004138:	4642      	mov	r2, r8
 800413a:	189b      	adds	r3, r3, r2
 800413c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004140:	464b      	mov	r3, r9
 8004142:	460a      	mov	r2, r1
 8004144:	eb42 0303 	adc.w	r3, r2, r3
 8004148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004156:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004164:	4649      	mov	r1, r9
 8004166:	008b      	lsls	r3, r1, #2
 8004168:	4641      	mov	r1, r8
 800416a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800416e:	4641      	mov	r1, r8
 8004170:	008a      	lsls	r2, r1, #2
 8004172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004176:	f7fc f84b 	bl	8000210 <__aeabi_uldivmod>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4611      	mov	r1, r2
 8004180:	4b38      	ldr	r3, [pc, #224]	@ (8004264 <UART_SetConfig+0x4e4>)
 8004182:	fba3 2301 	umull	r2, r3, r3, r1
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2264      	movs	r2, #100	@ 0x64
 800418a:	fb02 f303 	mul.w	r3, r2, r3
 800418e:	1acb      	subs	r3, r1, r3
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	3332      	adds	r3, #50	@ 0x32
 8004194:	4a33      	ldr	r2, [pc, #204]	@ (8004264 <UART_SetConfig+0x4e4>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041a0:	441c      	add	r4, r3
 80041a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041a6:	2200      	movs	r2, #0
 80041a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80041aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80041ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	415b      	adcs	r3, r3
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041c0:	4641      	mov	r1, r8
 80041c2:	1851      	adds	r1, r2, r1
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	4649      	mov	r1, r9
 80041c8:	414b      	adcs	r3, r1
 80041ca:	607b      	str	r3, [r7, #4]
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041d8:	4659      	mov	r1, fp
 80041da:	00cb      	lsls	r3, r1, #3
 80041dc:	4651      	mov	r1, sl
 80041de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e2:	4651      	mov	r1, sl
 80041e4:	00ca      	lsls	r2, r1, #3
 80041e6:	4610      	mov	r0, r2
 80041e8:	4619      	mov	r1, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	4642      	mov	r2, r8
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041f2:	464b      	mov	r3, r9
 80041f4:	460a      	mov	r2, r1
 80041f6:	eb42 0303 	adc.w	r3, r2, r3
 80041fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	663b      	str	r3, [r7, #96]	@ 0x60
 8004206:	667a      	str	r2, [r7, #100]	@ 0x64
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004214:	4649      	mov	r1, r9
 8004216:	008b      	lsls	r3, r1, #2
 8004218:	4641      	mov	r1, r8
 800421a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800421e:	4641      	mov	r1, r8
 8004220:	008a      	lsls	r2, r1, #2
 8004222:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004226:	f7fb fff3 	bl	8000210 <__aeabi_uldivmod>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4b0d      	ldr	r3, [pc, #52]	@ (8004264 <UART_SetConfig+0x4e4>)
 8004230:	fba3 1302 	umull	r1, r3, r3, r2
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	2164      	movs	r1, #100	@ 0x64
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	3332      	adds	r3, #50	@ 0x32
 8004242:	4a08      	ldr	r2, [pc, #32]	@ (8004264 <UART_SetConfig+0x4e4>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	f003 020f 	and.w	r2, r3, #15
 800424e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4422      	add	r2, r4
 8004256:	609a      	str	r2, [r3, #8]
}
 8004258:	bf00      	nop
 800425a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800425e:	46bd      	mov	sp, r7
 8004260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004264:	51eb851f 	.word	0x51eb851f

08004268 <__NVIC_SetPriority>:
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	6039      	str	r1, [r7, #0]
 8004272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004278:	2b00      	cmp	r3, #0
 800427a:	db0a      	blt.n	8004292 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	b2da      	uxtb	r2, r3
 8004280:	490c      	ldr	r1, [pc, #48]	@ (80042b4 <__NVIC_SetPriority+0x4c>)
 8004282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004286:	0112      	lsls	r2, r2, #4
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	440b      	add	r3, r1
 800428c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004290:	e00a      	b.n	80042a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	b2da      	uxtb	r2, r3
 8004296:	4908      	ldr	r1, [pc, #32]	@ (80042b8 <__NVIC_SetPriority+0x50>)
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	3b04      	subs	r3, #4
 80042a0:	0112      	lsls	r2, r2, #4
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	440b      	add	r3, r1
 80042a6:	761a      	strb	r2, [r3, #24]
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	e000e100 	.word	0xe000e100
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80042c0:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <SysTick_Handler+0x1c>)
 80042c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80042c4:	f001 fd18 	bl	8005cf8 <xTaskGetSchedulerState>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d001      	beq.n	80042d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80042ce:	f002 fb13 	bl	80068f8 <xPortSysTickHandler>
  }
}
 80042d2:	bf00      	nop
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	e000e010 	.word	0xe000e010

080042dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80042e0:	2100      	movs	r1, #0
 80042e2:	f06f 0004 	mvn.w	r0, #4
 80042e6:	f7ff ffbf 	bl	8004268 <__NVIC_SetPriority>
#endif
}
 80042ea:	bf00      	nop
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042f6:	f3ef 8305 	mrs	r3, IPSR
 80042fa:	603b      	str	r3, [r7, #0]
  return(result);
 80042fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004302:	f06f 0305 	mvn.w	r3, #5
 8004306:	607b      	str	r3, [r7, #4]
 8004308:	e00c      	b.n	8004324 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800430a:	4b0a      	ldr	r3, [pc, #40]	@ (8004334 <osKernelInitialize+0x44>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d105      	bne.n	800431e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004312:	4b08      	ldr	r3, [pc, #32]	@ (8004334 <osKernelInitialize+0x44>)
 8004314:	2201      	movs	r2, #1
 8004316:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004318:	2300      	movs	r3, #0
 800431a:	607b      	str	r3, [r7, #4]
 800431c:	e002      	b.n	8004324 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800431e:	f04f 33ff 	mov.w	r3, #4294967295
 8004322:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004324:	687b      	ldr	r3, [r7, #4]
}
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20000478 	.word	0x20000478

08004338 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800433e:	f3ef 8305 	mrs	r3, IPSR
 8004342:	603b      	str	r3, [r7, #0]
  return(result);
 8004344:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <osKernelStart+0x1a>
    stat = osErrorISR;
 800434a:	f06f 0305 	mvn.w	r3, #5
 800434e:	607b      	str	r3, [r7, #4]
 8004350:	e010      	b.n	8004374 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004352:	4b0b      	ldr	r3, [pc, #44]	@ (8004380 <osKernelStart+0x48>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d109      	bne.n	800436e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800435a:	f7ff ffbf 	bl	80042dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800435e:	4b08      	ldr	r3, [pc, #32]	@ (8004380 <osKernelStart+0x48>)
 8004360:	2202      	movs	r2, #2
 8004362:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004364:	f001 f87a 	bl	800545c <vTaskStartScheduler>
      stat = osOK;
 8004368:	2300      	movs	r3, #0
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	e002      	b.n	8004374 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800436e:	f04f 33ff 	mov.w	r3, #4294967295
 8004372:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004374:	687b      	ldr	r3, [r7, #4]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000478 	.word	0x20000478

08004384 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b08e      	sub	sp, #56	@ 0x38
 8004388:	af04      	add	r7, sp, #16
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004390:	2300      	movs	r3, #0
 8004392:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004394:	f3ef 8305 	mrs	r3, IPSR
 8004398:	617b      	str	r3, [r7, #20]
  return(result);
 800439a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800439c:	2b00      	cmp	r3, #0
 800439e:	d17e      	bne.n	800449e <osThreadNew+0x11a>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d07b      	beq.n	800449e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80043a6:	2380      	movs	r3, #128	@ 0x80
 80043a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80043aa:	2318      	movs	r3, #24
 80043ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80043b2:	f04f 33ff 	mov.w	r3, #4294967295
 80043b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d045      	beq.n	800444a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <osThreadNew+0x48>
        name = attr->name;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <osThreadNew+0x6e>
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b38      	cmp	r3, #56	@ 0x38
 80043e4:	d805      	bhi.n	80043f2 <osThreadNew+0x6e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <osThreadNew+0x72>
        return (NULL);
 80043f2:	2300      	movs	r3, #0
 80043f4:	e054      	b.n	80044a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	089b      	lsrs	r3, r3, #2
 8004404:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00e      	beq.n	800442c <osThreadNew+0xa8>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b5b      	cmp	r3, #91	@ 0x5b
 8004414:	d90a      	bls.n	800442c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800441a:	2b00      	cmp	r3, #0
 800441c:	d006      	beq.n	800442c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <osThreadNew+0xa8>
        mem = 1;
 8004426:	2301      	movs	r3, #1
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	e010      	b.n	800444e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10c      	bne.n	800444e <osThreadNew+0xca>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d108      	bne.n	800444e <osThreadNew+0xca>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d104      	bne.n	800444e <osThreadNew+0xca>
          mem = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	e001      	b.n	800444e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d110      	bne.n	8004476 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800445c:	9202      	str	r2, [sp, #8]
 800445e:	9301      	str	r3, [sp, #4]
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6a3a      	ldr	r2, [r7, #32]
 8004468:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fe1a 	bl	80050a4 <xTaskCreateStatic>
 8004470:	4603      	mov	r3, r0
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	e013      	b.n	800449e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d110      	bne.n	800449e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	b29a      	uxth	r2, r3
 8004480:	f107 0310 	add.w	r3, r7, #16
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 fe68 	bl	8005164 <xTaskCreate>
 8004494:	4603      	mov	r3, r0
 8004496:	2b01      	cmp	r3, #1
 8004498:	d001      	beq.n	800449e <osThreadNew+0x11a>
            hTask = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800449e:	693b      	ldr	r3, [r7, #16]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3728      	adds	r7, #40	@ 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044b0:	f3ef 8305 	mrs	r3, IPSR
 80044b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80044b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <osDelay+0x1c>
    stat = osErrorISR;
 80044bc:	f06f 0305 	mvn.w	r3, #5
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	e007      	b.n	80044d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 ff8e 	bl	80053f0 <vTaskDelay>
    }
  }

  return (stat);
 80044d4:	68fb      	ldr	r3, [r7, #12]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4a07      	ldr	r2, [pc, #28]	@ (800450c <vApplicationGetIdleTaskMemory+0x2c>)
 80044f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	4a06      	ldr	r2, [pc, #24]	@ (8004510 <vApplicationGetIdleTaskMemory+0x30>)
 80044f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2280      	movs	r2, #128	@ 0x80
 80044fc:	601a      	str	r2, [r3, #0]
}
 80044fe:	bf00      	nop
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	2000047c 	.word	0x2000047c
 8004510:	200004d8 	.word	0x200004d8

08004514 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a07      	ldr	r2, [pc, #28]	@ (8004540 <vApplicationGetTimerTaskMemory+0x2c>)
 8004524:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4a06      	ldr	r2, [pc, #24]	@ (8004544 <vApplicationGetTimerTaskMemory+0x30>)
 800452a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004532:	601a      	str	r2, [r3, #0]
}
 8004534:	bf00      	nop
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	200006d8 	.word	0x200006d8
 8004544:	20000734 	.word	0x20000734

08004548 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f103 0208 	add.w	r2, r3, #8
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f04f 32ff 	mov.w	r2, #4294967295
 8004560:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f103 0208 	add.w	r2, r3, #8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f103 0208 	add.w	r2, r3, #8
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045a2:	b480      	push	{r7}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	601a      	str	r2, [r3, #0]
}
 80045de:	bf00      	nop
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004600:	d103      	bne.n	800460a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e00c      	b.n	8004624 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3308      	adds	r3, #8
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e002      	b.n	8004618 <vListInsert+0x2e>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	429a      	cmp	r2, r3
 8004622:	d2f6      	bcs.n	8004612 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	601a      	str	r2, [r3, #0]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6892      	ldr	r2, [r2, #8]
 8004672:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6852      	ldr	r2, [r2, #4]
 800467c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d103      	bne.n	8004690 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	1e5a      	subs	r2, r3, #1
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10b      	bne.n	80046dc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046d6:	bf00      	nop
 80046d8:	bf00      	nop
 80046da:	e7fd      	b.n	80046d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046dc:	f002 f87c 	bl	80067d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e8:	68f9      	ldr	r1, [r7, #12]
 80046ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	441a      	add	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470c:	3b01      	subs	r3, #1
 800470e:	68f9      	ldr	r1, [r7, #12]
 8004710:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004712:	fb01 f303 	mul.w	r3, r1, r3
 8004716:	441a      	add	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	22ff      	movs	r2, #255	@ 0xff
 8004720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	22ff      	movs	r2, #255	@ 0xff
 8004728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d114      	bne.n	800475c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d01a      	beq.n	8004770 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3310      	adds	r3, #16
 800473e:	4618      	mov	r0, r3
 8004740:	f001 f91a 	bl	8005978 <xTaskRemoveFromEventList>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d012      	beq.n	8004770 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800474a:	4b0d      	ldr	r3, [pc, #52]	@ (8004780 <xQueueGenericReset+0xd0>)
 800474c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	e009      	b.n	8004770 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3310      	adds	r3, #16
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fef1 	bl	8004548 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3324      	adds	r3, #36	@ 0x24
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff feec 	bl	8004548 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004770:	f002 f864 	bl	800683c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004774:	2301      	movs	r3, #1
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	e000ed04 	.word	0xe000ed04

08004784 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08e      	sub	sp, #56	@ 0x38
 8004788:	af02      	add	r7, sp, #8
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10b      	bne.n	80047b0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047aa:	bf00      	nop
 80047ac:	bf00      	nop
 80047ae:	e7fd      	b.n	80047ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	e7fd      	b.n	80047ca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <xQueueGenericCreateStatic+0x56>
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <xQueueGenericCreateStatic+0x5a>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <xQueueGenericCreateStatic+0x5c>
 80047de:	2300      	movs	r3, #0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10b      	bne.n	80047fc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	623b      	str	r3, [r7, #32]
}
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
 80047fa:	e7fd      	b.n	80047f8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <xQueueGenericCreateStatic+0x84>
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <xQueueGenericCreateStatic+0x88>
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <xQueueGenericCreateStatic+0x8a>
 800480c:	2300      	movs	r3, #0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10b      	bne.n	800482a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	61fb      	str	r3, [r7, #28]
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	e7fd      	b.n	8004826 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800482a:	2350      	movs	r3, #80	@ 0x50
 800482c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b50      	cmp	r3, #80	@ 0x50
 8004832:	d00b      	beq.n	800484c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	61bb      	str	r3, [r7, #24]
}
 8004846:	bf00      	nop
 8004848:	bf00      	nop
 800484a:	e7fd      	b.n	8004848 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800484c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00d      	beq.n	8004874 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004860:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	4613      	mov	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f805 	bl	800487e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004876:	4618      	mov	r0, r3
 8004878:	3730      	adds	r7, #48	@ 0x30
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	607a      	str	r2, [r7, #4]
 800488a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d103      	bne.n	800489a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	e002      	b.n	80048a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048ac:	2101      	movs	r1, #1
 80048ae:	69b8      	ldr	r0, [r7, #24]
 80048b0:	f7ff fefe 	bl	80046b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	78fa      	ldrb	r2, [r7, #3]
 80048b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08e      	sub	sp, #56	@ 0x38
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048d2:	2300      	movs	r3, #0
 80048d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80048da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10b      	bne.n	80048f8 <xQueueGenericSend+0x34>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048f2:	bf00      	nop
 80048f4:	bf00      	nop
 80048f6:	e7fd      	b.n	80048f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d103      	bne.n	8004906 <xQueueGenericSend+0x42>
 80048fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <xQueueGenericSend+0x46>
 8004906:	2301      	movs	r3, #1
 8004908:	e000      	b.n	800490c <xQueueGenericSend+0x48>
 800490a:	2300      	movs	r3, #0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <xQueueGenericSend+0x64>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004922:	bf00      	nop
 8004924:	bf00      	nop
 8004926:	e7fd      	b.n	8004924 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d103      	bne.n	8004936 <xQueueGenericSend+0x72>
 800492e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <xQueueGenericSend+0x76>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <xQueueGenericSend+0x78>
 800493a:	2300      	movs	r3, #0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10b      	bne.n	8004958 <xQueueGenericSend+0x94>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	623b      	str	r3, [r7, #32]
}
 8004952:	bf00      	nop
 8004954:	bf00      	nop
 8004956:	e7fd      	b.n	8004954 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004958:	f001 f9ce 	bl	8005cf8 <xTaskGetSchedulerState>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d102      	bne.n	8004968 <xQueueGenericSend+0xa4>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <xQueueGenericSend+0xa8>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <xQueueGenericSend+0xaa>
 800496c:	2300      	movs	r3, #0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10b      	bne.n	800498a <xQueueGenericSend+0xc6>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	61fb      	str	r3, [r7, #28]
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	e7fd      	b.n	8004986 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800498a:	f001 ff25 	bl	80067d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004996:	429a      	cmp	r2, r3
 8004998:	d302      	bcc.n	80049a0 <xQueueGenericSend+0xdc>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b02      	cmp	r3, #2
 800499e:	d129      	bne.n	80049f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	68b9      	ldr	r1, [r7, #8]
 80049a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049a6:	f000 fa0f 	bl	8004dc8 <prvCopyDataToQueue>
 80049aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d010      	beq.n	80049d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b6:	3324      	adds	r3, #36	@ 0x24
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 ffdd 	bl	8005978 <xTaskRemoveFromEventList>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049c4:	4b3f      	ldr	r3, [pc, #252]	@ (8004ac4 <xQueueGenericSend+0x200>)
 80049c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	e00a      	b.n	80049ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049dc:	4b39      	ldr	r3, [pc, #228]	@ (8004ac4 <xQueueGenericSend+0x200>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049ec:	f001 ff26 	bl	800683c <vPortExitCritical>
				return pdPASS;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e063      	b.n	8004abc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d103      	bne.n	8004a02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049fa:	f001 ff1f 	bl	800683c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e05c      	b.n	8004abc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d106      	bne.n	8004a16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a08:	f107 0314 	add.w	r3, r7, #20
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f001 f817 	bl	8005a40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a12:	2301      	movs	r3, #1
 8004a14:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a16:	f001 ff11 	bl	800683c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a1a:	f000 fd87 	bl	800552c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a1e:	f001 fedb 	bl	80067d8 <vPortEnterCritical>
 8004a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a28:	b25b      	sxtb	r3, r3
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2e:	d103      	bne.n	8004a38 <xQueueGenericSend+0x174>
 8004a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a3e:	b25b      	sxtb	r3, r3
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d103      	bne.n	8004a4e <xQueueGenericSend+0x18a>
 8004a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a4e:	f001 fef5 	bl	800683c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a52:	1d3a      	adds	r2, r7, #4
 8004a54:	f107 0314 	add.w	r3, r7, #20
 8004a58:	4611      	mov	r1, r2
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 f806 	bl	8005a6c <xTaskCheckForTimeOut>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d124      	bne.n	8004ab0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a68:	f000 faa6 	bl	8004fb8 <prvIsQueueFull>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d018      	beq.n	8004aa4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a74:	3310      	adds	r3, #16
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 ff2a 	bl	80058d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a82:	f000 fa31 	bl	8004ee8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a86:	f000 fd5f 	bl	8005548 <xTaskResumeAll>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f47f af7c 	bne.w	800498a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004a92:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac4 <xQueueGenericSend+0x200>)
 8004a94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	e772      	b.n	800498a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004aa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aa6:	f000 fa1f 	bl	8004ee8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aaa:	f000 fd4d 	bl	8005548 <xTaskResumeAll>
 8004aae:	e76c      	b.n	800498a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ab0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ab2:	f000 fa19 	bl	8004ee8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ab6:	f000 fd47 	bl	8005548 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004aba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3738      	adds	r7, #56	@ 0x38
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	e000ed04 	.word	0xe000ed04

08004ac8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b090      	sub	sp, #64	@ 0x40
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10b      	bne.n	8004af8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004af2:	bf00      	nop
 8004af4:	bf00      	nop
 8004af6:	e7fd      	b.n	8004af4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d103      	bne.n	8004b06 <xQueueGenericSendFromISR+0x3e>
 8004afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <xQueueGenericSendFromISR+0x42>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <xQueueGenericSendFromISR+0x44>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10b      	bne.n	8004b28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	e7fd      	b.n	8004b24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d103      	bne.n	8004b36 <xQueueGenericSendFromISR+0x6e>
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <xQueueGenericSendFromISR+0x72>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <xQueueGenericSendFromISR+0x74>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10b      	bne.n	8004b58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	623b      	str	r3, [r7, #32]
}
 8004b52:	bf00      	nop
 8004b54:	bf00      	nop
 8004b56:	e7fd      	b.n	8004b54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b58:	f001 ff1e 	bl	8006998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b5c:	f3ef 8211 	mrs	r2, BASEPRI
 8004b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	61fa      	str	r2, [r7, #28]
 8004b72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d302      	bcc.n	8004b8a <xQueueGenericSendFromISR+0xc2>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d12f      	bne.n	8004bea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004ba0:	f000 f912 	bl	8004dc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ba4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bac:	d112      	bne.n	8004bd4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d016      	beq.n	8004be4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb8:	3324      	adds	r3, #36	@ 0x24
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fedc 	bl	8005978 <xTaskRemoveFromEventList>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00e      	beq.n	8004be4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00b      	beq.n	8004be4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	e007      	b.n	8004be4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004bd8:	3301      	adds	r3, #1
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	b25a      	sxtb	r2, r3
 8004bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004be4:	2301      	movs	r3, #1
 8004be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004be8:	e001      	b.n	8004bee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bf8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3740      	adds	r7, #64	@ 0x40
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08c      	sub	sp, #48	@ 0x30
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10b      	bne.n	8004c36 <xQueueReceive+0x32>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	623b      	str	r3, [r7, #32]
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	e7fd      	b.n	8004c32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d103      	bne.n	8004c44 <xQueueReceive+0x40>
 8004c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <xQueueReceive+0x44>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <xQueueReceive+0x46>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10b      	bne.n	8004c66 <xQueueReceive+0x62>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	61fb      	str	r3, [r7, #28]
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	e7fd      	b.n	8004c62 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c66:	f001 f847 	bl	8005cf8 <xTaskGetSchedulerState>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d102      	bne.n	8004c76 <xQueueReceive+0x72>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <xQueueReceive+0x76>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <xQueueReceive+0x78>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10b      	bne.n	8004c98 <xQueueReceive+0x94>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	61bb      	str	r3, [r7, #24]
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	e7fd      	b.n	8004c94 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c98:	f001 fd9e 	bl	80067d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01f      	beq.n	8004ce8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cac:	f000 f8f6 	bl	8004e9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	1e5a      	subs	r2, r3, #1
 8004cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00f      	beq.n	8004ce0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc2:	3310      	adds	r3, #16
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fe57 	bl	8005978 <xTaskRemoveFromEventList>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004cd0:	4b3c      	ldr	r3, [pc, #240]	@ (8004dc4 <xQueueReceive+0x1c0>)
 8004cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ce0:	f001 fdac 	bl	800683c <vPortExitCritical>
				return pdPASS;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e069      	b.n	8004dbc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d103      	bne.n	8004cf6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cee:	f001 fda5 	bl	800683c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	e062      	b.n	8004dbc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cfc:	f107 0310 	add.w	r3, r7, #16
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fe9d 	bl	8005a40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d06:	2301      	movs	r3, #1
 8004d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d0a:	f001 fd97 	bl	800683c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d0e:	f000 fc0d 	bl	800552c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d12:	f001 fd61 	bl	80067d8 <vPortEnterCritical>
 8004d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d1c:	b25b      	sxtb	r3, r3
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d22:	d103      	bne.n	8004d2c <xQueueReceive+0x128>
 8004d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d32:	b25b      	sxtb	r3, r3
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d103      	bne.n	8004d42 <xQueueReceive+0x13e>
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d42:	f001 fd7b 	bl	800683c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d46:	1d3a      	adds	r2, r7, #4
 8004d48:	f107 0310 	add.w	r3, r7, #16
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fe8c 	bl	8005a6c <xTaskCheckForTimeOut>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d123      	bne.n	8004da2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d5c:	f000 f916 	bl	8004f8c <prvIsQueueEmpty>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d017      	beq.n	8004d96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	3324      	adds	r3, #36	@ 0x24
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fdb0 	bl	80058d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d76:	f000 f8b7 	bl	8004ee8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d7a:	f000 fbe5 	bl	8005548 <xTaskResumeAll>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d189      	bne.n	8004c98 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004d84:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc4 <xQueueReceive+0x1c0>)
 8004d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	e780      	b.n	8004c98 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d98:	f000 f8a6 	bl	8004ee8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d9c:	f000 fbd4 	bl	8005548 <xTaskResumeAll>
 8004da0:	e77a      	b.n	8004c98 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004da2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004da4:	f000 f8a0 	bl	8004ee8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004da8:	f000 fbce 	bl	8005548 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dae:	f000 f8ed 	bl	8004f8c <prvIsQueueEmpty>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f43f af6f 	beq.w	8004c98 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004dba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3730      	adds	r7, #48	@ 0x30
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ddc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10d      	bne.n	8004e02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d14d      	bne.n	8004e8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 ff9e 	bl	8005d34 <xTaskPriorityDisinherit>
 8004df8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	609a      	str	r2, [r3, #8]
 8004e00:	e043      	b.n	8004e8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d119      	bne.n	8004e3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6858      	ldr	r0, [r3, #4]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e10:	461a      	mov	r2, r3
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	f002 f81c 	bl	8006e50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	441a      	add	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d32b      	bcc.n	8004e8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	e026      	b.n	8004e8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	68d8      	ldr	r0, [r3, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e44:	461a      	mov	r2, r3
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	f002 f802 	bl	8006e50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e54:	425b      	negs	r3, r3
 8004e56:	441a      	add	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d207      	bcs.n	8004e78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e70:	425b      	negs	r3, r3
 8004e72:	441a      	add	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d105      	bne.n	8004e8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004e92:	697b      	ldr	r3, [r7, #20]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d018      	beq.n	8004ee0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb6:	441a      	add	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d303      	bcc.n	8004ed0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68d9      	ldr	r1, [r3, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6838      	ldr	r0, [r7, #0]
 8004edc:	f001 ffb8 	bl	8006e50 <memcpy>
	}
}
 8004ee0:	bf00      	nop
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ef0:	f001 fc72 	bl	80067d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004efa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004efc:	e011      	b.n	8004f22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d012      	beq.n	8004f2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3324      	adds	r3, #36	@ 0x24
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fd34 	bl	8005978 <xTaskRemoveFromEventList>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f16:	f000 fe0d 	bl	8005b34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	dce9      	bgt.n	8004efe <prvUnlockQueue+0x16>
 8004f2a:	e000      	b.n	8004f2e <prvUnlockQueue+0x46>
					break;
 8004f2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	22ff      	movs	r2, #255	@ 0xff
 8004f32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f36:	f001 fc81 	bl	800683c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f3a:	f001 fc4d 	bl	80067d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f46:	e011      	b.n	8004f6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d012      	beq.n	8004f76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3310      	adds	r3, #16
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fd0f 	bl	8005978 <xTaskRemoveFromEventList>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f60:	f000 fde8 	bl	8005b34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f64:	7bbb      	ldrb	r3, [r7, #14]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	dce9      	bgt.n	8004f48 <prvUnlockQueue+0x60>
 8004f74:	e000      	b.n	8004f78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	22ff      	movs	r2, #255	@ 0xff
 8004f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f80:	f001 fc5c 	bl	800683c <vPortExitCritical>
}
 8004f84:	bf00      	nop
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f94:	f001 fc20 	bl	80067d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d102      	bne.n	8004fa6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e001      	b.n	8004faa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004faa:	f001 fc47 	bl	800683c <vPortExitCritical>

	return xReturn;
 8004fae:	68fb      	ldr	r3, [r7, #12]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fc0:	f001 fc0a 	bl	80067d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d102      	bne.n	8004fd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	e001      	b.n	8004fda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fda:	f001 fc2f 	bl	800683c <vPortExitCritical>

	return xReturn;
 8004fde:	68fb      	ldr	r3, [r7, #12]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	e014      	b.n	8005022 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8005038 <vQueueAddToRegistry+0x50>)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10b      	bne.n	800501c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005004:	490c      	ldr	r1, [pc, #48]	@ (8005038 <vQueueAddToRegistry+0x50>)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800500e:	4a0a      	ldr	r2, [pc, #40]	@ (8005038 <vQueueAddToRegistry+0x50>)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	4413      	add	r3, r2
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800501a:	e006      	b.n	800502a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	3301      	adds	r3, #1
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b07      	cmp	r3, #7
 8005026:	d9e7      	bls.n	8004ff8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005028:	bf00      	nop
 800502a:	bf00      	nop
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	20000b34 	.word	0x20000b34

0800503c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800504c:	f001 fbc4 	bl	80067d8 <vPortEnterCritical>
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005056:	b25b      	sxtb	r3, r3
 8005058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505c:	d103      	bne.n	8005066 <vQueueWaitForMessageRestricted+0x2a>
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800506c:	b25b      	sxtb	r3, r3
 800506e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005072:	d103      	bne.n	800507c <vQueueWaitForMessageRestricted+0x40>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800507c:	f001 fbde 	bl	800683c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	2b00      	cmp	r3, #0
 8005086:	d106      	bne.n	8005096 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	3324      	adds	r3, #36	@ 0x24
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fc45 	bl	8005920 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005096:	6978      	ldr	r0, [r7, #20]
 8005098:	f7ff ff26 	bl	8004ee8 <prvUnlockQueue>
	}
 800509c:	bf00      	nop
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08e      	sub	sp, #56	@ 0x38
 80050a8:	af04      	add	r7, sp, #16
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
 80050b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10b      	bne.n	80050d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	623b      	str	r3, [r7, #32]
}
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	e7fd      	b.n	80050cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10b      	bne.n	80050ee <xTaskCreateStatic+0x4a>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	61fb      	str	r3, [r7, #28]
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	e7fd      	b.n	80050ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050ee:	235c      	movs	r3, #92	@ 0x5c
 80050f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80050f6:	d00b      	beq.n	8005110 <xTaskCreateStatic+0x6c>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	61bb      	str	r3, [r7, #24]
}
 800510a:	bf00      	nop
 800510c:	bf00      	nop
 800510e:	e7fd      	b.n	800510c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005110:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01e      	beq.n	8005156 <xTaskCreateStatic+0xb2>
 8005118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01b      	beq.n	8005156 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800511e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005126:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	2202      	movs	r2, #2
 800512c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005130:	2300      	movs	r3, #0
 8005132:	9303      	str	r3, [sp, #12]
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	9302      	str	r3, [sp, #8]
 8005138:	f107 0314 	add.w	r3, r7, #20
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	68b9      	ldr	r1, [r7, #8]
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f850 	bl	80051ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800514e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005150:	f000 f8de 	bl	8005310 <prvAddNewTaskToReadyList>
 8005154:	e001      	b.n	800515a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800515a:	697b      	ldr	r3, [r7, #20]
	}
 800515c:	4618      	mov	r0, r3
 800515e:	3728      	adds	r7, #40	@ 0x28
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08c      	sub	sp, #48	@ 0x30
 8005168:	af04      	add	r7, sp, #16
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	603b      	str	r3, [r7, #0]
 8005170:	4613      	mov	r3, r2
 8005172:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005174:	88fb      	ldrh	r3, [r7, #6]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4618      	mov	r0, r3
 800517a:	f001 fc4f 	bl	8006a1c <pvPortMalloc>
 800517e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00e      	beq.n	80051a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005186:	205c      	movs	r0, #92	@ 0x5c
 8005188:	f001 fc48 	bl	8006a1c <pvPortMalloc>
 800518c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	631a      	str	r2, [r3, #48]	@ 0x30
 800519a:	e005      	b.n	80051a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800519c:	6978      	ldr	r0, [r7, #20]
 800519e:	f001 fd0b 	bl	8006bb8 <vPortFree>
 80051a2:	e001      	b.n	80051a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d017      	beq.n	80051de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051b6:	88fa      	ldrh	r2, [r7, #6]
 80051b8:	2300      	movs	r3, #0
 80051ba:	9303      	str	r3, [sp, #12]
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	9302      	str	r3, [sp, #8]
 80051c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051c2:	9301      	str	r3, [sp, #4]
 80051c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	68b9      	ldr	r1, [r7, #8]
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f80e 	bl	80051ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051d2:	69f8      	ldr	r0, [r7, #28]
 80051d4:	f000 f89c 	bl	8005310 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051d8:	2301      	movs	r3, #1
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	e002      	b.n	80051e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051de:	f04f 33ff 	mov.w	r3, #4294967295
 80051e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051e4:	69bb      	ldr	r3, [r7, #24]
	}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b088      	sub	sp, #32
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
 80051fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	461a      	mov	r2, r3
 8005206:	21a5      	movs	r1, #165	@ 0xa5
 8005208:	f001 fdf6 	bl	8006df8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800520c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005216:	3b01      	subs	r3, #1
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	f023 0307 	bic.w	r3, r3, #7
 8005224:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	617b      	str	r3, [r7, #20]
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	e7fd      	b.n	8005244 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d01f      	beq.n	800528e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800524e:	2300      	movs	r3, #0
 8005250:	61fb      	str	r3, [r7, #28]
 8005252:	e012      	b.n	800527a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	4413      	add	r3, r2
 800525a:	7819      	ldrb	r1, [r3, #0]
 800525c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	4413      	add	r3, r2
 8005262:	3334      	adds	r3, #52	@ 0x34
 8005264:	460a      	mov	r2, r1
 8005266:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d006      	beq.n	8005282 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	3301      	adds	r3, #1
 8005278:	61fb      	str	r3, [r7, #28]
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	2b0f      	cmp	r3, #15
 800527e:	d9e9      	bls.n	8005254 <prvInitialiseNewTask+0x66>
 8005280:	e000      	b.n	8005284 <prvInitialiseNewTask+0x96>
			{
				break;
 8005282:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800528c:	e003      	b.n	8005296 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800528e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005298:	2b37      	cmp	r3, #55	@ 0x37
 800529a:	d901      	bls.n	80052a0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800529c:	2337      	movs	r3, #55	@ 0x37
 800529e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052aa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ae:	2200      	movs	r2, #0
 80052b0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b4:	3304      	adds	r3, #4
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff f966 	bl	8004588 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052be:	3318      	adds	r3, #24
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff f961 	bl	8004588 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052da:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052de:	2200      	movs	r2, #0
 80052e0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	68f9      	ldr	r1, [r7, #12]
 80052ee:	69b8      	ldr	r0, [r7, #24]
 80052f0:	f001 f93e 	bl	8006570 <pxPortInitialiseStack>
 80052f4:	4602      	mov	r2, r0
 80052f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005306:	bf00      	nop
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005318:	f001 fa5e 	bl	80067d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800531c:	4b2d      	ldr	r3, [pc, #180]	@ (80053d4 <prvAddNewTaskToReadyList+0xc4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3301      	adds	r3, #1
 8005322:	4a2c      	ldr	r2, [pc, #176]	@ (80053d4 <prvAddNewTaskToReadyList+0xc4>)
 8005324:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005326:	4b2c      	ldr	r3, [pc, #176]	@ (80053d8 <prvAddNewTaskToReadyList+0xc8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800532e:	4a2a      	ldr	r2, [pc, #168]	@ (80053d8 <prvAddNewTaskToReadyList+0xc8>)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005334:	4b27      	ldr	r3, [pc, #156]	@ (80053d4 <prvAddNewTaskToReadyList+0xc4>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d110      	bne.n	800535e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800533c:	f000 fc1e 	bl	8005b7c <prvInitialiseTaskLists>
 8005340:	e00d      	b.n	800535e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005342:	4b26      	ldr	r3, [pc, #152]	@ (80053dc <prvAddNewTaskToReadyList+0xcc>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d109      	bne.n	800535e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800534a:	4b23      	ldr	r3, [pc, #140]	@ (80053d8 <prvAddNewTaskToReadyList+0xc8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005354:	429a      	cmp	r2, r3
 8005356:	d802      	bhi.n	800535e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005358:	4a1f      	ldr	r2, [pc, #124]	@ (80053d8 <prvAddNewTaskToReadyList+0xc8>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800535e:	4b20      	ldr	r3, [pc, #128]	@ (80053e0 <prvAddNewTaskToReadyList+0xd0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3301      	adds	r3, #1
 8005364:	4a1e      	ldr	r2, [pc, #120]	@ (80053e0 <prvAddNewTaskToReadyList+0xd0>)
 8005366:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005368:	4b1d      	ldr	r3, [pc, #116]	@ (80053e0 <prvAddNewTaskToReadyList+0xd0>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005374:	4b1b      	ldr	r3, [pc, #108]	@ (80053e4 <prvAddNewTaskToReadyList+0xd4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d903      	bls.n	8005384 <prvAddNewTaskToReadyList+0x74>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005380:	4a18      	ldr	r2, [pc, #96]	@ (80053e4 <prvAddNewTaskToReadyList+0xd4>)
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4a15      	ldr	r2, [pc, #84]	@ (80053e8 <prvAddNewTaskToReadyList+0xd8>)
 8005392:	441a      	add	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	4619      	mov	r1, r3
 800539a:	4610      	mov	r0, r2
 800539c:	f7ff f901 	bl	80045a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053a0:	f001 fa4c 	bl	800683c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053a4:	4b0d      	ldr	r3, [pc, #52]	@ (80053dc <prvAddNewTaskToReadyList+0xcc>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00e      	beq.n	80053ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053ac:	4b0a      	ldr	r3, [pc, #40]	@ (80053d8 <prvAddNewTaskToReadyList+0xc8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d207      	bcs.n	80053ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053ba:	4b0c      	ldr	r3, [pc, #48]	@ (80053ec <prvAddNewTaskToReadyList+0xdc>)
 80053bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053ca:	bf00      	nop
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20001048 	.word	0x20001048
 80053d8:	20000b74 	.word	0x20000b74
 80053dc:	20001054 	.word	0x20001054
 80053e0:	20001064 	.word	0x20001064
 80053e4:	20001050 	.word	0x20001050
 80053e8:	20000b78 	.word	0x20000b78
 80053ec:	e000ed04 	.word	0xe000ed04

080053f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d018      	beq.n	8005434 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005402:	4b14      	ldr	r3, [pc, #80]	@ (8005454 <vTaskDelay+0x64>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <vTaskDelay+0x32>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60bb      	str	r3, [r7, #8]
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	e7fd      	b.n	800541e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005422:	f000 f883 	bl	800552c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005426:	2100      	movs	r1, #0
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fcf3 	bl	8005e14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800542e:	f000 f88b 	bl	8005548 <xTaskResumeAll>
 8005432:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d107      	bne.n	800544a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800543a:	4b07      	ldr	r3, [pc, #28]	@ (8005458 <vTaskDelay+0x68>)
 800543c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800544a:	bf00      	nop
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20001070 	.word	0x20001070
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	@ 0x28
 8005460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005462:	2300      	movs	r3, #0
 8005464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005466:	2300      	movs	r3, #0
 8005468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800546a:	463a      	mov	r2, r7
 800546c:	1d39      	adds	r1, r7, #4
 800546e:	f107 0308 	add.w	r3, r7, #8
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff f834 	bl	80044e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	9202      	str	r2, [sp, #8]
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	2300      	movs	r3, #0
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	2300      	movs	r3, #0
 8005488:	460a      	mov	r2, r1
 800548a:	4922      	ldr	r1, [pc, #136]	@ (8005514 <vTaskStartScheduler+0xb8>)
 800548c:	4822      	ldr	r0, [pc, #136]	@ (8005518 <vTaskStartScheduler+0xbc>)
 800548e:	f7ff fe09 	bl	80050a4 <xTaskCreateStatic>
 8005492:	4603      	mov	r3, r0
 8005494:	4a21      	ldr	r2, [pc, #132]	@ (800551c <vTaskStartScheduler+0xc0>)
 8005496:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005498:	4b20      	ldr	r3, [pc, #128]	@ (800551c <vTaskStartScheduler+0xc0>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054a0:	2301      	movs	r3, #1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e001      	b.n	80054aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d102      	bne.n	80054b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054b0:	f000 fd04 	bl	8005ebc <xTimerCreateTimerTask>
 80054b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d116      	bne.n	80054ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	613b      	str	r3, [r7, #16]
}
 80054ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054d0:	4b13      	ldr	r3, [pc, #76]	@ (8005520 <vTaskStartScheduler+0xc4>)
 80054d2:	f04f 32ff 	mov.w	r2, #4294967295
 80054d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054d8:	4b12      	ldr	r3, [pc, #72]	@ (8005524 <vTaskStartScheduler+0xc8>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054de:	4b12      	ldr	r3, [pc, #72]	@ (8005528 <vTaskStartScheduler+0xcc>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054e4:	f001 f8d4 	bl	8006690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054e8:	e00f      	b.n	800550a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f0:	d10b      	bne.n	800550a <vTaskStartScheduler+0xae>
	__asm volatile
 80054f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	60fb      	str	r3, [r7, #12]
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	e7fd      	b.n	8005506 <vTaskStartScheduler+0xaa>
}
 800550a:	bf00      	nop
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	08006e90 	.word	0x08006e90
 8005518:	08005b4d 	.word	0x08005b4d
 800551c:	2000106c 	.word	0x2000106c
 8005520:	20001068 	.word	0x20001068
 8005524:	20001054 	.word	0x20001054
 8005528:	2000104c 	.word	0x2000104c

0800552c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005530:	4b04      	ldr	r3, [pc, #16]	@ (8005544 <vTaskSuspendAll+0x18>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	4a03      	ldr	r2, [pc, #12]	@ (8005544 <vTaskSuspendAll+0x18>)
 8005538:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800553a:	bf00      	nop
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	20001070 	.word	0x20001070

08005548 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005552:	2300      	movs	r3, #0
 8005554:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005556:	4b42      	ldr	r3, [pc, #264]	@ (8005660 <xTaskResumeAll+0x118>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10b      	bne.n	8005576 <xTaskResumeAll+0x2e>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	603b      	str	r3, [r7, #0]
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	e7fd      	b.n	8005572 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005576:	f001 f92f 	bl	80067d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800557a:	4b39      	ldr	r3, [pc, #228]	@ (8005660 <xTaskResumeAll+0x118>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3b01      	subs	r3, #1
 8005580:	4a37      	ldr	r2, [pc, #220]	@ (8005660 <xTaskResumeAll+0x118>)
 8005582:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005584:	4b36      	ldr	r3, [pc, #216]	@ (8005660 <xTaskResumeAll+0x118>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d162      	bne.n	8005652 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800558c:	4b35      	ldr	r3, [pc, #212]	@ (8005664 <xTaskResumeAll+0x11c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d05e      	beq.n	8005652 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005594:	e02f      	b.n	80055f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005596:	4b34      	ldr	r3, [pc, #208]	@ (8005668 <xTaskResumeAll+0x120>)
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3318      	adds	r3, #24
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff f85a 	bl	800465c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3304      	adds	r3, #4
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff f855 	bl	800465c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b6:	4b2d      	ldr	r3, [pc, #180]	@ (800566c <xTaskResumeAll+0x124>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d903      	bls.n	80055c6 <xTaskResumeAll+0x7e>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c2:	4a2a      	ldr	r2, [pc, #168]	@ (800566c <xTaskResumeAll+0x124>)
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ca:	4613      	mov	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4a27      	ldr	r2, [pc, #156]	@ (8005670 <xTaskResumeAll+0x128>)
 80055d4:	441a      	add	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3304      	adds	r3, #4
 80055da:	4619      	mov	r1, r3
 80055dc:	4610      	mov	r0, r2
 80055de:	f7fe ffe0 	bl	80045a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e6:	4b23      	ldr	r3, [pc, #140]	@ (8005674 <xTaskResumeAll+0x12c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d302      	bcc.n	80055f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80055f0:	4b21      	ldr	r3, [pc, #132]	@ (8005678 <xTaskResumeAll+0x130>)
 80055f2:	2201      	movs	r2, #1
 80055f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005668 <xTaskResumeAll+0x120>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1cb      	bne.n	8005596 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005604:	f000 fb58 	bl	8005cb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005608:	4b1c      	ldr	r3, [pc, #112]	@ (800567c <xTaskResumeAll+0x134>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d010      	beq.n	8005636 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005614:	f000 f846 	bl	80056a4 <xTaskIncrementTick>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800561e:	4b16      	ldr	r3, [pc, #88]	@ (8005678 <xTaskResumeAll+0x130>)
 8005620:	2201      	movs	r2, #1
 8005622:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3b01      	subs	r3, #1
 8005628:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1f1      	bne.n	8005614 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005630:	4b12      	ldr	r3, [pc, #72]	@ (800567c <xTaskResumeAll+0x134>)
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005636:	4b10      	ldr	r3, [pc, #64]	@ (8005678 <xTaskResumeAll+0x130>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d009      	beq.n	8005652 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800563e:	2301      	movs	r3, #1
 8005640:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005642:	4b0f      	ldr	r3, [pc, #60]	@ (8005680 <xTaskResumeAll+0x138>)
 8005644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005652:	f001 f8f3 	bl	800683c <vPortExitCritical>

	return xAlreadyYielded;
 8005656:	68bb      	ldr	r3, [r7, #8]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20001070 	.word	0x20001070
 8005664:	20001048 	.word	0x20001048
 8005668:	20001008 	.word	0x20001008
 800566c:	20001050 	.word	0x20001050
 8005670:	20000b78 	.word	0x20000b78
 8005674:	20000b74 	.word	0x20000b74
 8005678:	2000105c 	.word	0x2000105c
 800567c:	20001058 	.word	0x20001058
 8005680:	e000ed04 	.word	0xe000ed04

08005684 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800568a:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <xTaskGetTickCount+0x1c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005690:	687b      	ldr	r3, [r7, #4]
}
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	2000104c 	.word	0x2000104c

080056a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ae:	4b4f      	ldr	r3, [pc, #316]	@ (80057ec <xTaskIncrementTick+0x148>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f040 8090 	bne.w	80057d8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056b8:	4b4d      	ldr	r3, [pc, #308]	@ (80057f0 <xTaskIncrementTick+0x14c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056c0:	4a4b      	ldr	r2, [pc, #300]	@ (80057f0 <xTaskIncrementTick+0x14c>)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d121      	bne.n	8005710 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80056cc:	4b49      	ldr	r3, [pc, #292]	@ (80057f4 <xTaskIncrementTick+0x150>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	603b      	str	r3, [r7, #0]
}
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
 80056ec:	e7fd      	b.n	80056ea <xTaskIncrementTick+0x46>
 80056ee:	4b41      	ldr	r3, [pc, #260]	@ (80057f4 <xTaskIncrementTick+0x150>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	4b40      	ldr	r3, [pc, #256]	@ (80057f8 <xTaskIncrementTick+0x154>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a3e      	ldr	r2, [pc, #248]	@ (80057f4 <xTaskIncrementTick+0x150>)
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	4a3e      	ldr	r2, [pc, #248]	@ (80057f8 <xTaskIncrementTick+0x154>)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	4b3e      	ldr	r3, [pc, #248]	@ (80057fc <xTaskIncrementTick+0x158>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3301      	adds	r3, #1
 8005708:	4a3c      	ldr	r2, [pc, #240]	@ (80057fc <xTaskIncrementTick+0x158>)
 800570a:	6013      	str	r3, [r2, #0]
 800570c:	f000 fad4 	bl	8005cb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005710:	4b3b      	ldr	r3, [pc, #236]	@ (8005800 <xTaskIncrementTick+0x15c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	429a      	cmp	r2, r3
 8005718:	d349      	bcc.n	80057ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800571a:	4b36      	ldr	r3, [pc, #216]	@ (80057f4 <xTaskIncrementTick+0x150>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d104      	bne.n	800572e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005724:	4b36      	ldr	r3, [pc, #216]	@ (8005800 <xTaskIncrementTick+0x15c>)
 8005726:	f04f 32ff 	mov.w	r2, #4294967295
 800572a:	601a      	str	r2, [r3, #0]
					break;
 800572c:	e03f      	b.n	80057ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800572e:	4b31      	ldr	r3, [pc, #196]	@ (80057f4 <xTaskIncrementTick+0x150>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	429a      	cmp	r2, r3
 8005744:	d203      	bcs.n	800574e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005746:	4a2e      	ldr	r2, [pc, #184]	@ (8005800 <xTaskIncrementTick+0x15c>)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800574c:	e02f      	b.n	80057ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	3304      	adds	r3, #4
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe ff82 	bl	800465c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575c:	2b00      	cmp	r3, #0
 800575e:	d004      	beq.n	800576a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	3318      	adds	r3, #24
 8005764:	4618      	mov	r0, r3
 8005766:	f7fe ff79 	bl	800465c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800576e:	4b25      	ldr	r3, [pc, #148]	@ (8005804 <xTaskIncrementTick+0x160>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d903      	bls.n	800577e <xTaskIncrementTick+0xda>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577a:	4a22      	ldr	r2, [pc, #136]	@ (8005804 <xTaskIncrementTick+0x160>)
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4a1f      	ldr	r2, [pc, #124]	@ (8005808 <xTaskIncrementTick+0x164>)
 800578c:	441a      	add	r2, r3
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	3304      	adds	r3, #4
 8005792:	4619      	mov	r1, r3
 8005794:	4610      	mov	r0, r2
 8005796:	f7fe ff04 	bl	80045a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579e:	4b1b      	ldr	r3, [pc, #108]	@ (800580c <xTaskIncrementTick+0x168>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d3b8      	bcc.n	800571a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80057a8:	2301      	movs	r3, #1
 80057aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ac:	e7b5      	b.n	800571a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057ae:	4b17      	ldr	r3, [pc, #92]	@ (800580c <xTaskIncrementTick+0x168>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b4:	4914      	ldr	r1, [pc, #80]	@ (8005808 <xTaskIncrementTick+0x164>)
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d901      	bls.n	80057ca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80057c6:	2301      	movs	r3, #1
 80057c8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80057ca:	4b11      	ldr	r3, [pc, #68]	@ (8005810 <xTaskIncrementTick+0x16c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80057d2:	2301      	movs	r3, #1
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	e004      	b.n	80057e2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005814 <xTaskIncrementTick+0x170>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3301      	adds	r3, #1
 80057de:	4a0d      	ldr	r2, [pc, #52]	@ (8005814 <xTaskIncrementTick+0x170>)
 80057e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057e2:	697b      	ldr	r3, [r7, #20]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20001070 	.word	0x20001070
 80057f0:	2000104c 	.word	0x2000104c
 80057f4:	20001000 	.word	0x20001000
 80057f8:	20001004 	.word	0x20001004
 80057fc:	20001060 	.word	0x20001060
 8005800:	20001068 	.word	0x20001068
 8005804:	20001050 	.word	0x20001050
 8005808:	20000b78 	.word	0x20000b78
 800580c:	20000b74 	.word	0x20000b74
 8005810:	2000105c 	.word	0x2000105c
 8005814:	20001058 	.word	0x20001058

08005818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800581e:	4b28      	ldr	r3, [pc, #160]	@ (80058c0 <vTaskSwitchContext+0xa8>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005826:	4b27      	ldr	r3, [pc, #156]	@ (80058c4 <vTaskSwitchContext+0xac>)
 8005828:	2201      	movs	r2, #1
 800582a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800582c:	e042      	b.n	80058b4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800582e:	4b25      	ldr	r3, [pc, #148]	@ (80058c4 <vTaskSwitchContext+0xac>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005834:	4b24      	ldr	r3, [pc, #144]	@ (80058c8 <vTaskSwitchContext+0xb0>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	e011      	b.n	8005860 <vTaskSwitchContext+0x48>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10b      	bne.n	800585a <vTaskSwitchContext+0x42>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	607b      	str	r3, [r7, #4]
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop
 8005858:	e7fd      	b.n	8005856 <vTaskSwitchContext+0x3e>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3b01      	subs	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	491a      	ldr	r1, [pc, #104]	@ (80058cc <vTaskSwitchContext+0xb4>)
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4613      	mov	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0e3      	beq.n	800583c <vTaskSwitchContext+0x24>
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4a13      	ldr	r2, [pc, #76]	@ (80058cc <vTaskSwitchContext+0xb4>)
 8005880:	4413      	add	r3, r2
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	605a      	str	r2, [r3, #4]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	3308      	adds	r3, #8
 8005896:	429a      	cmp	r2, r3
 8005898:	d104      	bne.n	80058a4 <vTaskSwitchContext+0x8c>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	605a      	str	r2, [r3, #4]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	4a09      	ldr	r2, [pc, #36]	@ (80058d0 <vTaskSwitchContext+0xb8>)
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	4a06      	ldr	r2, [pc, #24]	@ (80058c8 <vTaskSwitchContext+0xb0>)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6013      	str	r3, [r2, #0]
}
 80058b4:	bf00      	nop
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	20001070 	.word	0x20001070
 80058c4:	2000105c 	.word	0x2000105c
 80058c8:	20001050 	.word	0x20001050
 80058cc:	20000b78 	.word	0x20000b78
 80058d0:	20000b74 	.word	0x20000b74

080058d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10b      	bne.n	80058fc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	60fb      	str	r3, [r7, #12]
}
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	e7fd      	b.n	80058f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058fc:	4b07      	ldr	r3, [pc, #28]	@ (800591c <vTaskPlaceOnEventList+0x48>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3318      	adds	r3, #24
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7fe fe70 	bl	80045ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800590a:	2101      	movs	r1, #1
 800590c:	6838      	ldr	r0, [r7, #0]
 800590e:	f000 fa81 	bl	8005e14 <prvAddCurrentTaskToDelayedList>
}
 8005912:	bf00      	nop
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000b74 	.word	0x20000b74

08005920 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10b      	bne.n	800594a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	617b      	str	r3, [r7, #20]
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	e7fd      	b.n	8005946 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800594a:	4b0a      	ldr	r3, [pc, #40]	@ (8005974 <vTaskPlaceOnEventListRestricted+0x54>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3318      	adds	r3, #24
 8005950:	4619      	mov	r1, r3
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7fe fe25 	bl	80045a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800595e:	f04f 33ff 	mov.w	r3, #4294967295
 8005962:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	68b8      	ldr	r0, [r7, #8]
 8005968:	f000 fa54 	bl	8005e14 <prvAddCurrentTaskToDelayedList>
	}
 800596c:	bf00      	nop
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20000b74 	.word	0x20000b74

08005978 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10b      	bne.n	80059a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	60fb      	str	r3, [r7, #12]
}
 80059a0:	bf00      	nop
 80059a2:	bf00      	nop
 80059a4:	e7fd      	b.n	80059a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	3318      	adds	r3, #24
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fe fe56 	bl	800465c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a28 <xTaskRemoveFromEventList+0xb0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d11d      	bne.n	80059f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	3304      	adds	r3, #4
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fe fe4d 	bl	800465c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c6:	4b19      	ldr	r3, [pc, #100]	@ (8005a2c <xTaskRemoveFromEventList+0xb4>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d903      	bls.n	80059d6 <xTaskRemoveFromEventList+0x5e>
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d2:	4a16      	ldr	r2, [pc, #88]	@ (8005a2c <xTaskRemoveFromEventList+0xb4>)
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4a13      	ldr	r2, [pc, #76]	@ (8005a30 <xTaskRemoveFromEventList+0xb8>)
 80059e4:	441a      	add	r2, r3
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	3304      	adds	r3, #4
 80059ea:	4619      	mov	r1, r3
 80059ec:	4610      	mov	r0, r2
 80059ee:	f7fe fdd8 	bl	80045a2 <vListInsertEnd>
 80059f2:	e005      	b.n	8005a00 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	3318      	adds	r3, #24
 80059f8:	4619      	mov	r1, r3
 80059fa:	480e      	ldr	r0, [pc, #56]	@ (8005a34 <xTaskRemoveFromEventList+0xbc>)
 80059fc:	f7fe fdd1 	bl	80045a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a04:	4b0c      	ldr	r3, [pc, #48]	@ (8005a38 <xTaskRemoveFromEventList+0xc0>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d905      	bls.n	8005a1a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a12:	4b0a      	ldr	r3, [pc, #40]	@ (8005a3c <xTaskRemoveFromEventList+0xc4>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	e001      	b.n	8005a1e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a1e:	697b      	ldr	r3, [r7, #20]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20001070 	.word	0x20001070
 8005a2c:	20001050 	.word	0x20001050
 8005a30:	20000b78 	.word	0x20000b78
 8005a34:	20001008 	.word	0x20001008
 8005a38:	20000b74 	.word	0x20000b74
 8005a3c:	2000105c 	.word	0x2000105c

08005a40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a48:	4b06      	ldr	r3, [pc, #24]	@ (8005a64 <vTaskInternalSetTimeOutState+0x24>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a50:	4b05      	ldr	r3, [pc, #20]	@ (8005a68 <vTaskInternalSetTimeOutState+0x28>)
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	605a      	str	r2, [r3, #4]
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	20001060 	.word	0x20001060
 8005a68:	2000104c 	.word	0x2000104c

08005a6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10b      	bne.n	8005a94 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	613b      	str	r3, [r7, #16]
}
 8005a8e:	bf00      	nop
 8005a90:	bf00      	nop
 8005a92:	e7fd      	b.n	8005a90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10b      	bne.n	8005ab2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	60fb      	str	r3, [r7, #12]
}
 8005aac:	bf00      	nop
 8005aae:	bf00      	nop
 8005ab0:	e7fd      	b.n	8005aae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005ab2:	f000 fe91 	bl	80067d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8005b2c <xTaskCheckForTimeOut+0xc0>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d102      	bne.n	8005ad6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61fb      	str	r3, [r7, #28]
 8005ad4:	e023      	b.n	8005b1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	4b15      	ldr	r3, [pc, #84]	@ (8005b30 <xTaskCheckForTimeOut+0xc4>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d007      	beq.n	8005af2 <xTaskCheckForTimeOut+0x86>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d302      	bcc.n	8005af2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005aec:	2301      	movs	r3, #1
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	e015      	b.n	8005b1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d20b      	bcs.n	8005b14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	1ad2      	subs	r2, r2, r3
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f7ff ff99 	bl	8005a40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61fb      	str	r3, [r7, #28]
 8005b12:	e004      	b.n	8005b1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b1e:	f000 fe8d 	bl	800683c <vPortExitCritical>

	return xReturn;
 8005b22:	69fb      	ldr	r3, [r7, #28]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3720      	adds	r7, #32
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	2000104c 	.word	0x2000104c
 8005b30:	20001060 	.word	0x20001060

08005b34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b38:	4b03      	ldr	r3, [pc, #12]	@ (8005b48 <vTaskMissedYield+0x14>)
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
}
 8005b3e:	bf00      	nop
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	2000105c 	.word	0x2000105c

08005b4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b54:	f000 f852 	bl	8005bfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b58:	4b06      	ldr	r3, [pc, #24]	@ (8005b74 <prvIdleTask+0x28>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d9f9      	bls.n	8005b54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b60:	4b05      	ldr	r3, [pc, #20]	@ (8005b78 <prvIdleTask+0x2c>)
 8005b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b70:	e7f0      	b.n	8005b54 <prvIdleTask+0x8>
 8005b72:	bf00      	nop
 8005b74:	20000b78 	.word	0x20000b78
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b82:	2300      	movs	r3, #0
 8005b84:	607b      	str	r3, [r7, #4]
 8005b86:	e00c      	b.n	8005ba2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4a12      	ldr	r2, [pc, #72]	@ (8005bdc <prvInitialiseTaskLists+0x60>)
 8005b94:	4413      	add	r3, r2
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe fcd6 	bl	8004548 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	607b      	str	r3, [r7, #4]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b37      	cmp	r3, #55	@ 0x37
 8005ba6:	d9ef      	bls.n	8005b88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ba8:	480d      	ldr	r0, [pc, #52]	@ (8005be0 <prvInitialiseTaskLists+0x64>)
 8005baa:	f7fe fccd 	bl	8004548 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bae:	480d      	ldr	r0, [pc, #52]	@ (8005be4 <prvInitialiseTaskLists+0x68>)
 8005bb0:	f7fe fcca 	bl	8004548 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bb4:	480c      	ldr	r0, [pc, #48]	@ (8005be8 <prvInitialiseTaskLists+0x6c>)
 8005bb6:	f7fe fcc7 	bl	8004548 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bba:	480c      	ldr	r0, [pc, #48]	@ (8005bec <prvInitialiseTaskLists+0x70>)
 8005bbc:	f7fe fcc4 	bl	8004548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bc0:	480b      	ldr	r0, [pc, #44]	@ (8005bf0 <prvInitialiseTaskLists+0x74>)
 8005bc2:	f7fe fcc1 	bl	8004548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf4 <prvInitialiseTaskLists+0x78>)
 8005bc8:	4a05      	ldr	r2, [pc, #20]	@ (8005be0 <prvInitialiseTaskLists+0x64>)
 8005bca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf8 <prvInitialiseTaskLists+0x7c>)
 8005bce:	4a05      	ldr	r2, [pc, #20]	@ (8005be4 <prvInitialiseTaskLists+0x68>)
 8005bd0:	601a      	str	r2, [r3, #0]
}
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000b78 	.word	0x20000b78
 8005be0:	20000fd8 	.word	0x20000fd8
 8005be4:	20000fec 	.word	0x20000fec
 8005be8:	20001008 	.word	0x20001008
 8005bec:	2000101c 	.word	0x2000101c
 8005bf0:	20001034 	.word	0x20001034
 8005bf4:	20001000 	.word	0x20001000
 8005bf8:	20001004 	.word	0x20001004

08005bfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c02:	e019      	b.n	8005c38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c04:	f000 fde8 	bl	80067d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c08:	4b10      	ldr	r3, [pc, #64]	@ (8005c4c <prvCheckTasksWaitingTermination+0x50>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3304      	adds	r3, #4
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fe fd21 	bl	800465c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c50 <prvCheckTasksWaitingTermination+0x54>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	4a0b      	ldr	r2, [pc, #44]	@ (8005c50 <prvCheckTasksWaitingTermination+0x54>)
 8005c22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c24:	4b0b      	ldr	r3, [pc, #44]	@ (8005c54 <prvCheckTasksWaitingTermination+0x58>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8005c54 <prvCheckTasksWaitingTermination+0x58>)
 8005c2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c2e:	f000 fe05 	bl	800683c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f810 	bl	8005c58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c38:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <prvCheckTasksWaitingTermination+0x58>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e1      	bne.n	8005c04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c40:	bf00      	nop
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	2000101c 	.word	0x2000101c
 8005c50:	20001048 	.word	0x20001048
 8005c54:	20001030 	.word	0x20001030

08005c58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d108      	bne.n	8005c7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 ffa2 	bl	8006bb8 <vPortFree>
				vPortFree( pxTCB );
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 ff9f 	bl	8006bb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c7a:	e019      	b.n	8005cb0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d103      	bne.n	8005c8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 ff96 	bl	8006bb8 <vPortFree>
	}
 8005c8c:	e010      	b.n	8005cb0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d00b      	beq.n	8005cb0 <prvDeleteTCB+0x58>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	60fb      	str	r3, [r7, #12]
}
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
 8005cae:	e7fd      	b.n	8005cac <prvDeleteTCB+0x54>
	}
 8005cb0:	bf00      	nop
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf0 <prvResetNextTaskUnblockTime+0x38>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d104      	bne.n	8005cd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8005cca:	f04f 32ff 	mov.w	r2, #4294967295
 8005cce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cd0:	e008      	b.n	8005ce4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cd2:	4b07      	ldr	r3, [pc, #28]	@ (8005cf0 <prvResetNextTaskUnblockTime+0x38>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	4a04      	ldr	r2, [pc, #16]	@ (8005cf4 <prvResetNextTaskUnblockTime+0x3c>)
 8005ce2:	6013      	str	r3, [r2, #0]
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	20001000 	.word	0x20001000
 8005cf4:	20001068 	.word	0x20001068

08005cf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8005d2c <xTaskGetSchedulerState+0x34>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d102      	bne.n	8005d0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d06:	2301      	movs	r3, #1
 8005d08:	607b      	str	r3, [r7, #4]
 8005d0a:	e008      	b.n	8005d1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d0c:	4b08      	ldr	r3, [pc, #32]	@ (8005d30 <xTaskGetSchedulerState+0x38>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d102      	bne.n	8005d1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d14:	2302      	movs	r3, #2
 8005d16:	607b      	str	r3, [r7, #4]
 8005d18:	e001      	b.n	8005d1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d1e:	687b      	ldr	r3, [r7, #4]
	}
 8005d20:	4618      	mov	r0, r3
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	20001054 	.word	0x20001054
 8005d30:	20001070 	.word	0x20001070

08005d34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d058      	beq.n	8005dfc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005e08 <xTaskPriorityDisinherit+0xd4>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d00b      	beq.n	8005d6c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	60fb      	str	r3, [r7, #12]
}
 8005d66:	bf00      	nop
 8005d68:	bf00      	nop
 8005d6a:	e7fd      	b.n	8005d68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10b      	bne.n	8005d8c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	60bb      	str	r3, [r7, #8]
}
 8005d86:	bf00      	nop
 8005d88:	bf00      	nop
 8005d8a:	e7fd      	b.n	8005d88 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d90:	1e5a      	subs	r2, r3, #1
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d02c      	beq.n	8005dfc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d128      	bne.n	8005dfc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fe fc54 	bl	800465c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e0c <xTaskPriorityDisinherit+0xd8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d903      	bls.n	8005ddc <xTaskPriorityDisinherit+0xa8>
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8005e0c <xTaskPriorityDisinherit+0xd8>)
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de0:	4613      	mov	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4a09      	ldr	r2, [pc, #36]	@ (8005e10 <xTaskPriorityDisinherit+0xdc>)
 8005dea:	441a      	add	r2, r3
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	3304      	adds	r3, #4
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f7fe fbd5 	bl	80045a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005dfc:	697b      	ldr	r3, [r7, #20]
	}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000b74 	.word	0x20000b74
 8005e0c:	20001050 	.word	0x20001050
 8005e10:	20000b78 	.word	0x20000b78

08005e14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e1e:	4b21      	ldr	r3, [pc, #132]	@ (8005ea4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e24:	4b20      	ldr	r3, [pc, #128]	@ (8005ea8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3304      	adds	r3, #4
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe fc16 	bl	800465c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e36:	d10a      	bne.n	8005e4e <prvAddCurrentTaskToDelayedList+0x3a>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d007      	beq.n	8005e4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4619      	mov	r1, r3
 8005e46:	4819      	ldr	r0, [pc, #100]	@ (8005eac <prvAddCurrentTaskToDelayedList+0x98>)
 8005e48:	f7fe fbab 	bl	80045a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e4c:	e026      	b.n	8005e9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4413      	add	r3, r2
 8005e54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e56:	4b14      	ldr	r3, [pc, #80]	@ (8005ea8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d209      	bcs.n	8005e7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e66:	4b12      	ldr	r3, [pc, #72]	@ (8005eb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3304      	adds	r3, #4
 8005e70:	4619      	mov	r1, r3
 8005e72:	4610      	mov	r0, r2
 8005e74:	f7fe fbb9 	bl	80045ea <vListInsert>
}
 8005e78:	e010      	b.n	8005e9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4619      	mov	r1, r3
 8005e86:	4610      	mov	r0, r2
 8005e88:	f7fe fbaf 	bl	80045ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d202      	bcs.n	8005e9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e96:	4a08      	ldr	r2, [pc, #32]	@ (8005eb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	6013      	str	r3, [r2, #0]
}
 8005e9c:	bf00      	nop
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	2000104c 	.word	0x2000104c
 8005ea8:	20000b74 	.word	0x20000b74
 8005eac:	20001034 	.word	0x20001034
 8005eb0:	20001004 	.word	0x20001004
 8005eb4:	20001000 	.word	0x20001000
 8005eb8:	20001068 	.word	0x20001068

08005ebc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08a      	sub	sp, #40	@ 0x28
 8005ec0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ec6:	f000 fb13 	bl	80064f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005eca:	4b1d      	ldr	r3, [pc, #116]	@ (8005f40 <xTimerCreateTimerTask+0x84>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d021      	beq.n	8005f16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005eda:	1d3a      	adds	r2, r7, #4
 8005edc:	f107 0108 	add.w	r1, r7, #8
 8005ee0:	f107 030c 	add.w	r3, r7, #12
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe fb15 	bl	8004514 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005eea:	6879      	ldr	r1, [r7, #4]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	9202      	str	r2, [sp, #8]
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	460a      	mov	r2, r1
 8005efc:	4911      	ldr	r1, [pc, #68]	@ (8005f44 <xTimerCreateTimerTask+0x88>)
 8005efe:	4812      	ldr	r0, [pc, #72]	@ (8005f48 <xTimerCreateTimerTask+0x8c>)
 8005f00:	f7ff f8d0 	bl	80050a4 <xTaskCreateStatic>
 8005f04:	4603      	mov	r3, r0
 8005f06:	4a11      	ldr	r2, [pc, #68]	@ (8005f4c <xTimerCreateTimerTask+0x90>)
 8005f08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f0a:	4b10      	ldr	r3, [pc, #64]	@ (8005f4c <xTimerCreateTimerTask+0x90>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f12:	2301      	movs	r3, #1
 8005f14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10b      	bne.n	8005f34 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	613b      	str	r3, [r7, #16]
}
 8005f2e:	bf00      	nop
 8005f30:	bf00      	nop
 8005f32:	e7fd      	b.n	8005f30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f34:	697b      	ldr	r3, [r7, #20]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	200010a4 	.word	0x200010a4
 8005f44:	08006e98 	.word	0x08006e98
 8005f48:	08006089 	.word	0x08006089
 8005f4c:	200010a8 	.word	0x200010a8

08005f50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08a      	sub	sp, #40	@ 0x28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10b      	bne.n	8005f80 <xTimerGenericCommand+0x30>
	__asm volatile
 8005f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6c:	f383 8811 	msr	BASEPRI, r3
 8005f70:	f3bf 8f6f 	isb	sy
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	623b      	str	r3, [r7, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	bf00      	nop
 8005f7e:	e7fd      	b.n	8005f7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f80:	4b19      	ldr	r3, [pc, #100]	@ (8005fe8 <xTimerGenericCommand+0x98>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d02a      	beq.n	8005fde <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	dc18      	bgt.n	8005fcc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f9a:	f7ff fead 	bl	8005cf8 <xTaskGetSchedulerState>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d109      	bne.n	8005fb8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005fa4:	4b10      	ldr	r3, [pc, #64]	@ (8005fe8 <xTimerGenericCommand+0x98>)
 8005fa6:	6818      	ldr	r0, [r3, #0]
 8005fa8:	f107 0110 	add.w	r1, r7, #16
 8005fac:	2300      	movs	r3, #0
 8005fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb0:	f7fe fc88 	bl	80048c4 <xQueueGenericSend>
 8005fb4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005fb6:	e012      	b.n	8005fde <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe8 <xTimerGenericCommand+0x98>)
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	f107 0110 	add.w	r1, r7, #16
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f7fe fc7e 	bl	80048c4 <xQueueGenericSend>
 8005fc8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005fca:	e008      	b.n	8005fde <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005fcc:	4b06      	ldr	r3, [pc, #24]	@ (8005fe8 <xTimerGenericCommand+0x98>)
 8005fce:	6818      	ldr	r0, [r3, #0]
 8005fd0:	f107 0110 	add.w	r1, r7, #16
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	f7fe fd76 	bl	8004ac8 <xQueueGenericSendFromISR>
 8005fdc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3728      	adds	r7, #40	@ 0x28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	200010a4 	.word	0x200010a4

08005fec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af02      	add	r7, sp, #8
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ff6:	4b23      	ldr	r3, [pc, #140]	@ (8006084 <prvProcessExpiredTimer+0x98>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	3304      	adds	r3, #4
 8006004:	4618      	mov	r0, r3
 8006006:	f7fe fb29 	bl	800465c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d023      	beq.n	8006060 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	699a      	ldr	r2, [r3, #24]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	18d1      	adds	r1, r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	6978      	ldr	r0, [r7, #20]
 8006026:	f000 f8d5 	bl	80061d4 <prvInsertTimerInActiveList>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d020      	beq.n	8006072 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006030:	2300      	movs	r3, #0
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	2300      	movs	r3, #0
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	2100      	movs	r1, #0
 800603a:	6978      	ldr	r0, [r7, #20]
 800603c:	f7ff ff88 	bl	8005f50 <xTimerGenericCommand>
 8006040:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d114      	bne.n	8006072 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	60fb      	str	r3, [r7, #12]
}
 800605a:	bf00      	nop
 800605c:	bf00      	nop
 800605e:	e7fd      	b.n	800605c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006066:	f023 0301 	bic.w	r3, r3, #1
 800606a:	b2da      	uxtb	r2, r3
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	6978      	ldr	r0, [r7, #20]
 8006078:	4798      	blx	r3
}
 800607a:	bf00      	nop
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	2000109c 	.word	0x2000109c

08006088 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006090:	f107 0308 	add.w	r3, r7, #8
 8006094:	4618      	mov	r0, r3
 8006096:	f000 f859 	bl	800614c <prvGetNextExpireTime>
 800609a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4619      	mov	r1, r3
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 f805 	bl	80060b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060a6:	f000 f8d7 	bl	8006258 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060aa:	bf00      	nop
 80060ac:	e7f0      	b.n	8006090 <prvTimerTask+0x8>
	...

080060b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060ba:	f7ff fa37 	bl	800552c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060be:	f107 0308 	add.w	r3, r7, #8
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 f866 	bl	8006194 <prvSampleTimeNow>
 80060c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d130      	bne.n	8006132 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10a      	bne.n	80060ec <prvProcessTimerOrBlockTask+0x3c>
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d806      	bhi.n	80060ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80060de:	f7ff fa33 	bl	8005548 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060e2:	68f9      	ldr	r1, [r7, #12]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff ff81 	bl	8005fec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80060ea:	e024      	b.n	8006136 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d008      	beq.n	8006104 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060f2:	4b13      	ldr	r3, [pc, #76]	@ (8006140 <prvProcessTimerOrBlockTask+0x90>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <prvProcessTimerOrBlockTask+0x50>
 80060fc:	2301      	movs	r3, #1
 80060fe:	e000      	b.n	8006102 <prvProcessTimerOrBlockTask+0x52>
 8006100:	2300      	movs	r3, #0
 8006102:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006104:	4b0f      	ldr	r3, [pc, #60]	@ (8006144 <prvProcessTimerOrBlockTask+0x94>)
 8006106:	6818      	ldr	r0, [r3, #0]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	4619      	mov	r1, r3
 8006112:	f7fe ff93 	bl	800503c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006116:	f7ff fa17 	bl	8005548 <xTaskResumeAll>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10a      	bne.n	8006136 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006120:	4b09      	ldr	r3, [pc, #36]	@ (8006148 <prvProcessTimerOrBlockTask+0x98>)
 8006122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	f3bf 8f6f 	isb	sy
}
 8006130:	e001      	b.n	8006136 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006132:	f7ff fa09 	bl	8005548 <xTaskResumeAll>
}
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	200010a0 	.word	0x200010a0
 8006144:	200010a4 	.word	0x200010a4
 8006148:	e000ed04 	.word	0xe000ed04

0800614c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006154:	4b0e      	ldr	r3, [pc, #56]	@ (8006190 <prvGetNextExpireTime+0x44>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <prvGetNextExpireTime+0x16>
 800615e:	2201      	movs	r2, #1
 8006160:	e000      	b.n	8006164 <prvGetNextExpireTime+0x18>
 8006162:	2200      	movs	r2, #0
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d105      	bne.n	800617c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006170:	4b07      	ldr	r3, [pc, #28]	@ (8006190 <prvGetNextExpireTime+0x44>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	e001      	b.n	8006180 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800617c:	2300      	movs	r3, #0
 800617e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006180:	68fb      	ldr	r3, [r7, #12]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3714      	adds	r7, #20
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	2000109c 	.word	0x2000109c

08006194 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800619c:	f7ff fa72 	bl	8005684 <xTaskGetTickCount>
 80061a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061a2:	4b0b      	ldr	r3, [pc, #44]	@ (80061d0 <prvSampleTimeNow+0x3c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d205      	bcs.n	80061b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061ac:	f000 f93a 	bl	8006424 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	e002      	b.n	80061be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061be:	4a04      	ldr	r2, [pc, #16]	@ (80061d0 <prvSampleTimeNow+0x3c>)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061c4:	68fb      	ldr	r3, [r7, #12]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	200010ac 	.word	0x200010ac

080061d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d812      	bhi.n	8006220 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	1ad2      	subs	r2, r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	429a      	cmp	r2, r3
 8006206:	d302      	bcc.n	800620e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006208:	2301      	movs	r3, #1
 800620a:	617b      	str	r3, [r7, #20]
 800620c:	e01b      	b.n	8006246 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800620e:	4b10      	ldr	r3, [pc, #64]	@ (8006250 <prvInsertTimerInActiveList+0x7c>)
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3304      	adds	r3, #4
 8006216:	4619      	mov	r1, r3
 8006218:	4610      	mov	r0, r2
 800621a:	f7fe f9e6 	bl	80045ea <vListInsert>
 800621e:	e012      	b.n	8006246 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	429a      	cmp	r2, r3
 8006226:	d206      	bcs.n	8006236 <prvInsertTimerInActiveList+0x62>
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d302      	bcc.n	8006236 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006230:	2301      	movs	r3, #1
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	e007      	b.n	8006246 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006236:	4b07      	ldr	r3, [pc, #28]	@ (8006254 <prvInsertTimerInActiveList+0x80>)
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	3304      	adds	r3, #4
 800623e:	4619      	mov	r1, r3
 8006240:	4610      	mov	r0, r2
 8006242:	f7fe f9d2 	bl	80045ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006246:	697b      	ldr	r3, [r7, #20]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	200010a0 	.word	0x200010a0
 8006254:	2000109c 	.word	0x2000109c

08006258 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08e      	sub	sp, #56	@ 0x38
 800625c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800625e:	e0ce      	b.n	80063fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	da19      	bge.n	800629a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006266:	1d3b      	adds	r3, r7, #4
 8006268:	3304      	adds	r3, #4
 800626a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800626c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10b      	bne.n	800628a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	61fb      	str	r3, [r7, #28]
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	e7fd      	b.n	8006286 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800628a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006290:	6850      	ldr	r0, [r2, #4]
 8006292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006294:	6892      	ldr	r2, [r2, #8]
 8006296:	4611      	mov	r1, r2
 8006298:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f2c0 80ae 	blt.w	80063fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d004      	beq.n	80062b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b0:	3304      	adds	r3, #4
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fe f9d2 	bl	800465c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062b8:	463b      	mov	r3, r7
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff ff6a 	bl	8006194 <prvSampleTimeNow>
 80062c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b09      	cmp	r3, #9
 80062c6:	f200 8097 	bhi.w	80063f8 <prvProcessReceivedCommands+0x1a0>
 80062ca:	a201      	add	r2, pc, #4	@ (adr r2, 80062d0 <prvProcessReceivedCommands+0x78>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	080062f9 	.word	0x080062f9
 80062d4:	080062f9 	.word	0x080062f9
 80062d8:	080062f9 	.word	0x080062f9
 80062dc:	0800636f 	.word	0x0800636f
 80062e0:	08006383 	.word	0x08006383
 80062e4:	080063cf 	.word	0x080063cf
 80062e8:	080062f9 	.word	0x080062f9
 80062ec:	080062f9 	.word	0x080062f9
 80062f0:	0800636f 	.word	0x0800636f
 80062f4:	08006383 	.word	0x08006383
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062fe:	f043 0301 	orr.w	r3, r3, #1
 8006302:	b2da      	uxtb	r2, r3
 8006304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006306:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	18d1      	adds	r1, r2, r3
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006316:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006318:	f7ff ff5c 	bl	80061d4 <prvInsertTimerInActiveList>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d06c      	beq.n	80063fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006328:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800632a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b00      	cmp	r3, #0
 8006336:	d061      	beq.n	80063fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	441a      	add	r2, r3
 8006340:	2300      	movs	r3, #0
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	2300      	movs	r3, #0
 8006346:	2100      	movs	r1, #0
 8006348:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800634a:	f7ff fe01 	bl	8005f50 <xTimerGenericCommand>
 800634e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d152      	bne.n	80063fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	61bb      	str	r3, [r7, #24]
}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	e7fd      	b.n	800636a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800636e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006370:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006374:	f023 0301 	bic.w	r3, r3, #1
 8006378:	b2da      	uxtb	r2, r3
 800637a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006380:	e03d      	b.n	80063fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006384:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006388:	f043 0301 	orr.w	r3, r3, #1
 800638c:	b2da      	uxtb	r2, r3
 800638e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006390:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006398:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800639a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10b      	bne.n	80063ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	617b      	str	r3, [r7, #20]
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	e7fd      	b.n	80063b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	18d1      	adds	r1, r2, r3
 80063c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063c8:	f7ff ff04 	bl	80061d4 <prvInsertTimerInActiveList>
					break;
 80063cc:	e017      	b.n	80063fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80063ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d103      	bne.n	80063e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80063dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063de:	f000 fbeb 	bl	8006bb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063e2:	e00c      	b.n	80063fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063ea:	f023 0301 	bic.w	r3, r3, #1
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80063f6:	e002      	b.n	80063fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80063f8:	bf00      	nop
 80063fa:	e000      	b.n	80063fe <prvProcessReceivedCommands+0x1a6>
					break;
 80063fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063fe:	4b08      	ldr	r3, [pc, #32]	@ (8006420 <prvProcessReceivedCommands+0x1c8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	1d39      	adds	r1, r7, #4
 8006404:	2200      	movs	r2, #0
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe fbfc 	bl	8004c04 <xQueueReceive>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	f47f af26 	bne.w	8006260 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006414:	bf00      	nop
 8006416:	bf00      	nop
 8006418:	3730      	adds	r7, #48	@ 0x30
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	200010a4 	.word	0x200010a4

08006424 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800642a:	e049      	b.n	80064c0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800642c:	4b2e      	ldr	r3, [pc, #184]	@ (80064e8 <prvSwitchTimerLists+0xc4>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006436:	4b2c      	ldr	r3, [pc, #176]	@ (80064e8 <prvSwitchTimerLists+0xc4>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3304      	adds	r3, #4
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe f909 	bl	800465c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	d02f      	beq.n	80064c0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4413      	add	r3, r2
 8006468:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	429a      	cmp	r2, r3
 8006470:	d90e      	bls.n	8006490 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800647e:	4b1a      	ldr	r3, [pc, #104]	@ (80064e8 <prvSwitchTimerLists+0xc4>)
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	3304      	adds	r3, #4
 8006486:	4619      	mov	r1, r3
 8006488:	4610      	mov	r0, r2
 800648a:	f7fe f8ae 	bl	80045ea <vListInsert>
 800648e:	e017      	b.n	80064c0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006490:	2300      	movs	r3, #0
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	2300      	movs	r3, #0
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	2100      	movs	r1, #0
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f7ff fd58 	bl	8005f50 <xTimerGenericCommand>
 80064a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10b      	bne.n	80064c0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80064a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	603b      	str	r3, [r7, #0]
}
 80064ba:	bf00      	nop
 80064bc:	bf00      	nop
 80064be:	e7fd      	b.n	80064bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064c0:	4b09      	ldr	r3, [pc, #36]	@ (80064e8 <prvSwitchTimerLists+0xc4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1b0      	bne.n	800642c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80064ca:	4b07      	ldr	r3, [pc, #28]	@ (80064e8 <prvSwitchTimerLists+0xc4>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80064d0:	4b06      	ldr	r3, [pc, #24]	@ (80064ec <prvSwitchTimerLists+0xc8>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a04      	ldr	r2, [pc, #16]	@ (80064e8 <prvSwitchTimerLists+0xc4>)
 80064d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80064d8:	4a04      	ldr	r2, [pc, #16]	@ (80064ec <prvSwitchTimerLists+0xc8>)
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	6013      	str	r3, [r2, #0]
}
 80064de:	bf00      	nop
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	2000109c 	.word	0x2000109c
 80064ec:	200010a0 	.word	0x200010a0

080064f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80064f6:	f000 f96f 	bl	80067d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80064fa:	4b15      	ldr	r3, [pc, #84]	@ (8006550 <prvCheckForValidListAndQueue+0x60>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d120      	bne.n	8006544 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006502:	4814      	ldr	r0, [pc, #80]	@ (8006554 <prvCheckForValidListAndQueue+0x64>)
 8006504:	f7fe f820 	bl	8004548 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006508:	4813      	ldr	r0, [pc, #76]	@ (8006558 <prvCheckForValidListAndQueue+0x68>)
 800650a:	f7fe f81d 	bl	8004548 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800650e:	4b13      	ldr	r3, [pc, #76]	@ (800655c <prvCheckForValidListAndQueue+0x6c>)
 8006510:	4a10      	ldr	r2, [pc, #64]	@ (8006554 <prvCheckForValidListAndQueue+0x64>)
 8006512:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006514:	4b12      	ldr	r3, [pc, #72]	@ (8006560 <prvCheckForValidListAndQueue+0x70>)
 8006516:	4a10      	ldr	r2, [pc, #64]	@ (8006558 <prvCheckForValidListAndQueue+0x68>)
 8006518:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800651a:	2300      	movs	r3, #0
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	4b11      	ldr	r3, [pc, #68]	@ (8006564 <prvCheckForValidListAndQueue+0x74>)
 8006520:	4a11      	ldr	r2, [pc, #68]	@ (8006568 <prvCheckForValidListAndQueue+0x78>)
 8006522:	2110      	movs	r1, #16
 8006524:	200a      	movs	r0, #10
 8006526:	f7fe f92d 	bl	8004784 <xQueueGenericCreateStatic>
 800652a:	4603      	mov	r3, r0
 800652c:	4a08      	ldr	r2, [pc, #32]	@ (8006550 <prvCheckForValidListAndQueue+0x60>)
 800652e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006530:	4b07      	ldr	r3, [pc, #28]	@ (8006550 <prvCheckForValidListAndQueue+0x60>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d005      	beq.n	8006544 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006538:	4b05      	ldr	r3, [pc, #20]	@ (8006550 <prvCheckForValidListAndQueue+0x60>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	490b      	ldr	r1, [pc, #44]	@ (800656c <prvCheckForValidListAndQueue+0x7c>)
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fd52 	bl	8004fe8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006544:	f000 f97a 	bl	800683c <vPortExitCritical>
}
 8006548:	bf00      	nop
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	200010a4 	.word	0x200010a4
 8006554:	20001074 	.word	0x20001074
 8006558:	20001088 	.word	0x20001088
 800655c:	2000109c 	.word	0x2000109c
 8006560:	200010a0 	.word	0x200010a0
 8006564:	20001150 	.word	0x20001150
 8006568:	200010b0 	.word	0x200010b0
 800656c:	08006ea0 	.word	0x08006ea0

08006570 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3b04      	subs	r3, #4
 8006580:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3b04      	subs	r3, #4
 800658e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f023 0201 	bic.w	r2, r3, #1
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3b04      	subs	r3, #4
 800659e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065a0:	4a0c      	ldr	r2, [pc, #48]	@ (80065d4 <pxPortInitialiseStack+0x64>)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3b14      	subs	r3, #20
 80065aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3b04      	subs	r3, #4
 80065b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f06f 0202 	mvn.w	r2, #2
 80065be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3b20      	subs	r3, #32
 80065c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065c6:	68fb      	ldr	r3, [r7, #12]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	080065d9 	.word	0x080065d9

080065d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065e2:	4b13      	ldr	r3, [pc, #76]	@ (8006630 <prvTaskExitError+0x58>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ea:	d00b      	beq.n	8006604 <prvTaskExitError+0x2c>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	60fb      	str	r3, [r7, #12]
}
 80065fe:	bf00      	nop
 8006600:	bf00      	nop
 8006602:	e7fd      	b.n	8006600 <prvTaskExitError+0x28>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	60bb      	str	r3, [r7, #8]
}
 8006616:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006618:	bf00      	nop
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0fc      	beq.n	800661a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006620:	bf00      	nop
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	2000000c 	.word	0x2000000c
	...

08006640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006640:	4b07      	ldr	r3, [pc, #28]	@ (8006660 <pxCurrentTCBConst2>)
 8006642:	6819      	ldr	r1, [r3, #0]
 8006644:	6808      	ldr	r0, [r1, #0]
 8006646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664a:	f380 8809 	msr	PSP, r0
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f04f 0000 	mov.w	r0, #0
 8006656:	f380 8811 	msr	BASEPRI, r0
 800665a:	4770      	bx	lr
 800665c:	f3af 8000 	nop.w

08006660 <pxCurrentTCBConst2>:
 8006660:	20000b74 	.word	0x20000b74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006664:	bf00      	nop
 8006666:	bf00      	nop

08006668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006668:	4808      	ldr	r0, [pc, #32]	@ (800668c <prvPortStartFirstTask+0x24>)
 800666a:	6800      	ldr	r0, [r0, #0]
 800666c:	6800      	ldr	r0, [r0, #0]
 800666e:	f380 8808 	msr	MSP, r0
 8006672:	f04f 0000 	mov.w	r0, #0
 8006676:	f380 8814 	msr	CONTROL, r0
 800667a:	b662      	cpsie	i
 800667c:	b661      	cpsie	f
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	df00      	svc	0
 8006688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800668a:	bf00      	nop
 800668c:	e000ed08 	.word	0xe000ed08

08006690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006696:	4b47      	ldr	r3, [pc, #284]	@ (80067b4 <xPortStartScheduler+0x124>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a47      	ldr	r2, [pc, #284]	@ (80067b8 <xPortStartScheduler+0x128>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d10b      	bne.n	80066b8 <xPortStartScheduler+0x28>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	60fb      	str	r3, [r7, #12]
}
 80066b2:	bf00      	nop
 80066b4:	bf00      	nop
 80066b6:	e7fd      	b.n	80066b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066b8:	4b3e      	ldr	r3, [pc, #248]	@ (80067b4 <xPortStartScheduler+0x124>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a3f      	ldr	r2, [pc, #252]	@ (80067bc <xPortStartScheduler+0x12c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d10b      	bne.n	80066da <xPortStartScheduler+0x4a>
	__asm volatile
 80066c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	613b      	str	r3, [r7, #16]
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
 80066d8:	e7fd      	b.n	80066d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066da:	4b39      	ldr	r3, [pc, #228]	@ (80067c0 <xPortStartScheduler+0x130>)
 80066dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	22ff      	movs	r2, #255	@ 0xff
 80066ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	4b31      	ldr	r3, [pc, #196]	@ (80067c4 <xPortStartScheduler+0x134>)
 8006700:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006702:	4b31      	ldr	r3, [pc, #196]	@ (80067c8 <xPortStartScheduler+0x138>)
 8006704:	2207      	movs	r2, #7
 8006706:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006708:	e009      	b.n	800671e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800670a:	4b2f      	ldr	r3, [pc, #188]	@ (80067c8 <xPortStartScheduler+0x138>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3b01      	subs	r3, #1
 8006710:	4a2d      	ldr	r2, [pc, #180]	@ (80067c8 <xPortStartScheduler+0x138>)
 8006712:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006714:	78fb      	ldrb	r3, [r7, #3]
 8006716:	b2db      	uxtb	r3, r3
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	b2db      	uxtb	r3, r3
 800671c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006726:	2b80      	cmp	r3, #128	@ 0x80
 8006728:	d0ef      	beq.n	800670a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800672a:	4b27      	ldr	r3, [pc, #156]	@ (80067c8 <xPortStartScheduler+0x138>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f1c3 0307 	rsb	r3, r3, #7
 8006732:	2b04      	cmp	r3, #4
 8006734:	d00b      	beq.n	800674e <xPortStartScheduler+0xbe>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	60bb      	str	r3, [r7, #8]
}
 8006748:	bf00      	nop
 800674a:	bf00      	nop
 800674c:	e7fd      	b.n	800674a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800674e:	4b1e      	ldr	r3, [pc, #120]	@ (80067c8 <xPortStartScheduler+0x138>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	021b      	lsls	r3, r3, #8
 8006754:	4a1c      	ldr	r2, [pc, #112]	@ (80067c8 <xPortStartScheduler+0x138>)
 8006756:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006758:	4b1b      	ldr	r3, [pc, #108]	@ (80067c8 <xPortStartScheduler+0x138>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006760:	4a19      	ldr	r2, [pc, #100]	@ (80067c8 <xPortStartScheduler+0x138>)
 8006762:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	b2da      	uxtb	r2, r3
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800676c:	4b17      	ldr	r3, [pc, #92]	@ (80067cc <xPortStartScheduler+0x13c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a16      	ldr	r2, [pc, #88]	@ (80067cc <xPortStartScheduler+0x13c>)
 8006772:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006776:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006778:	4b14      	ldr	r3, [pc, #80]	@ (80067cc <xPortStartScheduler+0x13c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a13      	ldr	r2, [pc, #76]	@ (80067cc <xPortStartScheduler+0x13c>)
 800677e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006782:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006784:	f000 f8da 	bl	800693c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006788:	4b11      	ldr	r3, [pc, #68]	@ (80067d0 <xPortStartScheduler+0x140>)
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800678e:	f000 f8f9 	bl	8006984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006792:	4b10      	ldr	r3, [pc, #64]	@ (80067d4 <xPortStartScheduler+0x144>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a0f      	ldr	r2, [pc, #60]	@ (80067d4 <xPortStartScheduler+0x144>)
 8006798:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800679c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800679e:	f7ff ff63 	bl	8006668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067a2:	f7ff f839 	bl	8005818 <vTaskSwitchContext>
	prvTaskExitError();
 80067a6:	f7ff ff17 	bl	80065d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	e000ed00 	.word	0xe000ed00
 80067b8:	410fc271 	.word	0x410fc271
 80067bc:	410fc270 	.word	0x410fc270
 80067c0:	e000e400 	.word	0xe000e400
 80067c4:	200011a0 	.word	0x200011a0
 80067c8:	200011a4 	.word	0x200011a4
 80067cc:	e000ed20 	.word	0xe000ed20
 80067d0:	2000000c 	.word	0x2000000c
 80067d4:	e000ef34 	.word	0xe000ef34

080067d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	607b      	str	r3, [r7, #4]
}
 80067f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067f2:	4b10      	ldr	r3, [pc, #64]	@ (8006834 <vPortEnterCritical+0x5c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3301      	adds	r3, #1
 80067f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006834 <vPortEnterCritical+0x5c>)
 80067fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006834 <vPortEnterCritical+0x5c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d110      	bne.n	8006826 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006804:	4b0c      	ldr	r3, [pc, #48]	@ (8006838 <vPortEnterCritical+0x60>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00b      	beq.n	8006826 <vPortEnterCritical+0x4e>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	603b      	str	r3, [r7, #0]
}
 8006820:	bf00      	nop
 8006822:	bf00      	nop
 8006824:	e7fd      	b.n	8006822 <vPortEnterCritical+0x4a>
	}
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	2000000c 	.word	0x2000000c
 8006838:	e000ed04 	.word	0xe000ed04

0800683c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006842:	4b12      	ldr	r3, [pc, #72]	@ (800688c <vPortExitCritical+0x50>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10b      	bne.n	8006862 <vPortExitCritical+0x26>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	607b      	str	r3, [r7, #4]
}
 800685c:	bf00      	nop
 800685e:	bf00      	nop
 8006860:	e7fd      	b.n	800685e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006862:	4b0a      	ldr	r3, [pc, #40]	@ (800688c <vPortExitCritical+0x50>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3b01      	subs	r3, #1
 8006868:	4a08      	ldr	r2, [pc, #32]	@ (800688c <vPortExitCritical+0x50>)
 800686a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800686c:	4b07      	ldr	r3, [pc, #28]	@ (800688c <vPortExitCritical+0x50>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d105      	bne.n	8006880 <vPortExitCritical+0x44>
 8006874:	2300      	movs	r3, #0
 8006876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	f383 8811 	msr	BASEPRI, r3
}
 800687e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	2000000c 	.word	0x2000000c

08006890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006890:	f3ef 8009 	mrs	r0, PSP
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	4b15      	ldr	r3, [pc, #84]	@ (80068f0 <pxCurrentTCBConst>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	f01e 0f10 	tst.w	lr, #16
 80068a0:	bf08      	it	eq
 80068a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068aa:	6010      	str	r0, [r2, #0]
 80068ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80068b4:	f380 8811 	msr	BASEPRI, r0
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f7fe ffaa 	bl	8005818 <vTaskSwitchContext>
 80068c4:	f04f 0000 	mov.w	r0, #0
 80068c8:	f380 8811 	msr	BASEPRI, r0
 80068cc:	bc09      	pop	{r0, r3}
 80068ce:	6819      	ldr	r1, [r3, #0]
 80068d0:	6808      	ldr	r0, [r1, #0]
 80068d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d6:	f01e 0f10 	tst.w	lr, #16
 80068da:	bf08      	it	eq
 80068dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068e0:	f380 8809 	msr	PSP, r0
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	f3af 8000 	nop.w

080068f0 <pxCurrentTCBConst>:
 80068f0:	20000b74 	.word	0x20000b74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop

080068f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	607b      	str	r3, [r7, #4]
}
 8006910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006912:	f7fe fec7 	bl	80056a4 <xTaskIncrementTick>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d003      	beq.n	8006924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800691c:	4b06      	ldr	r3, [pc, #24]	@ (8006938 <xPortSysTickHandler+0x40>)
 800691e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	2300      	movs	r3, #0
 8006926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	f383 8811 	msr	BASEPRI, r3
}
 800692e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006930:	bf00      	nop
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	e000ed04 	.word	0xe000ed04

0800693c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006940:	4b0b      	ldr	r3, [pc, #44]	@ (8006970 <vPortSetupTimerInterrupt+0x34>)
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006946:	4b0b      	ldr	r3, [pc, #44]	@ (8006974 <vPortSetupTimerInterrupt+0x38>)
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800694c:	4b0a      	ldr	r3, [pc, #40]	@ (8006978 <vPortSetupTimerInterrupt+0x3c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a0a      	ldr	r2, [pc, #40]	@ (800697c <vPortSetupTimerInterrupt+0x40>)
 8006952:	fba2 2303 	umull	r2, r3, r2, r3
 8006956:	099b      	lsrs	r3, r3, #6
 8006958:	4a09      	ldr	r2, [pc, #36]	@ (8006980 <vPortSetupTimerInterrupt+0x44>)
 800695a:	3b01      	subs	r3, #1
 800695c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800695e:	4b04      	ldr	r3, [pc, #16]	@ (8006970 <vPortSetupTimerInterrupt+0x34>)
 8006960:	2207      	movs	r2, #7
 8006962:	601a      	str	r2, [r3, #0]
}
 8006964:	bf00      	nop
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	e000e010 	.word	0xe000e010
 8006974:	e000e018 	.word	0xe000e018
 8006978:	20000000 	.word	0x20000000
 800697c:	10624dd3 	.word	0x10624dd3
 8006980:	e000e014 	.word	0xe000e014

08006984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006984:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006994 <vPortEnableVFP+0x10>
 8006988:	6801      	ldr	r1, [r0, #0]
 800698a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800698e:	6001      	str	r1, [r0, #0]
 8006990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006992:	bf00      	nop
 8006994:	e000ed88 	.word	0xe000ed88

08006998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800699e:	f3ef 8305 	mrs	r3, IPSR
 80069a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b0f      	cmp	r3, #15
 80069a8:	d915      	bls.n	80069d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069aa:	4a18      	ldr	r2, [pc, #96]	@ (8006a0c <vPortValidateInterruptPriority+0x74>)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069b4:	4b16      	ldr	r3, [pc, #88]	@ (8006a10 <vPortValidateInterruptPriority+0x78>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	7afa      	ldrb	r2, [r7, #11]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d20b      	bcs.n	80069d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	607b      	str	r3, [r7, #4]
}
 80069d0:	bf00      	nop
 80069d2:	bf00      	nop
 80069d4:	e7fd      	b.n	80069d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006a14 <vPortValidateInterruptPriority+0x7c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80069de:	4b0e      	ldr	r3, [pc, #56]	@ (8006a18 <vPortValidateInterruptPriority+0x80>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d90b      	bls.n	80069fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	603b      	str	r3, [r7, #0]
}
 80069f8:	bf00      	nop
 80069fa:	bf00      	nop
 80069fc:	e7fd      	b.n	80069fa <vPortValidateInterruptPriority+0x62>
	}
 80069fe:	bf00      	nop
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	e000e3f0 	.word	0xe000e3f0
 8006a10:	200011a0 	.word	0x200011a0
 8006a14:	e000ed0c 	.word	0xe000ed0c
 8006a18:	200011a4 	.word	0x200011a4

08006a1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08a      	sub	sp, #40	@ 0x28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a28:	f7fe fd80 	bl	800552c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ba0 <pvPortMalloc+0x184>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a34:	f000 f924 	bl	8006c80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a38:	4b5a      	ldr	r3, [pc, #360]	@ (8006ba4 <pvPortMalloc+0x188>)
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4013      	ands	r3, r2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f040 8095 	bne.w	8006b70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01e      	beq.n	8006a8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4413      	add	r3, r2
 8006a52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f003 0307 	and.w	r3, r3, #7
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d015      	beq.n	8006a8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f023 0307 	bic.w	r3, r3, #7
 8006a64:	3308      	adds	r3, #8
 8006a66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00b      	beq.n	8006a8a <pvPortMalloc+0x6e>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	617b      	str	r3, [r7, #20]
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop
 8006a88:	e7fd      	b.n	8006a86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d06f      	beq.n	8006b70 <pvPortMalloc+0x154>
 8006a90:	4b45      	ldr	r3, [pc, #276]	@ (8006ba8 <pvPortMalloc+0x18c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d86a      	bhi.n	8006b70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a9a:	4b44      	ldr	r3, [pc, #272]	@ (8006bac <pvPortMalloc+0x190>)
 8006a9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a9e:	4b43      	ldr	r3, [pc, #268]	@ (8006bac <pvPortMalloc+0x190>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aa4:	e004      	b.n	8006ab0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d903      	bls.n	8006ac2 <pvPortMalloc+0xa6>
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1f1      	bne.n	8006aa6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ac2:	4b37      	ldr	r3, [pc, #220]	@ (8006ba0 <pvPortMalloc+0x184>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d051      	beq.n	8006b70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	4413      	add	r3, r2
 8006ad4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	1ad2      	subs	r2, r2, r3
 8006ae6:	2308      	movs	r3, #8
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d920      	bls.n	8006b30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4413      	add	r3, r2
 8006af4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	f003 0307 	and.w	r3, r3, #7
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00b      	beq.n	8006b18 <pvPortMalloc+0xfc>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	613b      	str	r3, [r7, #16]
}
 8006b12:	bf00      	nop
 8006b14:	bf00      	nop
 8006b16:	e7fd      	b.n	8006b14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	1ad2      	subs	r2, r2, r3
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b2a:	69b8      	ldr	r0, [r7, #24]
 8006b2c:	f000 f90a 	bl	8006d44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b30:	4b1d      	ldr	r3, [pc, #116]	@ (8006ba8 <pvPortMalloc+0x18c>)
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ba8 <pvPortMalloc+0x18c>)
 8006b3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ba8 <pvPortMalloc+0x18c>)
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4b1b      	ldr	r3, [pc, #108]	@ (8006bb0 <pvPortMalloc+0x194>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d203      	bcs.n	8006b52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b4a:	4b17      	ldr	r3, [pc, #92]	@ (8006ba8 <pvPortMalloc+0x18c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a18      	ldr	r2, [pc, #96]	@ (8006bb0 <pvPortMalloc+0x194>)
 8006b50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	4b13      	ldr	r3, [pc, #76]	@ (8006ba4 <pvPortMalloc+0x188>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b66:	4b13      	ldr	r3, [pc, #76]	@ (8006bb4 <pvPortMalloc+0x198>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	4a11      	ldr	r2, [pc, #68]	@ (8006bb4 <pvPortMalloc+0x198>)
 8006b6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b70:	f7fe fcea 	bl	8005548 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <pvPortMalloc+0x17a>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	60fb      	str	r3, [r7, #12]
}
 8006b90:	bf00      	nop
 8006b92:	bf00      	nop
 8006b94:	e7fd      	b.n	8006b92 <pvPortMalloc+0x176>
	return pvReturn;
 8006b96:	69fb      	ldr	r3, [r7, #28]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3728      	adds	r7, #40	@ 0x28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20004db0 	.word	0x20004db0
 8006ba4:	20004dc4 	.word	0x20004dc4
 8006ba8:	20004db4 	.word	0x20004db4
 8006bac:	20004da8 	.word	0x20004da8
 8006bb0:	20004db8 	.word	0x20004db8
 8006bb4:	20004dbc 	.word	0x20004dbc

08006bb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d04f      	beq.n	8006c6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bca:	2308      	movs	r3, #8
 8006bcc:	425b      	negs	r3, r3
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	4b25      	ldr	r3, [pc, #148]	@ (8006c74 <vPortFree+0xbc>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4013      	ands	r3, r2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10b      	bne.n	8006bfe <vPortFree+0x46>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	60fb      	str	r3, [r7, #12]
}
 8006bf8:	bf00      	nop
 8006bfa:	bf00      	nop
 8006bfc:	e7fd      	b.n	8006bfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00b      	beq.n	8006c1e <vPortFree+0x66>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	60bb      	str	r3, [r7, #8]
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	e7fd      	b.n	8006c1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	4b14      	ldr	r3, [pc, #80]	@ (8006c74 <vPortFree+0xbc>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4013      	ands	r3, r2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01e      	beq.n	8006c6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d11a      	bne.n	8006c6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	4b0e      	ldr	r3, [pc, #56]	@ (8006c74 <vPortFree+0xbc>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	43db      	mvns	r3, r3
 8006c3e:	401a      	ands	r2, r3
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c44:	f7fe fc72 	bl	800552c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c78 <vPortFree+0xc0>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4413      	add	r3, r2
 8006c52:	4a09      	ldr	r2, [pc, #36]	@ (8006c78 <vPortFree+0xc0>)
 8006c54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c56:	6938      	ldr	r0, [r7, #16]
 8006c58:	f000 f874 	bl	8006d44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c5c:	4b07      	ldr	r3, [pc, #28]	@ (8006c7c <vPortFree+0xc4>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3301      	adds	r3, #1
 8006c62:	4a06      	ldr	r2, [pc, #24]	@ (8006c7c <vPortFree+0xc4>)
 8006c64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c66:	f7fe fc6f 	bl	8005548 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c6a:	bf00      	nop
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20004dc4 	.word	0x20004dc4
 8006c78:	20004db4 	.word	0x20004db4
 8006c7c:	20004dc0 	.word	0x20004dc0

08006c80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006c8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c8c:	4b27      	ldr	r3, [pc, #156]	@ (8006d2c <prvHeapInit+0xac>)
 8006c8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f003 0307 	and.w	r3, r3, #7
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00c      	beq.n	8006cb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3307      	adds	r3, #7
 8006c9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f023 0307 	bic.w	r3, r3, #7
 8006ca6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	4a1f      	ldr	r2, [pc, #124]	@ (8006d2c <prvHeapInit+0xac>)
 8006cb0:	4413      	add	r3, r2
 8006cb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d30 <prvHeapInit+0xb0>)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8006d30 <prvHeapInit+0xb0>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	4413      	add	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ccc:	2208      	movs	r2, #8
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	1a9b      	subs	r3, r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0307 	bic.w	r3, r3, #7
 8006cda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4a15      	ldr	r2, [pc, #84]	@ (8006d34 <prvHeapInit+0xb4>)
 8006ce0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ce2:	4b14      	ldr	r3, [pc, #80]	@ (8006d34 <prvHeapInit+0xb4>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cea:	4b12      	ldr	r3, [pc, #72]	@ (8006d34 <prvHeapInit+0xb4>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	1ad2      	subs	r2, r2, r3
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d00:	4b0c      	ldr	r3, [pc, #48]	@ (8006d34 <prvHeapInit+0xb4>)
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d38 <prvHeapInit+0xb8>)
 8006d0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	4a09      	ldr	r2, [pc, #36]	@ (8006d3c <prvHeapInit+0xbc>)
 8006d16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d18:	4b09      	ldr	r3, [pc, #36]	@ (8006d40 <prvHeapInit+0xc0>)
 8006d1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d1e:	601a      	str	r2, [r3, #0]
}
 8006d20:	bf00      	nop
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	200011a8 	.word	0x200011a8
 8006d30:	20004da8 	.word	0x20004da8
 8006d34:	20004db0 	.word	0x20004db0
 8006d38:	20004db8 	.word	0x20004db8
 8006d3c:	20004db4 	.word	0x20004db4
 8006d40:	20004dc4 	.word	0x20004dc4

08006d44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d4c:	4b28      	ldr	r3, [pc, #160]	@ (8006df0 <prvInsertBlockIntoFreeList+0xac>)
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	e002      	b.n	8006d58 <prvInsertBlockIntoFreeList+0x14>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d8f7      	bhi.n	8006d52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d108      	bne.n	8006d86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	441a      	add	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	441a      	add	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d118      	bne.n	8006dcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	4b15      	ldr	r3, [pc, #84]	@ (8006df4 <prvInsertBlockIntoFreeList+0xb0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d00d      	beq.n	8006dc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	441a      	add	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	e008      	b.n	8006dd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006df4 <prvInsertBlockIntoFreeList+0xb0>)
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	e003      	b.n	8006dd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d002      	beq.n	8006de2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006de2:	bf00      	nop
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	20004da8 	.word	0x20004da8
 8006df4:	20004db0 	.word	0x20004db0

08006df8 <memset>:
 8006df8:	4402      	add	r2, r0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d100      	bne.n	8006e02 <memset+0xa>
 8006e00:	4770      	bx	lr
 8006e02:	f803 1b01 	strb.w	r1, [r3], #1
 8006e06:	e7f9      	b.n	8006dfc <memset+0x4>

08006e08 <__libc_init_array>:
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8006e40 <__libc_init_array+0x38>)
 8006e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8006e44 <__libc_init_array+0x3c>)
 8006e0e:	1b64      	subs	r4, r4, r5
 8006e10:	10a4      	asrs	r4, r4, #2
 8006e12:	2600      	movs	r6, #0
 8006e14:	42a6      	cmp	r6, r4
 8006e16:	d109      	bne.n	8006e2c <__libc_init_array+0x24>
 8006e18:	4d0b      	ldr	r5, [pc, #44]	@ (8006e48 <__libc_init_array+0x40>)
 8006e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8006e4c <__libc_init_array+0x44>)
 8006e1c:	f000 f826 	bl	8006e6c <_init>
 8006e20:	1b64      	subs	r4, r4, r5
 8006e22:	10a4      	asrs	r4, r4, #2
 8006e24:	2600      	movs	r6, #0
 8006e26:	42a6      	cmp	r6, r4
 8006e28:	d105      	bne.n	8006e36 <__libc_init_array+0x2e>
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}
 8006e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e30:	4798      	blx	r3
 8006e32:	3601      	adds	r6, #1
 8006e34:	e7ee      	b.n	8006e14 <__libc_init_array+0xc>
 8006e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e3a:	4798      	blx	r3
 8006e3c:	3601      	adds	r6, #1
 8006e3e:	e7f2      	b.n	8006e26 <__libc_init_array+0x1e>
 8006e40:	08006ef4 	.word	0x08006ef4
 8006e44:	08006ef4 	.word	0x08006ef4
 8006e48:	08006ef4 	.word	0x08006ef4
 8006e4c:	08006ef8 	.word	0x08006ef8

08006e50 <memcpy>:
 8006e50:	440a      	add	r2, r1
 8006e52:	4291      	cmp	r1, r2
 8006e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e58:	d100      	bne.n	8006e5c <memcpy+0xc>
 8006e5a:	4770      	bx	lr
 8006e5c:	b510      	push	{r4, lr}
 8006e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e66:	4291      	cmp	r1, r2
 8006e68:	d1f9      	bne.n	8006e5e <memcpy+0xe>
 8006e6a:	bd10      	pop	{r4, pc}

08006e6c <_init>:
 8006e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6e:	bf00      	nop
 8006e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e72:	bc08      	pop	{r3}
 8006e74:	469e      	mov	lr, r3
 8006e76:	4770      	bx	lr

08006e78 <_fini>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	bf00      	nop
 8006e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7e:	bc08      	pop	{r3}
 8006e80:	469e      	mov	lr, r3
 8006e82:	4770      	bx	lr
