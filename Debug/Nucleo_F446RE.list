
Nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007274  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007444  08007444  00008444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074dc  080074dc  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080074dc  080074dc  000084dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074e4  080074e4  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074e4  080074e4  000084e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074e8  080074e8  000084e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080074ec  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005070  20000010  080074fc  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005080  080074fc  00009080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fdbe  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004423  00000000  00000000  00028dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c70  00000000  00000000  0002d228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000163e  00000000  00000000  0002ee98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004895  00000000  00000000  000304d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000219b2  00000000  00000000  00034d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee0f6  00000000  00000000  0005671d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144813  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007980  00000000  00000000  00144858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0014c1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800742c 	.word	0x0800742c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800742c 	.word	0x0800742c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <LcdToggleE>:
* Toggling the LCD Enable Pin
*
************************************************/

void LcdToggleE(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	LCD_E_1();
 8000540:	2201      	movs	r2, #1
 8000542:	2180      	movs	r1, #128	@ 0x80
 8000544:	4807      	ldr	r0, [pc, #28]	@ (8000564 <LcdToggleE+0x28>)
 8000546:	f002 f8d1 	bl	80026ec <HAL_GPIO_WritePin>
	DELAY_MS(1);
 800054a:	2001      	movs	r0, #1
 800054c:	f000 fff2 	bl	8001534 <HAL_Delay>
	LCD_E_0();
 8000550:	2200      	movs	r2, #0
 8000552:	2180      	movs	r1, #128	@ 0x80
 8000554:	4803      	ldr	r0, [pc, #12]	@ (8000564 <LcdToggleE+0x28>)
 8000556:	f002 f8c9 	bl	80026ec <HAL_GPIO_WritePin>
	DELAY_MS(1);
 800055a:	2001      	movs	r0, #1
 800055c:	f000 ffea 	bl	8001534 <HAL_Delay>
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40020800 	.word	0x40020800

08000568 <LcdWrite>:


void LcdWrite(uint8_t data, uint8_t rs)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	460a      	mov	r2, r1
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	4613      	mov	r3, r2
 8000576:	71bb      	strb	r3, [r7, #6]
	if (rs == 1)
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d106      	bne.n	800058c <LcdWrite+0x24>
	{
		LCD_RS_1();
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000584:	4835      	ldr	r0, [pc, #212]	@ (800065c <LcdWrite+0xf4>)
 8000586:	f002 f8b1 	bl	80026ec <HAL_GPIO_WritePin>
 800058a:	e005      	b.n	8000598 <LcdWrite+0x30>
	}
	else
	{
		LCD_RS_0();
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000592:	4832      	ldr	r0, [pc, #200]	@ (800065c <LcdWrite+0xf4>)
 8000594:	f002 f8aa 	bl	80026ec <HAL_GPIO_WritePin>
	}
	/* write high nibble */
	LCD_DATA_0();
 8000598:	f000 f8be 	bl	8000718 <ClearData>
	if (data & 0x80)
 800059c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	da05      	bge.n	80005b0 <LcdWrite+0x48>
	{
		LCD_D7_1();
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005aa:	482c      	ldr	r0, [pc, #176]	@ (800065c <LcdWrite+0xf4>)
 80005ac:	f002 f89e 	bl	80026ec <HAL_GPIO_WritePin>
	}
	if (data & 0x40)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d005      	beq.n	80005c6 <LcdWrite+0x5e>
	{
		LCD_D6_1();
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c0:	4827      	ldr	r0, [pc, #156]	@ (8000660 <LcdWrite+0xf8>)
 80005c2:	f002 f893 	bl	80026ec <HAL_GPIO_WritePin>
	}
	if (data & 0x20)
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 0320 	and.w	r3, r3, #32
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d004      	beq.n	80005da <LcdWrite+0x72>
	{
		LCD_D5_1();
 80005d0:	2201      	movs	r2, #1
 80005d2:	2120      	movs	r1, #32
 80005d4:	4822      	ldr	r0, [pc, #136]	@ (8000660 <LcdWrite+0xf8>)
 80005d6:	f002 f889 	bl	80026ec <HAL_GPIO_WritePin>
	}
	if (data & 0x10)
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 0310 	and.w	r3, r3, #16
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d004      	beq.n	80005ee <LcdWrite+0x86>
	{
		LCD_D4_1();
 80005e4:	2201      	movs	r2, #1
 80005e6:	2110      	movs	r1, #16
 80005e8:	481d      	ldr	r0, [pc, #116]	@ (8000660 <LcdWrite+0xf8>)
 80005ea:	f002 f87f 	bl	80026ec <HAL_GPIO_WritePin>
	}
	LcdToggleE();
 80005ee:	f7ff ffa5 	bl	800053c <LcdToggleE>

	/* write low nibble */
	LCD_DATA_0();
 80005f2:	f000 f891 	bl	8000718 <ClearData>
	if (data & 0x08)
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d005      	beq.n	800060c <LcdWrite+0xa4>
	{
		LCD_D7_1();
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000606:	4815      	ldr	r0, [pc, #84]	@ (800065c <LcdWrite+0xf4>)
 8000608:	f002 f870 	bl	80026ec <HAL_GPIO_WritePin>
	}
	if (data & 0x04)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	2b00      	cmp	r3, #0
 8000614:	d005      	beq.n	8000622 <LcdWrite+0xba>
	{
		LCD_D6_1();
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800061c:	4810      	ldr	r0, [pc, #64]	@ (8000660 <LcdWrite+0xf8>)
 800061e:	f002 f865 	bl	80026ec <HAL_GPIO_WritePin>
	}
	if (data & 0x02)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 0302 	and.w	r3, r3, #2
 8000628:	2b00      	cmp	r3, #0
 800062a:	d004      	beq.n	8000636 <LcdWrite+0xce>
	{
		LCD_D5_1();
 800062c:	2201      	movs	r2, #1
 800062e:	2120      	movs	r1, #32
 8000630:	480b      	ldr	r0, [pc, #44]	@ (8000660 <LcdWrite+0xf8>)
 8000632:	f002 f85b 	bl	80026ec <HAL_GPIO_WritePin>
	}
	if (data & 0x01)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	2b00      	cmp	r3, #0
 800063e:	d004      	beq.n	800064a <LcdWrite+0xe2>
	{
		LCD_D4_1();
 8000640:	2201      	movs	r2, #1
 8000642:	2110      	movs	r1, #16
 8000644:	4806      	ldr	r0, [pc, #24]	@ (8000660 <LcdWrite+0xf8>)
 8000646:	f002 f851 	bl	80026ec <HAL_GPIO_WritePin>
	}
	LcdToggleE();
 800064a:	f7ff ff77 	bl	800053c <LcdToggleE>
	
	/* High impedance -> inactive state ? */
	//LCD_DATA_H()
	
	DELAY_MS(1);
 800064e:	2001      	movs	r0, #1
 8000650:	f000 ff70 	bl	8001534 <HAL_Delay>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020000 	.word	0x40020000
 8000660:	40020400 	.word	0x40020400

08000664 <LcdPortInit_GPIO>:
* Returns:  none
*
***********************************************/

void LcdPortInit_GPIO(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	LCD_PORT_0();
 8000668:	f000 f82a 	bl	80006c0 <ClearPort>
	DELAY_MS(100);
 800066c:	2064      	movs	r0, #100	@ 0x64
 800066e:	f000 ff61 	bl	8001534 <HAL_Delay>
	
	LCD_D5_1();
 8000672:	2201      	movs	r2, #1
 8000674:	2120      	movs	r1, #32
 8000676:	4811      	ldr	r0, [pc, #68]	@ (80006bc <LcdPortInit_GPIO+0x58>)
 8000678:	f002 f838 	bl	80026ec <HAL_GPIO_WritePin>
	LCD_D4_1();
 800067c:	2201      	movs	r2, #1
 800067e:	2110      	movs	r1, #16
 8000680:	480e      	ldr	r0, [pc, #56]	@ (80006bc <LcdPortInit_GPIO+0x58>)
 8000682:	f002 f833 	bl	80026ec <HAL_GPIO_WritePin>
	
	LcdToggleE();
 8000686:	f7ff ff59 	bl	800053c <LcdToggleE>
	
	DELAY_MS(5);
 800068a:	2005      	movs	r0, #5
 800068c:	f000 ff52 	bl	8001534 <HAL_Delay>
	
	LcdToggleE();
 8000690:	f7ff ff54 	bl	800053c <LcdToggleE>
	
	DELAY_MS(1);
 8000694:	2001      	movs	r0, #1
 8000696:	f000 ff4d 	bl	8001534 <HAL_Delay>
	
	LcdToggleE();
 800069a:	f7ff ff4f 	bl	800053c <LcdToggleE>
	
	DELAY_MS(1);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 ff48 	bl	8001534 <HAL_Delay>
	
	LCD_D4_0();
 80006a4:	2200      	movs	r2, #0
 80006a6:	2110      	movs	r1, #16
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <LcdPortInit_GPIO+0x58>)
 80006aa:	f002 f81f 	bl	80026ec <HAL_GPIO_WritePin>
	
	LcdToggleE();
 80006ae:	f7ff ff45 	bl	800053c <LcdToggleE>
	
	DELAY_MS(5);
 80006b2:	2005      	movs	r0, #5
 80006b4:	f000 ff3e 	bl	8001534 <HAL_Delay>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40020400 	.word	0x40020400

080006c0 <ClearPort>:

static void ClearPort(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	LCD_RS_0();
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ca:	4810      	ldr	r0, [pc, #64]	@ (800070c <ClearPort+0x4c>)
 80006cc:	f002 f80e 	bl	80026ec <HAL_GPIO_WritePin>
	LCD_E_0();
 80006d0:	2200      	movs	r2, #0
 80006d2:	2180      	movs	r1, #128	@ 0x80
 80006d4:	480e      	ldr	r0, [pc, #56]	@ (8000710 <ClearPort+0x50>)
 80006d6:	f002 f809 	bl	80026ec <HAL_GPIO_WritePin>
	LCD_D7_0();
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006e0:	480a      	ldr	r0, [pc, #40]	@ (800070c <ClearPort+0x4c>)
 80006e2:	f002 f803 	bl	80026ec <HAL_GPIO_WritePin>
	LCD_D6_0();
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ec:	4809      	ldr	r0, [pc, #36]	@ (8000714 <ClearPort+0x54>)
 80006ee:	f001 fffd 	bl	80026ec <HAL_GPIO_WritePin>
	LCD_D5_0();
 80006f2:	2200      	movs	r2, #0
 80006f4:	2120      	movs	r1, #32
 80006f6:	4807      	ldr	r0, [pc, #28]	@ (8000714 <ClearPort+0x54>)
 80006f8:	f001 fff8 	bl	80026ec <HAL_GPIO_WritePin>
	LCD_D4_0();
 80006fc:	2200      	movs	r2, #0
 80006fe:	2110      	movs	r1, #16
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <ClearPort+0x54>)
 8000702:	f001 fff3 	bl	80026ec <HAL_GPIO_WritePin>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40020000 	.word	0x40020000
 8000710:	40020800 	.word	0x40020800
 8000714:	40020400 	.word	0x40020400

08000718 <ClearData>:

static void ClearData(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	LCD_D7_0();
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000722:	480a      	ldr	r0, [pc, #40]	@ (800074c <ClearData+0x34>)
 8000724:	f001 ffe2 	bl	80026ec <HAL_GPIO_WritePin>
	LCD_D6_0();
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800072e:	4808      	ldr	r0, [pc, #32]	@ (8000750 <ClearData+0x38>)
 8000730:	f001 ffdc 	bl	80026ec <HAL_GPIO_WritePin>
	LCD_D5_0();
 8000734:	2200      	movs	r2, #0
 8000736:	2120      	movs	r1, #32
 8000738:	4805      	ldr	r0, [pc, #20]	@ (8000750 <ClearData+0x38>)
 800073a:	f001 ffd7 	bl	80026ec <HAL_GPIO_WritePin>
	LCD_D4_0();
 800073e:	2200      	movs	r2, #0
 8000740:	2110      	movs	r1, #16
 8000742:	4803      	ldr	r0, [pc, #12]	@ (8000750 <ClearData+0x38>)
 8000744:	f001 ffd2 	bl	80026ec <HAL_GPIO_WritePin>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40020000 	.word	0x40020000
 8000750:	40020400 	.word	0x40020400

08000754 <LcdInit_GPIO>:
*                    LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
* Returns:  none
*
***********************************************/
void LcdInit_GPIO(uint8_t dispMode)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  LcdPortInit_GPIO();
 800075e:	f7ff ff81 	bl	8000664 <LcdPortInit_GPIO>

  LcdWrite(LCD_FUNCTION_DEFAULT, 0);
 8000762:	2100      	movs	r1, #0
 8000764:	2028      	movs	r0, #40	@ 0x28
 8000766:	f7ff feff 	bl	8000568 <LcdWrite>

  DELAY_MS(5);
 800076a:	2005      	movs	r0, #5
 800076c:	f000 fee2 	bl	8001534 <HAL_Delay>

  LcdWrite(LCD_DISP_OFF, 0);
 8000770:	2100      	movs	r1, #0
 8000772:	2008      	movs	r0, #8
 8000774:	f7ff fef8 	bl	8000568 <LcdWrite>

  LcdClrScr();
 8000778:	f000 f809 	bl	800078e <LcdClrScr>

  LcdWrite(dispMode, 0);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fef1 	bl	8000568 <LcdWrite>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <LcdClrScr>:
* LCD clear screen
*
***********************************************/

void LcdClrScr(void)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	af00      	add	r7, sp, #0
    LcdWrite(0x01, 0);
 8000792:	2100      	movs	r1, #0
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff fee7 	bl	8000568 <LcdWrite>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a4:	f000 fe84 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a8:	f000 f836 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ac:	f000 fa70 	bl	8000c90 <MX_GPIO_Init>
  MX_DMA_Init();
 80007b0:	f000 fa4e 	bl	8000c50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007b4:	f000 fa22 	bl	8000bfc <MX_USART2_UART_Init>
  MX_DAC_Init();
 80007b8:	f000 f938 	bl	8000a2c <MX_DAC_Init>
  MX_ADC1_Init();
 80007bc:	f000 f89a 	bl	80008f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80007c0:	f000 f95e 	bl	8000a80 <MX_I2C1_Init>
  MX_TIM4_Init();
 80007c4:	f000 f9c0 	bl	8000b48 <MX_TIM4_Init>
  MX_SPI1_Init();
 80007c8:	f000 f988 	bl	8000adc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LcdInit_GPIO(LCD_DISP_ON_CURSOR_BLINK);
 80007cc:	200f      	movs	r0, #15
 80007ce:	f7ff ffc1 	bl	8000754 <LcdInit_GPIO>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007d2:	f004 f86d 	bl	80048b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <main+0x60>)
 80007d8:	2100      	movs	r1, #0
 80007da:	480a      	ldr	r0, [pc, #40]	@ (8000804 <main+0x64>)
 80007dc:	f004 f8b2 	bl	8004944 <osThreadNew>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4a09      	ldr	r2, [pc, #36]	@ (8000808 <main+0x68>)
 80007e4:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80007e6:	4a09      	ldr	r2, [pc, #36]	@ (800080c <main+0x6c>)
 80007e8:	2100      	movs	r1, #0
 80007ea:	4809      	ldr	r0, [pc, #36]	@ (8000810 <main+0x70>)
 80007ec:	f004 f8aa 	bl	8004944 <osThreadNew>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4a08      	ldr	r2, [pc, #32]	@ (8000814 <main+0x74>)
 80007f4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007f6:	f004 f87f 	bl	80048f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fa:	bf00      	nop
 80007fc:	e7fd      	b.n	80007fa <main+0x5a>
 80007fe:	bf00      	nop
 8000800:	08007474 	.word	0x08007474
 8000804:	08000dc5 	.word	0x08000dc5
 8000808:	20000224 	.word	0x20000224
 800080c:	08007498 	.word	0x08007498
 8000810:	08000dd5 	.word	0x08000dd5
 8000814:	20000484 	.word	0x20000484

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	@ 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2234      	movs	r2, #52	@ 0x34
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f006 fdc6 	bl	80073b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b2a      	ldr	r3, [pc, #168]	@ (80008ec <SystemClock_Config+0xd4>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000844:	4a29      	ldr	r2, [pc, #164]	@ (80008ec <SystemClock_Config+0xd4>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	@ 0x40
 800084c:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <SystemClock_Config+0xd4>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <SystemClock_Config+0xd8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000864:	4a22      	ldr	r2, [pc, #136]	@ (80008f0 <SystemClock_Config+0xd8>)
 8000866:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	4b20      	ldr	r3, [pc, #128]	@ (80008f0 <SystemClock_Config+0xd8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000878:	2302      	movs	r3, #2
 800087a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087c:	2301      	movs	r3, #1
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000880:	2310      	movs	r3, #16
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000884:	2302      	movs	r3, #2
 8000886:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000888:	2300      	movs	r3, #0
 800088a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800088c:	2310      	movs	r3, #16
 800088e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000890:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000894:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000896:	2304      	movs	r3, #4
 8000898:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800089e:	2302      	movs	r3, #2
 80008a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 fbfa 	bl	80030a0 <HAL_RCC_OscConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008b2:	f000 faa9 	bl	8000e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	230f      	movs	r3, #15
 80008b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ba:	2302      	movs	r3, #2
 80008bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	2102      	movs	r1, #2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f002 f868 	bl	80029a8 <HAL_RCC_ClockConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008de:	f000 fa93 	bl	8000e08 <Error_Handler>
  }
}
 80008e2:	bf00      	nop
 80008e4:	3750      	adds	r7, #80	@ 0x50
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000

080008f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000906:	4b45      	ldr	r3, [pc, #276]	@ (8000a1c <MX_ADC1_Init+0x128>)
 8000908:	4a45      	ldr	r2, [pc, #276]	@ (8000a20 <MX_ADC1_Init+0x12c>)
 800090a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800090c:	4b43      	ldr	r3, [pc, #268]	@ (8000a1c <MX_ADC1_Init+0x128>)
 800090e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000912:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000914:	4b41      	ldr	r3, [pc, #260]	@ (8000a1c <MX_ADC1_Init+0x128>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800091a:	4b40      	ldr	r3, [pc, #256]	@ (8000a1c <MX_ADC1_Init+0x128>)
 800091c:	2201      	movs	r2, #1
 800091e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000920:	4b3e      	ldr	r3, [pc, #248]	@ (8000a1c <MX_ADC1_Init+0x128>)
 8000922:	2200      	movs	r2, #0
 8000924:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000926:	4b3d      	ldr	r3, [pc, #244]	@ (8000a1c <MX_ADC1_Init+0x128>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092e:	4b3b      	ldr	r3, [pc, #236]	@ (8000a1c <MX_ADC1_Init+0x128>)
 8000930:	2200      	movs	r2, #0
 8000932:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000934:	4b39      	ldr	r3, [pc, #228]	@ (8000a1c <MX_ADC1_Init+0x128>)
 8000936:	4a3b      	ldr	r2, [pc, #236]	@ (8000a24 <MX_ADC1_Init+0x130>)
 8000938:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800093a:	4b38      	ldr	r3, [pc, #224]	@ (8000a1c <MX_ADC1_Init+0x128>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000940:	4b36      	ldr	r3, [pc, #216]	@ (8000a1c <MX_ADC1_Init+0x128>)
 8000942:	2206      	movs	r2, #6
 8000944:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000946:	4b35      	ldr	r3, [pc, #212]	@ (8000a1c <MX_ADC1_Init+0x128>)
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094e:	4b33      	ldr	r3, [pc, #204]	@ (8000a1c <MX_ADC1_Init+0x128>)
 8000950:	2201      	movs	r2, #1
 8000952:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000954:	4831      	ldr	r0, [pc, #196]	@ (8000a1c <MX_ADC1_Init+0x128>)
 8000956:	f000 fe11 	bl	800157c <HAL_ADC_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000960:	f000 fa52 	bl	8000e08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000964:	2300      	movs	r3, #0
 8000966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000968:	2301      	movs	r3, #1
 800096a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800096c:	2301      	movs	r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	4619      	mov	r1, r3
 8000974:	4829      	ldr	r0, [pc, #164]	@ (8000a1c <MX_ADC1_Init+0x128>)
 8000976:	f000 fe45 	bl	8001604 <HAL_ADC_ConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000980:	f000 fa42 	bl	8000e08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000984:	2301      	movs	r3, #1
 8000986:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	4822      	ldr	r0, [pc, #136]	@ (8000a1c <MX_ADC1_Init+0x128>)
 8000992:	f000 fe37 	bl	8001604 <HAL_ADC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800099c:	f000 fa34 	bl	8000e08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009a0:	2308      	movs	r3, #8
 80009a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80009a4:	2303      	movs	r3, #3
 80009a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	481b      	ldr	r0, [pc, #108]	@ (8000a1c <MX_ADC1_Init+0x128>)
 80009ae:	f000 fe29 	bl	8001604 <HAL_ADC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80009b8:	f000 fa26 	bl	8000e08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009bc:	230a      	movs	r3, #10
 80009be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80009c0:	2304      	movs	r3, #4
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4814      	ldr	r0, [pc, #80]	@ (8000a1c <MX_ADC1_Init+0x128>)
 80009ca:	f000 fe1b 	bl	8001604 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80009d4:	f000 fa18 	bl	8000e08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009d8:	230b      	movs	r3, #11
 80009da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80009dc:	2305      	movs	r3, #5
 80009de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e0:	463b      	mov	r3, r7
 80009e2:	4619      	mov	r1, r3
 80009e4:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <MX_ADC1_Init+0x128>)
 80009e6:	f000 fe0d 	bl	8001604 <HAL_ADC_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80009f0:	f000 fa0a 	bl	8000e08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <MX_ADC1_Init+0x134>)
 80009f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80009f8:	2306      	movs	r3, #6
 80009fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80009fc:	2303      	movs	r3, #3
 80009fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_ADC1_Init+0x128>)
 8000a06:	f000 fdfd 	bl	8001604 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000a10:	f000 f9fa 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000002c 	.word	0x2000002c
 8000a20:	40012000 	.word	0x40012000
 8000a24:	0f000001 	.word	0x0f000001
 8000a28:	10000012 	.word	0x10000012

08000a2c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a32:	463b      	mov	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_DAC_Init+0x4c>)
 8000a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a7c <MX_DAC_Init+0x50>)
 8000a3e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000a40:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <MX_DAC_Init+0x4c>)
 8000a42:	f001 f8ef 	bl	8001c24 <HAL_DAC_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000a4c:	f000 f9dc 	bl	8000e08 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <MX_DAC_Init+0x4c>)
 8000a60:	f001 f962 	bl	8001d28 <HAL_DAC_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000a6a:	f000 f9cd 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200000d4 	.word	0x200000d4
 8000a7c:	40007400 	.word	0x40007400

08000a80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000a86:	4a13      	ldr	r2, [pc, #76]	@ (8000ad4 <MX_I2C1_Init+0x54>)
 8000a88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000a8c:	4a12      	ldr	r2, [pc, #72]	@ (8000ad8 <MX_I2C1_Init+0x58>)
 8000a8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000a9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aa2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <MX_I2C1_Init+0x50>)
 8000abe:	f001 fe2f 	bl	8002720 <HAL_I2C_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ac8:	f000 f99e 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200000e8 	.word	0x200000e8
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	000186a0 	.word	0x000186a0

08000adc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ae0:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <MX_SPI1_Init+0x64>)
 8000ae2:	4a18      	ldr	r2, [pc, #96]	@ (8000b44 <MX_SPI1_Init+0x68>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ae6:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <MX_SPI1_Init+0x64>)
 8000ae8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <MX_SPI1_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <MX_SPI1_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <MX_SPI1_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <MX_SPI1_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <MX_SPI1_Init+0x64>)
 8000b08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <MX_SPI1_Init+0x64>)
 8000b10:	2220      	movs	r2, #32
 8000b12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <MX_SPI1_Init+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <MX_SPI1_Init+0x64>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b20:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <MX_SPI1_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <MX_SPI1_Init+0x64>)
 8000b28:	220a      	movs	r2, #10
 8000b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	@ (8000b40 <MX_SPI1_Init+0x64>)
 8000b2e:	f002 fd55 	bl	80035dc <HAL_SPI_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b38:	f000 f966 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	2000013c 	.word	0x2000013c
 8000b44:	40013000 	.word	0x40013000

08000b48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4e:	f107 0320 	add.w	r3, r7, #32
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
 8000b66:	615a      	str	r2, [r3, #20]
 8000b68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b6a:	4b22      	ldr	r3, [pc, #136]	@ (8000bf4 <MX_TIM4_Init+0xac>)
 8000b6c:	4a22      	ldr	r2, [pc, #136]	@ (8000bf8 <MX_TIM4_Init+0xb0>)
 8000b6e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b70:	4b20      	ldr	r3, [pc, #128]	@ (8000bf4 <MX_TIM4_Init+0xac>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b76:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <MX_TIM4_Init+0xac>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <MX_TIM4_Init+0xac>)
 8000b7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <MX_TIM4_Init+0xac>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <MX_TIM4_Init+0xac>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b90:	4818      	ldr	r0, [pc, #96]	@ (8000bf4 <MX_TIM4_Init+0xac>)
 8000b92:	f002 fe75 	bl	8003880 <HAL_TIM_PWM_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000b9c:	f000 f934 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ba8:	f107 0320 	add.w	r3, r7, #32
 8000bac:	4619      	mov	r1, r3
 8000bae:	4811      	ldr	r0, [pc, #68]	@ (8000bf4 <MX_TIM4_Init+0xac>)
 8000bb0:	f003 fae6 	bl	8004180 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000bba:	f000 f925 	bl	8000e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbe:	2360      	movs	r3, #96	@ 0x60
 8000bc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4807      	ldr	r0, [pc, #28]	@ (8000bf4 <MX_TIM4_Init+0xac>)
 8000bd6:	f002 ff93 	bl	8003b00 <HAL_TIM_PWM_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000be0:	f000 f912 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000be4:	4803      	ldr	r0, [pc, #12]	@ (8000bf4 <MX_TIM4_Init+0xac>)
 8000be6:	f000 faef 	bl	80011c8 <HAL_TIM_MspPostInit>

}
 8000bea:	bf00      	nop
 8000bec:	3728      	adds	r7, #40	@ 0x28
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000194 	.word	0x20000194
 8000bf8:	40000800 	.word	0x40000800

08000bfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <MX_USART2_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c34:	f003 fb34 	bl	80042a0 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f8e3 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200001dc 	.word	0x200001dc
 8000c4c:	40004400 	.word	0x40004400

08000c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <MX_DMA_Init+0x3c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c8c <MX_DMA_Init+0x3c>)
 8000c60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <MX_DMA_Init+0x3c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2105      	movs	r1, #5
 8000c76:	2038      	movs	r0, #56	@ 0x38
 8000c78:	f000 ffaa 	bl	8001bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c7c:	2038      	movs	r0, #56	@ 0x38
 8000c7e:	f000 ffc3 	bl	8001c08 <HAL_NVIC_EnableIRQ>

}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	@ 0x28
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b42      	ldr	r3, [pc, #264]	@ (8000db4 <MX_GPIO_Init+0x124>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a41      	ldr	r2, [pc, #260]	@ (8000db4 <MX_GPIO_Init+0x124>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8000db4 <MX_GPIO_Init+0x124>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8000db4 <MX_GPIO_Init+0x124>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a3a      	ldr	r2, [pc, #232]	@ (8000db4 <MX_GPIO_Init+0x124>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b38      	ldr	r3, [pc, #224]	@ (8000db4 <MX_GPIO_Init+0x124>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	4b34      	ldr	r3, [pc, #208]	@ (8000db4 <MX_GPIO_Init+0x124>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a33      	ldr	r2, [pc, #204]	@ (8000db4 <MX_GPIO_Init+0x124>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b31      	ldr	r3, [pc, #196]	@ (8000db4 <MX_GPIO_Init+0x124>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8000db4 <MX_GPIO_Init+0x124>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a2c      	ldr	r2, [pc, #176]	@ (8000db4 <MX_GPIO_Init+0x124>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000db4 <MX_GPIO_Init+0x124>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D4_Pin|LCD_D5_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8000d1c:	4826      	ldr	r0, [pc, #152]	@ (8000db8 <MX_GPIO_Init+0x128>)
 8000d1e:	f001 fce5 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2180      	movs	r1, #128	@ 0x80
 8000d26:	4825      	ldr	r0, [pc, #148]	@ (8000dbc <MX_GPIO_Init+0x12c>)
 8000d28:	f001 fce0 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000d32:	4823      	ldr	r0, [pc, #140]	@ (8000dc0 <MX_GPIO_Init+0x130>)
 8000d34:	f001 fcda 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	481b      	ldr	r0, [pc, #108]	@ (8000dbc <MX_GPIO_Init+0x12c>)
 8000d50:	f001 fb38 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D4_Pin LCD_D5_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D4_Pin|LCD_D5_Pin;
 8000d54:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <MX_GPIO_Init+0x128>)
 8000d6e:	f001 fb29 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_E_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin;
 8000d72:	2380      	movs	r3, #128	@ 0x80
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_E_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	480c      	ldr	r0, [pc, #48]	@ (8000dbc <MX_GPIO_Init+0x12c>)
 8000d8a:	f001 fb1b 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 8000d8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	4806      	ldr	r0, [pc, #24]	@ (8000dc0 <MX_GPIO_Init+0x130>)
 8000da8:	f001 fb0c 	bl	80023c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	@ 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020400 	.word	0x40020400
 8000dbc:	40020800 	.word	0x40020800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f003 fe4b 	bl	8004a68 <osDelay>
 8000dd2:	e7fb      	b.n	8000dcc <StartDefaultTask+0x8>

08000dd4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f003 fe43 	bl	8004a68 <osDelay>
 8000de2:	e7fb      	b.n	8000ddc <StartTask02+0x8>

08000de4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d101      	bne.n	8000dfa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000df6:	f000 fb7d 	bl	80014f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40001000 	.word	0x40001000

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <Error_Handler+0x8>

08000e14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_MspInit+0x54>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	4a11      	ldr	r2, [pc, #68]	@ (8000e68 <HAL_MspInit+0x54>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <HAL_MspInit+0x54>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <HAL_MspInit+0x54>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <HAL_MspInit+0x54>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e46:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <HAL_MspInit+0x54>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	210f      	movs	r1, #15
 8000e56:	f06f 0001 	mvn.w	r0, #1
 8000e5a:	f000 feb9 	bl	8001bd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800

08000e6c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	@ 0x30
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a49      	ldr	r2, [pc, #292]	@ (8000fb0 <HAL_ADC_MspInit+0x144>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	f040 808b 	bne.w	8000fa6 <HAL_ADC_MspInit+0x13a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
 8000e94:	4b47      	ldr	r3, [pc, #284]	@ (8000fb4 <HAL_ADC_MspInit+0x148>)
 8000e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e98:	4a46      	ldr	r2, [pc, #280]	@ (8000fb4 <HAL_ADC_MspInit+0x148>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ea0:	4b44      	ldr	r3, [pc, #272]	@ (8000fb4 <HAL_ADC_MspInit+0x148>)
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ea8:	61bb      	str	r3, [r7, #24]
 8000eaa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	4b40      	ldr	r3, [pc, #256]	@ (8000fb4 <HAL_ADC_MspInit+0x148>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb4:	4a3f      	ldr	r2, [pc, #252]	@ (8000fb4 <HAL_ADC_MspInit+0x148>)
 8000eb6:	f043 0304 	orr.w	r3, r3, #4
 8000eba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb4 <HAL_ADC_MspInit+0x148>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	4b39      	ldr	r3, [pc, #228]	@ (8000fb4 <HAL_ADC_MspInit+0x148>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	4a38      	ldr	r2, [pc, #224]	@ (8000fb4 <HAL_ADC_MspInit+0x148>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed8:	4b36      	ldr	r3, [pc, #216]	@ (8000fb4 <HAL_ADC_MspInit+0x148>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	4b32      	ldr	r3, [pc, #200]	@ (8000fb4 <HAL_ADC_MspInit+0x148>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eec:	4a31      	ldr	r2, [pc, #196]	@ (8000fb4 <HAL_ADC_MspInit+0x148>)
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb4 <HAL_ADC_MspInit+0x148>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f00:	2303      	movs	r3, #3
 8000f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f04:	2303      	movs	r3, #3
 8000f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	4829      	ldr	r0, [pc, #164]	@ (8000fb8 <HAL_ADC_MspInit+0x14c>)
 8000f14:	f001 fa56 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4824      	ldr	r0, [pc, #144]	@ (8000fbc <HAL_ADC_MspInit+0x150>)
 8000f2c:	f001 fa4a 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f34:	2303      	movs	r3, #3
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	481f      	ldr	r0, [pc, #124]	@ (8000fc0 <HAL_ADC_MspInit+0x154>)
 8000f44:	f001 fa3e 	bl	80023c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f48:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc4 <HAL_ADC_MspInit+0x158>)
 8000f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc8 <HAL_ADC_MspInit+0x15c>)
 8000f4c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <HAL_ADC_MspInit+0x158>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <HAL_ADC_MspInit+0x158>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <HAL_ADC_MspInit+0x158>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <HAL_ADC_MspInit+0x158>)
 8000f62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f66:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f68:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <HAL_ADC_MspInit+0x158>)
 8000f6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f6e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f70:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <HAL_ADC_MspInit+0x158>)
 8000f72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f76:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_ADC_MspInit+0x158>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <HAL_ADC_MspInit+0x158>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <HAL_ADC_MspInit+0x158>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f8a:	480e      	ldr	r0, [pc, #56]	@ (8000fc4 <HAL_ADC_MspInit+0x158>)
 8000f8c:	f000 ff30 	bl	8001df0 <HAL_DMA_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8000f96:	f7ff ff37 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a09      	ldr	r2, [pc, #36]	@ (8000fc4 <HAL_ADC_MspInit+0x158>)
 8000f9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fa0:	4a08      	ldr	r2, [pc, #32]	@ (8000fc4 <HAL_ADC_MspInit+0x158>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3730      	adds	r7, #48	@ 0x30
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40012000 	.word	0x40012000
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40020400 	.word	0x40020400
 8000fc4:	20000074 	.word	0x20000074
 8000fc8:	40026410 	.word	0x40026410

08000fcc <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8001058 <HAL_DAC_MspInit+0x8c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d12f      	bne.n	800104e <HAL_DAC_MspInit+0x82>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <HAL_DAC_MspInit+0x90>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	4a19      	ldr	r2, [pc, #100]	@ (800105c <HAL_DAC_MspInit+0x90>)
 8000ff8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <HAL_DAC_MspInit+0x90>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b13      	ldr	r3, [pc, #76]	@ (800105c <HAL_DAC_MspInit+0x90>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a12      	ldr	r2, [pc, #72]	@ (800105c <HAL_DAC_MspInit+0x90>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <HAL_DAC_MspInit+0x90>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001026:	2310      	movs	r3, #16
 8001028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102a:	2303      	movs	r3, #3
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4809      	ldr	r0, [pc, #36]	@ (8001060 <HAL_DAC_MspInit+0x94>)
 800103a:	f001 f9c3 	bl	80023c4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	210f      	movs	r1, #15
 8001042:	2036      	movs	r0, #54	@ 0x36
 8001044:	f000 fdc4 	bl	8001bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001048:	2036      	movs	r0, #54	@ 0x36
 800104a:	f000 fddd 	bl	8001c08 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	@ 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40007400 	.word	0x40007400
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000

08001064 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	@ 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a19      	ldr	r2, [pc, #100]	@ (80010e8 <HAL_I2C_MspInit+0x84>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d12c      	bne.n	80010e0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <HAL_I2C_MspInit+0x88>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a17      	ldr	r2, [pc, #92]	@ (80010ec <HAL_I2C_MspInit+0x88>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <HAL_I2C_MspInit+0x88>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a8:	2312      	movs	r3, #18
 80010aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b4:	2304      	movs	r3, #4
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <HAL_I2C_MspInit+0x8c>)
 80010c0:	f001 f980 	bl	80023c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <HAL_I2C_MspInit+0x88>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010cc:	4a07      	ldr	r2, [pc, #28]	@ (80010ec <HAL_I2C_MspInit+0x88>)
 80010ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <HAL_I2C_MspInit+0x88>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010e0:	bf00      	nop
 80010e2:	3728      	adds	r7, #40	@ 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40005400 	.word	0x40005400
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020400 	.word	0x40020400

080010f4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	@ 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a19      	ldr	r2, [pc, #100]	@ (8001178 <HAL_SPI_MspInit+0x84>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d12b      	bne.n	800116e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b18      	ldr	r3, [pc, #96]	@ (800117c <HAL_SPI_MspInit+0x88>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	4a17      	ldr	r2, [pc, #92]	@ (800117c <HAL_SPI_MspInit+0x88>)
 8001120:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001124:	6453      	str	r3, [r2, #68]	@ 0x44
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <HAL_SPI_MspInit+0x88>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <HAL_SPI_MspInit+0x88>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a10      	ldr	r2, [pc, #64]	@ (800117c <HAL_SPI_MspInit+0x88>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <HAL_SPI_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800114e:	23e0      	movs	r3, #224	@ 0xe0
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800115e:	2305      	movs	r3, #5
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	@ (8001180 <HAL_SPI_MspInit+0x8c>)
 800116a:	f001 f92b 	bl	80023c4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	@ 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40013000 	.word	0x40013000
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000

08001184 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0b      	ldr	r2, [pc, #44]	@ (80011c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d10d      	bne.n	80011b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_TIM_PWM_MspInit+0x40>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	4a09      	ldr	r2, [pc, #36]	@ (80011c4 <HAL_TIM_PWM_MspInit+0x40>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <HAL_TIM_PWM_MspInit+0x40>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40000800 	.word	0x40000800
 80011c4:	40023800 	.word	0x40023800

080011c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a12      	ldr	r2, [pc, #72]	@ (8001230 <HAL_TIM_MspPostInit+0x68>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d11d      	bne.n	8001226 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <HAL_TIM_MspPostInit+0x6c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a10      	ldr	r2, [pc, #64]	@ (8001234 <HAL_TIM_MspPostInit+0x6c>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <HAL_TIM_MspPostInit+0x6c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001206:	2340      	movs	r3, #64	@ 0x40
 8001208:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001216:	2302      	movs	r3, #2
 8001218:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	@ (8001238 <HAL_TIM_MspPostInit+0x70>)
 8001222:	f001 f8cf 	bl	80023c4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001226:	bf00      	nop
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40000800 	.word	0x40000800
 8001234:	40023800 	.word	0x40023800
 8001238:	40020400 	.word	0x40020400

0800123c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	@ 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a19      	ldr	r2, [pc, #100]	@ (80012c0 <HAL_UART_MspInit+0x84>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d12b      	bne.n	80012b6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <HAL_UART_MspInit+0x88>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	4a17      	ldr	r2, [pc, #92]	@ (80012c4 <HAL_UART_MspInit+0x88>)
 8001268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800126c:	6413      	str	r3, [r2, #64]	@ 0x40
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <HAL_UART_MspInit+0x88>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <HAL_UART_MspInit+0x88>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a10      	ldr	r2, [pc, #64]	@ (80012c4 <HAL_UART_MspInit+0x88>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <HAL_UART_MspInit+0x88>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001296:	230c      	movs	r3, #12
 8001298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012a6:	2307      	movs	r3, #7
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <HAL_UART_MspInit+0x8c>)
 80012b2:	f001 f887 	bl	80023c4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80012b6:	bf00      	nop
 80012b8:	3728      	adds	r7, #40	@ 0x28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40004400 	.word	0x40004400
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020000 	.word	0x40020000

080012cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08e      	sub	sp, #56	@ 0x38
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	4b33      	ldr	r3, [pc, #204]	@ (80013b0 <HAL_InitTick+0xe4>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	4a32      	ldr	r2, [pc, #200]	@ (80013b0 <HAL_InitTick+0xe4>)
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ec:	4b30      	ldr	r3, [pc, #192]	@ (80013b0 <HAL_InitTick+0xe4>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012f8:	f107 0210 	add.w	r2, r7, #16
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fc6a 	bl	8002bdc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800130c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800130e:	2b00      	cmp	r3, #0
 8001310:	d103      	bne.n	800131a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001312:	f001 fc3b 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 8001316:	6378      	str	r0, [r7, #52]	@ 0x34
 8001318:	e004      	b.n	8001324 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800131a:	f001 fc37 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 800131e:	4603      	mov	r3, r0
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001326:	4a23      	ldr	r2, [pc, #140]	@ (80013b4 <HAL_InitTick+0xe8>)
 8001328:	fba2 2303 	umull	r2, r3, r2, r3
 800132c:	0c9b      	lsrs	r3, r3, #18
 800132e:	3b01      	subs	r3, #1
 8001330:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001332:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <HAL_InitTick+0xec>)
 8001334:	4a21      	ldr	r2, [pc, #132]	@ (80013bc <HAL_InitTick+0xf0>)
 8001336:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001338:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <HAL_InitTick+0xec>)
 800133a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800133e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001340:	4a1d      	ldr	r2, [pc, #116]	@ (80013b8 <HAL_InitTick+0xec>)
 8001342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001344:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001346:	4b1c      	ldr	r3, [pc, #112]	@ (80013b8 <HAL_InitTick+0xec>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <HAL_InitTick+0xec>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001352:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <HAL_InitTick+0xec>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001358:	4817      	ldr	r0, [pc, #92]	@ (80013b8 <HAL_InitTick+0xec>)
 800135a:	f002 f9c8 	bl	80036ee <HAL_TIM_Base_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001364:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001368:	2b00      	cmp	r3, #0
 800136a:	d11b      	bne.n	80013a4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800136c:	4812      	ldr	r0, [pc, #72]	@ (80013b8 <HAL_InitTick+0xec>)
 800136e:	f002 fa17 	bl	80037a0 <HAL_TIM_Base_Start_IT>
 8001372:	4603      	mov	r3, r0
 8001374:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001378:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800137c:	2b00      	cmp	r3, #0
 800137e:	d111      	bne.n	80013a4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001380:	2036      	movs	r0, #54	@ 0x36
 8001382:	f000 fc41 	bl	8001c08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d808      	bhi.n	800139e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	2036      	movs	r0, #54	@ 0x36
 8001392:	f000 fc1d 	bl	8001bd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001396:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <HAL_InitTick+0xf4>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e002      	b.n	80013a4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3738      	adds	r7, #56	@ 0x38
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	431bde83 	.word	0x431bde83
 80013b8:	200006e4 	.word	0x200006e4
 80013bc:	40001000 	.word	0x40001000
 80013c0:	20000004 	.word	0x20000004

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <NMI_Handler+0x4>

080013cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <MemManage_Handler+0x4>

080013dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <TIM6_DAC_IRQHandler+0x20>)
 8001402:	791b      	ldrb	r3, [r3, #4]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d002      	beq.n	8001410 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800140a:	4804      	ldr	r0, [pc, #16]	@ (800141c <TIM6_DAC_IRQHandler+0x20>)
 800140c:	f000 fc2c 	bl	8001c68 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <TIM6_DAC_IRQHandler+0x24>)
 8001412:	f002 fa84 	bl	800391e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200000d4 	.word	0x200000d4
 8001420:	200006e4 	.word	0x200006e4

08001424 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <DMA2_Stream0_IRQHandler+0x10>)
 800142a:	f000 fd8f 	bl	8001f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000074 	.word	0x20000074

08001438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <SystemInit+0x20>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <SystemInit+0x20>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001494 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001460:	f7ff ffea 	bl	8001438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001464:	480c      	ldr	r0, [pc, #48]	@ (8001498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001466:	490d      	ldr	r1, [pc, #52]	@ (800149c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001468:	4a0d      	ldr	r2, [pc, #52]	@ (80014a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800147c:	4c0a      	ldr	r4, [pc, #40]	@ (80014a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800148a:	f005 ff9d 	bl	80073c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148e:	f7ff f987 	bl	80007a0 <main>
  bx  lr    
 8001492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001494:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014a0:	080074ec 	.word	0x080074ec
  ldr r2, =_sbss
 80014a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014a8:	20005080 	.word	0x20005080

080014ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC_IRQHandler>
	...

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b4:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	@ (80014f0 <HAL_Init+0x40>)
 80014ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <HAL_Init+0x40>)
 80014c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <HAL_Init+0x40>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 fb6e 	bl	8001bba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	200f      	movs	r0, #15
 80014e0:	f7ff fef4 	bl	80012cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fc96 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000008 	.word	0x20000008
 8001518:	2000072c 	.word	0x2000072c

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	2000072c 	.word	0x2000072c

08001534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff ffee 	bl	800151c <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154e:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <HAL_Delay+0x44>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffde 	bl	800151c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000008 	.word	0x20000008

0800157c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e033      	b.n	80015fa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fc66 	bl	8000e6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d118      	bne.n	80015ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015c2:	f023 0302 	bic.w	r3, r3, #2
 80015c6:	f043 0202 	orr.w	r2, r3, #2
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f94a 	bl	8001868 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	f023 0303 	bic.w	r3, r3, #3
 80015e2:	f043 0201 	orr.w	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80015ea:	e001      	b.n	80015f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001618:	2b01      	cmp	r3, #1
 800161a:	d101      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x1c>
 800161c:	2302      	movs	r3, #2
 800161e:	e113      	b.n	8001848 <HAL_ADC_ConfigChannel+0x244>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b09      	cmp	r3, #9
 800162e:	d925      	bls.n	800167c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68d9      	ldr	r1, [r3, #12]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	3b1e      	subs	r3, #30
 8001646:	2207      	movs	r2, #7
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43da      	mvns	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	400a      	ands	r2, r1
 8001654:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68d9      	ldr	r1, [r3, #12]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	b29b      	uxth	r3, r3
 8001666:	4618      	mov	r0, r3
 8001668:	4603      	mov	r3, r0
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4403      	add	r3, r0
 800166e:	3b1e      	subs	r3, #30
 8001670:	409a      	lsls	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	e022      	b.n	80016c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6919      	ldr	r1, [r3, #16]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	b29b      	uxth	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	2207      	movs	r2, #7
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	400a      	ands	r2, r1
 800169e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6919      	ldr	r1, [r3, #16]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	4603      	mov	r3, r0
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4403      	add	r3, r0
 80016b8:	409a      	lsls	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d824      	bhi.n	8001714 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	3b05      	subs	r3, #5
 80016dc:	221f      	movs	r2, #31
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	400a      	ands	r2, r1
 80016ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	3b05      	subs	r3, #5
 8001706:	fa00 f203 	lsl.w	r2, r0, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	635a      	str	r2, [r3, #52]	@ 0x34
 8001712:	e04c      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b0c      	cmp	r3, #12
 800171a:	d824      	bhi.n	8001766 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	3b23      	subs	r3, #35	@ 0x23
 800172e:	221f      	movs	r2, #31
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43da      	mvns	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	400a      	ands	r2, r1
 800173c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	b29b      	uxth	r3, r3
 800174a:	4618      	mov	r0, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	3b23      	subs	r3, #35	@ 0x23
 8001758:	fa00 f203 	lsl.w	r2, r0, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	631a      	str	r2, [r3, #48]	@ 0x30
 8001764:	e023      	b.n	80017ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	3b41      	subs	r3, #65	@ 0x41
 8001778:	221f      	movs	r2, #31
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43da      	mvns	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	400a      	ands	r2, r1
 8001786:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	b29b      	uxth	r3, r3
 8001794:	4618      	mov	r0, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	3b41      	subs	r3, #65	@ 0x41
 80017a2:	fa00 f203 	lsl.w	r2, r0, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ae:	4b29      	ldr	r3, [pc, #164]	@ (8001854 <HAL_ADC_ConfigChannel+0x250>)
 80017b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a28      	ldr	r2, [pc, #160]	@ (8001858 <HAL_ADC_ConfigChannel+0x254>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d10f      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x1d8>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b12      	cmp	r3, #18
 80017c2:	d10b      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001858 <HAL_ADC_ConfigChannel+0x254>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d12b      	bne.n	800183e <HAL_ADC_ConfigChannel+0x23a>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1c      	ldr	r2, [pc, #112]	@ (800185c <HAL_ADC_ConfigChannel+0x258>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d003      	beq.n	80017f8 <HAL_ADC_ConfigChannel+0x1f4>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b11      	cmp	r3, #17
 80017f6:	d122      	bne.n	800183e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a11      	ldr	r2, [pc, #68]	@ (800185c <HAL_ADC_ConfigChannel+0x258>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d111      	bne.n	800183e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800181a:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <HAL_ADC_ConfigChannel+0x25c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a11      	ldr	r2, [pc, #68]	@ (8001864 <HAL_ADC_ConfigChannel+0x260>)
 8001820:	fba2 2303 	umull	r2, r3, r2, r3
 8001824:	0c9a      	lsrs	r2, r3, #18
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001830:	e002      	b.n	8001838 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	3b01      	subs	r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f9      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40012300 	.word	0x40012300
 8001858:	40012000 	.word	0x40012000
 800185c:	10000012 	.word	0x10000012
 8001860:	20000000 	.word	0x20000000
 8001864:	431bde83 	.word	0x431bde83

08001868 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001870:	4b79      	ldr	r3, [pc, #484]	@ (8001a58 <ADC_Init+0x1f0>)
 8001872:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	431a      	orrs	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800189c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	021a      	lsls	r2, r3, #8
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80018c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6859      	ldr	r1, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6899      	ldr	r1, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fa:	4a58      	ldr	r2, [pc, #352]	@ (8001a5c <ADC_Init+0x1f4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d022      	beq.n	8001946 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800190e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6899      	ldr	r1, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6899      	ldr	r1, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	e00f      	b.n	8001966 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001964:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0202 	bic.w	r2, r2, #2
 8001974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6899      	ldr	r1, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7e1b      	ldrb	r3, [r3, #24]
 8001980:	005a      	lsls	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01b      	beq.n	80019cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019a2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80019b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6859      	ldr	r1, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	3b01      	subs	r3, #1
 80019c0:	035a      	lsls	r2, r3, #13
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	e007      	b.n	80019dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019da:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	051a      	lsls	r2, r3, #20
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6899      	ldr	r1, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a1e:	025a      	lsls	r2, r3, #9
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6899      	ldr	r1, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	029a      	lsls	r2, r3, #10
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	609a      	str	r2, [r3, #8]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	40012300 	.word	0x40012300
 8001a5c:	0f000001 	.word	0x0f000001

08001a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a92:	4a04      	ldr	r2, [pc, #16]	@ (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	60d3      	str	r3, [r2, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4907      	ldr	r1, [pc, #28]	@ (8001afc <__NVIC_EnableIRQ+0x38>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	@ (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	@ (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	@ 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	@ 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ff4c 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be2:	f7ff ff61 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001be6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	6978      	ldr	r0, [r7, #20]
 8001bee:	f7ff ffb1 	bl	8001b54 <NVIC_EncodePriority>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff80 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff54 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e014      	b.n	8001c60 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	791b      	ldrb	r3, [r3, #4]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d105      	bne.n	8001c4c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff f9c0 	bl	8000fcc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c7e:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01d      	beq.n	8001cc6 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d018      	beq.n	8001cc6 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2204      	movs	r2, #4
 8001c98:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f827 	bl	8001d14 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d01d      	beq.n	8001d0c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d018      	beq.n	8001d0c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2204      	movs	r2, #4
 8001cde:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	f043 0202 	orr.w	r2, r3, #2
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001cf4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001d04:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f867 	bl	8001dda <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	@ 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <HAL_DAC_ConfigChannel+0x1c>
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e042      	b.n	8001dce <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	795b      	ldrb	r3, [r3, #5]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_DAC_ConfigChannel+0x2c>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e03c      	b.n	8001dce <HAL_DAC_ConfigChannel+0xa6>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2201      	movs	r2, #1
 8001d58:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6819      	ldr	r1, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	22c0      	movs	r2, #192	@ 0xc0
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43da      	mvns	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001dcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	@ 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dfc:	f7ff fb8e 	bl	800151c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e099      	b.n	8001f40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e2c:	e00f      	b.n	8001e4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e2e:	f7ff fb75 	bl	800151c <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b05      	cmp	r3, #5
 8001e3a:	d908      	bls.n	8001e4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2203      	movs	r2, #3
 8001e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e078      	b.n	8001f40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1e8      	bne.n	8001e2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	4b38      	ldr	r3, [pc, #224]	@ (8001f48 <HAL_DMA_Init+0x158>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d107      	bne.n	8001eb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f023 0307 	bic.w	r3, r3, #7
 8001ece:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d117      	bne.n	8001f12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00e      	beq.n	8001f12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f9e9 	bl	80022cc <DMA_CheckFifoParam>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2240      	movs	r2, #64	@ 0x40
 8001f04:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e016      	b.n	8001f40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f9a0 	bl	8002260 <DMA_CalcBaseAndBitshift>
 8001f20:	4603      	mov	r3, r0
 8001f22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f28:	223f      	movs	r2, #63	@ 0x3f
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	f010803f 	.word	0xf010803f

08001f4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f58:	4b8e      	ldr	r3, [pc, #568]	@ (8002194 <HAL_DMA_IRQHandler+0x248>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a8e      	ldr	r2, [pc, #568]	@ (8002198 <HAL_DMA_IRQHandler+0x24c>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	0a9b      	lsrs	r3, r3, #10
 8001f64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f76:	2208      	movs	r2, #8
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d01a      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d013      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0204 	bic.w	r2, r2, #4
 8001f9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa4:	2208      	movs	r2, #8
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb0:	f043 0201 	orr.w	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d012      	beq.n	8001fee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00b      	beq.n	8001fee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fda:	2201      	movs	r2, #1
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe6:	f043 0202 	orr.w	r2, r3, #2
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d012      	beq.n	8002024 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00b      	beq.n	8002024 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002010:	2204      	movs	r2, #4
 8002012:	409a      	lsls	r2, r3
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201c:	f043 0204 	orr.w	r2, r3, #4
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002028:	2210      	movs	r2, #16
 800202a:	409a      	lsls	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d043      	beq.n	80020bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d03c      	beq.n	80020bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002046:	2210      	movs	r2, #16
 8002048:	409a      	lsls	r2, r3
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d018      	beq.n	800208e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d108      	bne.n	800207c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d024      	beq.n	80020bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	4798      	blx	r3
 800207a:	e01f      	b.n	80020bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01b      	beq.n	80020bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4798      	blx	r3
 800208c:	e016      	b.n	80020bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d107      	bne.n	80020ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0208 	bic.w	r2, r2, #8
 80020aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c0:	2220      	movs	r2, #32
 80020c2:	409a      	lsls	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 808f 	beq.w	80021ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8087 	beq.w	80021ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e2:	2220      	movs	r2, #32
 80020e4:	409a      	lsls	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	d136      	bne.n	8002164 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0216 	bic.w	r2, r2, #22
 8002104:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002114:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d103      	bne.n	8002126 <HAL_DMA_IRQHandler+0x1da>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0208 	bic.w	r2, r2, #8
 8002134:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213a:	223f      	movs	r2, #63	@ 0x3f
 800213c:	409a      	lsls	r2, r3
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002156:	2b00      	cmp	r3, #0
 8002158:	d07e      	beq.n	8002258 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	4798      	blx	r3
        }
        return;
 8002162:	e079      	b.n	8002258 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d01d      	beq.n	80021ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10d      	bne.n	800219c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002184:	2b00      	cmp	r3, #0
 8002186:	d031      	beq.n	80021ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
 8002190:	e02c      	b.n	80021ec <HAL_DMA_IRQHandler+0x2a0>
 8002192:	bf00      	nop
 8002194:	20000000 	.word	0x20000000
 8002198:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d023      	beq.n	80021ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	4798      	blx	r3
 80021ac:	e01e      	b.n	80021ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10f      	bne.n	80021dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0210 	bic.w	r2, r2, #16
 80021ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d032      	beq.n	800225a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d022      	beq.n	8002246 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2205      	movs	r2, #5
 8002204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0201 	bic.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	3301      	adds	r3, #1
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	429a      	cmp	r2, r3
 8002222:	d307      	bcc.n	8002234 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f2      	bne.n	8002218 <HAL_DMA_IRQHandler+0x2cc>
 8002232:	e000      	b.n	8002236 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002234:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	4798      	blx	r3
 8002256:	e000      	b.n	800225a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002258:	bf00      	nop
    }
  }
}
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	3b10      	subs	r3, #16
 8002270:	4a14      	ldr	r2, [pc, #80]	@ (80022c4 <DMA_CalcBaseAndBitshift+0x64>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800227a:	4a13      	ldr	r2, [pc, #76]	@ (80022c8 <DMA_CalcBaseAndBitshift+0x68>)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b03      	cmp	r3, #3
 800228c:	d909      	bls.n	80022a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002296:	f023 0303 	bic.w	r3, r3, #3
 800229a:	1d1a      	adds	r2, r3, #4
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	659a      	str	r2, [r3, #88]	@ 0x58
 80022a0:	e007      	b.n	80022b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022aa:	f023 0303 	bic.w	r3, r3, #3
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	aaaaaaab 	.word	0xaaaaaaab
 80022c8:	080074d4 	.word	0x080074d4

080022cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d11f      	bne.n	8002326 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d856      	bhi.n	800239a <DMA_CheckFifoParam+0xce>
 80022ec:	a201      	add	r2, pc, #4	@ (adr r2, 80022f4 <DMA_CheckFifoParam+0x28>)
 80022ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f2:	bf00      	nop
 80022f4:	08002305 	.word	0x08002305
 80022f8:	08002317 	.word	0x08002317
 80022fc:	08002305 	.word	0x08002305
 8002300:	0800239b 	.word	0x0800239b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002308:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d046      	beq.n	800239e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002314:	e043      	b.n	800239e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800231e:	d140      	bne.n	80023a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002324:	e03d      	b.n	80023a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800232e:	d121      	bne.n	8002374 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b03      	cmp	r3, #3
 8002334:	d837      	bhi.n	80023a6 <DMA_CheckFifoParam+0xda>
 8002336:	a201      	add	r2, pc, #4	@ (adr r2, 800233c <DMA_CheckFifoParam+0x70>)
 8002338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233c:	0800234d 	.word	0x0800234d
 8002340:	08002353 	.word	0x08002353
 8002344:	0800234d 	.word	0x0800234d
 8002348:	08002365 	.word	0x08002365
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
      break;
 8002350:	e030      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d025      	beq.n	80023aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002362:	e022      	b.n	80023aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002368:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800236c:	d11f      	bne.n	80023ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002372:	e01c      	b.n	80023ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d903      	bls.n	8002382 <DMA_CheckFifoParam+0xb6>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d003      	beq.n	8002388 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002380:	e018      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
      break;
 8002386:	e015      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00e      	beq.n	80023b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
      break;
 8002398:	e00b      	b.n	80023b2 <DMA_CheckFifoParam+0xe6>
      break;
 800239a:	bf00      	nop
 800239c:	e00a      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      break;
 800239e:	bf00      	nop
 80023a0:	e008      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      break;
 80023a2:	bf00      	nop
 80023a4:	e006      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      break;
 80023a6:	bf00      	nop
 80023a8:	e004      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      break;
 80023aa:	bf00      	nop
 80023ac:	e002      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80023ae:	bf00      	nop
 80023b0:	e000      	b.n	80023b4 <DMA_CheckFifoParam+0xe8>
      break;
 80023b2:	bf00      	nop
    }
  } 
  
  return status; 
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	@ 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e165      	b.n	80026ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f040 8154 	bne.w	80026a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d005      	beq.n	8002416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002412:	2b02      	cmp	r3, #2
 8002414:	d130      	bne.n	8002478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 0201 	and.w	r2, r3, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b03      	cmp	r3, #3
 8002482:	d017      	beq.n	80024b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d123      	bne.n	8002508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	69b9      	ldr	r1, [r7, #24]
 8002504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0203 	and.w	r2, r3, #3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80ae 	beq.w	80026a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b5d      	ldr	r3, [pc, #372]	@ (80026c4 <HAL_GPIO_Init+0x300>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	4a5c      	ldr	r2, [pc, #368]	@ (80026c4 <HAL_GPIO_Init+0x300>)
 8002554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002558:	6453      	str	r3, [r2, #68]	@ 0x44
 800255a:	4b5a      	ldr	r3, [pc, #360]	@ (80026c4 <HAL_GPIO_Init+0x300>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002566:	4a58      	ldr	r2, [pc, #352]	@ (80026c8 <HAL_GPIO_Init+0x304>)
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4f      	ldr	r2, [pc, #316]	@ (80026cc <HAL_GPIO_Init+0x308>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d025      	beq.n	80025de <HAL_GPIO_Init+0x21a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4e      	ldr	r2, [pc, #312]	@ (80026d0 <HAL_GPIO_Init+0x30c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01f      	beq.n	80025da <HAL_GPIO_Init+0x216>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4d      	ldr	r2, [pc, #308]	@ (80026d4 <HAL_GPIO_Init+0x310>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d019      	beq.n	80025d6 <HAL_GPIO_Init+0x212>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4c      	ldr	r2, [pc, #304]	@ (80026d8 <HAL_GPIO_Init+0x314>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_GPIO_Init+0x20e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4b      	ldr	r2, [pc, #300]	@ (80026dc <HAL_GPIO_Init+0x318>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00d      	beq.n	80025ce <HAL_GPIO_Init+0x20a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4a      	ldr	r2, [pc, #296]	@ (80026e0 <HAL_GPIO_Init+0x31c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d007      	beq.n	80025ca <HAL_GPIO_Init+0x206>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a49      	ldr	r2, [pc, #292]	@ (80026e4 <HAL_GPIO_Init+0x320>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_GPIO_Init+0x202>
 80025c2:	2306      	movs	r3, #6
 80025c4:	e00c      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025c6:	2307      	movs	r3, #7
 80025c8:	e00a      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025ca:	2305      	movs	r3, #5
 80025cc:	e008      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025ce:	2304      	movs	r3, #4
 80025d0:	e006      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025d2:	2303      	movs	r3, #3
 80025d4:	e004      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e002      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025de:	2300      	movs	r3, #0
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	f002 0203 	and.w	r2, r2, #3
 80025e6:	0092      	lsls	r2, r2, #2
 80025e8:	4093      	lsls	r3, r2
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025f0:	4935      	ldr	r1, [pc, #212]	@ (80026c8 <HAL_GPIO_Init+0x304>)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	3302      	adds	r3, #2
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fe:	4b3a      	ldr	r3, [pc, #232]	@ (80026e8 <HAL_GPIO_Init+0x324>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002622:	4a31      	ldr	r2, [pc, #196]	@ (80026e8 <HAL_GPIO_Init+0x324>)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002628:	4b2f      	ldr	r3, [pc, #188]	@ (80026e8 <HAL_GPIO_Init+0x324>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800264c:	4a26      	ldr	r2, [pc, #152]	@ (80026e8 <HAL_GPIO_Init+0x324>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002652:	4b25      	ldr	r3, [pc, #148]	@ (80026e8 <HAL_GPIO_Init+0x324>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002676:	4a1c      	ldr	r2, [pc, #112]	@ (80026e8 <HAL_GPIO_Init+0x324>)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800267c:	4b1a      	ldr	r3, [pc, #104]	@ (80026e8 <HAL_GPIO_Init+0x324>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026a0:	4a11      	ldr	r2, [pc, #68]	@ (80026e8 <HAL_GPIO_Init+0x324>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3301      	adds	r3, #1
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b0f      	cmp	r3, #15
 80026b0:	f67f ae96 	bls.w	80023e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3724      	adds	r7, #36	@ 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40013800 	.word	0x40013800
 80026cc:	40020000 	.word	0x40020000
 80026d0:	40020400 	.word	0x40020400
 80026d4:	40020800 	.word	0x40020800
 80026d8:	40020c00 	.word	0x40020c00
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40021400 	.word	0x40021400
 80026e4:	40021800 	.word	0x40021800
 80026e8:	40013c00 	.word	0x40013c00

080026ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]
 80026f8:	4613      	mov	r3, r2
 80026fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026fc:	787b      	ldrb	r3, [r7, #1]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002708:	e003      	b.n	8002712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800270a:	887b      	ldrh	r3, [r7, #2]
 800270c:	041a      	lsls	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	619a      	str	r2, [r3, #24]
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e12b      	b.n	800298a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe fc8c 	bl	8001064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2224      	movs	r2, #36	@ 0x24
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002772:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002782:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002784:	f000 fa02 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 8002788:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4a81      	ldr	r2, [pc, #516]	@ (8002994 <HAL_I2C_Init+0x274>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d807      	bhi.n	80027a4 <HAL_I2C_Init+0x84>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a80      	ldr	r2, [pc, #512]	@ (8002998 <HAL_I2C_Init+0x278>)
 8002798:	4293      	cmp	r3, r2
 800279a:	bf94      	ite	ls
 800279c:	2301      	movls	r3, #1
 800279e:	2300      	movhi	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e006      	b.n	80027b2 <HAL_I2C_Init+0x92>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4a7d      	ldr	r2, [pc, #500]	@ (800299c <HAL_I2C_Init+0x27c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	bf94      	ite	ls
 80027ac:	2301      	movls	r3, #1
 80027ae:	2300      	movhi	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e0e7      	b.n	800298a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4a78      	ldr	r2, [pc, #480]	@ (80029a0 <HAL_I2C_Init+0x280>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0c9b      	lsrs	r3, r3, #18
 80027c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002994 <HAL_I2C_Init+0x274>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d802      	bhi.n	80027f4 <HAL_I2C_Init+0xd4>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3301      	adds	r3, #1
 80027f2:	e009      	b.n	8002808 <HAL_I2C_Init+0xe8>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	4a69      	ldr	r2, [pc, #420]	@ (80029a4 <HAL_I2C_Init+0x284>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	3301      	adds	r3, #1
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	430b      	orrs	r3, r1
 800280e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800281a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	495c      	ldr	r1, [pc, #368]	@ (8002994 <HAL_I2C_Init+0x274>)
 8002824:	428b      	cmp	r3, r1
 8002826:	d819      	bhi.n	800285c <HAL_I2C_Init+0x13c>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1e59      	subs	r1, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fbb1 f3f3 	udiv	r3, r1, r3
 8002836:	1c59      	adds	r1, r3, #1
 8002838:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800283c:	400b      	ands	r3, r1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_I2C_Init+0x138>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1e59      	subs	r1, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002850:	3301      	adds	r3, #1
 8002852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002856:	e051      	b.n	80028fc <HAL_I2C_Init+0x1dc>
 8002858:	2304      	movs	r3, #4
 800285a:	e04f      	b.n	80028fc <HAL_I2C_Init+0x1dc>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d111      	bne.n	8002888 <HAL_I2C_Init+0x168>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e58      	subs	r0, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	440b      	add	r3, r1
 8002872:	fbb0 f3f3 	udiv	r3, r0, r3
 8002876:	3301      	adds	r3, #1
 8002878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	e012      	b.n	80028ae <HAL_I2C_Init+0x18e>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1e58      	subs	r0, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	0099      	lsls	r1, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	fbb0 f3f3 	udiv	r3, r0, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Init+0x196>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e022      	b.n	80028fc <HAL_I2C_Init+0x1dc>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10e      	bne.n	80028dc <HAL_I2C_Init+0x1bc>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1e58      	subs	r0, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6859      	ldr	r1, [r3, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	440b      	add	r3, r1
 80028cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028da:	e00f      	b.n	80028fc <HAL_I2C_Init+0x1dc>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1e58      	subs	r0, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	0099      	lsls	r1, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	6809      	ldr	r1, [r1, #0]
 8002900:	4313      	orrs	r3, r2
 8002902:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800292a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6911      	ldr	r1, [r2, #16]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68d2      	ldr	r2, [r2, #12]
 8002936:	4311      	orrs	r1, r2
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	430b      	orrs	r3, r1
 800293e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	000186a0 	.word	0x000186a0
 8002998:	001e847f 	.word	0x001e847f
 800299c:	003d08ff 	.word	0x003d08ff
 80029a0:	431bde83 	.word	0x431bde83
 80029a4:	10624dd3 	.word	0x10624dd3

080029a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0cc      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b68      	ldr	r3, [pc, #416]	@ (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d90c      	bls.n	80029e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b65      	ldr	r3, [pc, #404]	@ (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b63      	ldr	r3, [pc, #396]	@ (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0b8      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d020      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029fc:	4b59      	ldr	r3, [pc, #356]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a58      	ldr	r2, [pc, #352]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a14:	4b53      	ldr	r3, [pc, #332]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a52      	ldr	r2, [pc, #328]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a20:	4b50      	ldr	r3, [pc, #320]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	494d      	ldr	r1, [pc, #308]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d044      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b47      	ldr	r3, [pc, #284]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d119      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e07f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d003      	beq.n	8002a66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a66:	4b3f      	ldr	r3, [pc, #252]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e06f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a76:	4b3b      	ldr	r3, [pc, #236]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e067      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a86:	4b37      	ldr	r3, [pc, #220]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f023 0203 	bic.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4934      	ldr	r1, [pc, #208]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a98:	f7fe fd40 	bl	800151c <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7fe fd3c 	bl	800151c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e04f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 020c 	and.w	r2, r3, #12
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1eb      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b25      	ldr	r3, [pc, #148]	@ (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d20c      	bcs.n	8002af0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b22      	ldr	r3, [pc, #136]	@ (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b20      	ldr	r3, [pc, #128]	@ (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e032      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002afc:	4b19      	ldr	r3, [pc, #100]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4916      	ldr	r1, [pc, #88]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b1a:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	490e      	ldr	r1, [pc, #56]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b2e:	f000 f887 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	490a      	ldr	r1, [pc, #40]	@ (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	5ccb      	ldrb	r3, [r1, r3]
 8002b42:	fa22 f303 	lsr.w	r3, r2, r3
 8002b46:	4a09      	ldr	r2, [pc, #36]	@ (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b4a:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fbbc 	bl	80012cc <HAL_InitTick>

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40023c00 	.word	0x40023c00
 8002b64:	40023800 	.word	0x40023800
 8002b68:	080074bc 	.word	0x080074bc
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	20000004 	.word	0x20000004

08002b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b78:	4b03      	ldr	r3, [pc, #12]	@ (8002b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000000 	.word	0x20000000

08002b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b90:	f7ff fff0 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	0a9b      	lsrs	r3, r3, #10
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	4903      	ldr	r1, [pc, #12]	@ (8002bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ba2:	5ccb      	ldrb	r3, [r1, r3]
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	080074cc 	.word	0x080074cc

08002bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bb8:	f7ff ffdc 	bl	8002b74 <HAL_RCC_GetHCLKFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	0b5b      	lsrs	r3, r3, #13
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	4903      	ldr	r1, [pc, #12]	@ (8002bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bca:	5ccb      	ldrb	r3, [r1, r3]
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	080074cc 	.word	0x080074cc

08002bdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	220f      	movs	r2, #15
 8002bea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002bec:	4b12      	ldr	r3, [pc, #72]	@ (8002c38 <HAL_RCC_GetClockConfig+0x5c>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0203 	and.w	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c38 <HAL_RCC_GetClockConfig+0x5c>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c04:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <HAL_RCC_GetClockConfig+0x5c>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c10:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <HAL_RCC_GetClockConfig+0x5c>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	08db      	lsrs	r3, r3, #3
 8002c16:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c1e:	4b07      	ldr	r3, [pc, #28]	@ (8002c3c <HAL_RCC_GetClockConfig+0x60>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 020f 	and.w	r2, r3, #15
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	601a      	str	r2, [r3, #0]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40023c00 	.word	0x40023c00

08002c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c44:	b0ae      	sub	sp, #184	@ 0xb8
 8002c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c66:	4bcb      	ldr	r3, [pc, #812]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	f200 8206 	bhi.w	8003080 <HAL_RCC_GetSysClockFreq+0x440>
 8002c74:	a201      	add	r2, pc, #4	@ (adr r2, 8002c7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7a:	bf00      	nop
 8002c7c:	08002cb1 	.word	0x08002cb1
 8002c80:	08003081 	.word	0x08003081
 8002c84:	08003081 	.word	0x08003081
 8002c88:	08003081 	.word	0x08003081
 8002c8c:	08002cb9 	.word	0x08002cb9
 8002c90:	08003081 	.word	0x08003081
 8002c94:	08003081 	.word	0x08003081
 8002c98:	08003081 	.word	0x08003081
 8002c9c:	08002cc1 	.word	0x08002cc1
 8002ca0:	08003081 	.word	0x08003081
 8002ca4:	08003081 	.word	0x08003081
 8002ca8:	08003081 	.word	0x08003081
 8002cac:	08002eb1 	.word	0x08002eb1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb0:	4bb9      	ldr	r3, [pc, #740]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cb6:	e1e7      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cb8:	4bb8      	ldr	r3, [pc, #736]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cbe:	e1e3      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc0:	4bb4      	ldr	r3, [pc, #720]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ccc:	4bb1      	ldr	r3, [pc, #708]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d071      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd8:	4bae      	ldr	r3, [pc, #696]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ce4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002cfe:	4622      	mov	r2, r4
 8002d00:	462b      	mov	r3, r5
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	0159      	lsls	r1, r3, #5
 8002d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d10:	0150      	lsls	r0, r2, #5
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4621      	mov	r1, r4
 8002d18:	1a51      	subs	r1, r2, r1
 8002d1a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d22:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002d30:	4649      	mov	r1, r9
 8002d32:	018b      	lsls	r3, r1, #6
 8002d34:	4641      	mov	r1, r8
 8002d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	018a      	lsls	r2, r1, #6
 8002d3e:	4641      	mov	r1, r8
 8002d40:	1a51      	subs	r1, r2, r1
 8002d42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d44:	4649      	mov	r1, r9
 8002d46:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002d58:	4649      	mov	r1, r9
 8002d5a:	00cb      	lsls	r3, r1, #3
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d62:	4641      	mov	r1, r8
 8002d64:	00ca      	lsls	r2, r1, #3
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4622      	mov	r2, r4
 8002d6e:	189b      	adds	r3, r3, r2
 8002d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d72:	462b      	mov	r3, r5
 8002d74:	460a      	mov	r2, r1
 8002d76:	eb42 0303 	adc.w	r3, r2, r3
 8002d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d88:	4629      	mov	r1, r5
 8002d8a:	024b      	lsls	r3, r1, #9
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d92:	4621      	mov	r1, r4
 8002d94:	024a      	lsls	r2, r1, #9
 8002d96:	4610      	mov	r0, r2
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002da4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002da8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002dac:	f7fd fa30 	bl	8000210 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dba:	e067      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbc:	4b75      	ldr	r3, [pc, #468]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dc8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002dda:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002dde:	4622      	mov	r2, r4
 8002de0:	462b      	mov	r3, r5
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f04f 0100 	mov.w	r1, #0
 8002dea:	0159      	lsls	r1, r3, #5
 8002dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df0:	0150      	lsls	r0, r2, #5
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4621      	mov	r1, r4
 8002df8:	1a51      	subs	r1, r2, r1
 8002dfa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8002e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002e10:	4649      	mov	r1, r9
 8002e12:	018b      	lsls	r3, r1, #6
 8002e14:	4641      	mov	r1, r8
 8002e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e1a:	4641      	mov	r1, r8
 8002e1c:	018a      	lsls	r2, r1, #6
 8002e1e:	4641      	mov	r1, r8
 8002e20:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e24:	4649      	mov	r1, r9
 8002e26:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e2a:	f04f 0200 	mov.w	r2, #0
 8002e2e:	f04f 0300 	mov.w	r3, #0
 8002e32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e3e:	4692      	mov	sl, r2
 8002e40:	469b      	mov	fp, r3
 8002e42:	4623      	mov	r3, r4
 8002e44:	eb1a 0303 	adds.w	r3, sl, r3
 8002e48:	623b      	str	r3, [r7, #32]
 8002e4a:	462b      	mov	r3, r5
 8002e4c:	eb4b 0303 	adc.w	r3, fp, r3
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002e5e:	4629      	mov	r1, r5
 8002e60:	028b      	lsls	r3, r1, #10
 8002e62:	4621      	mov	r1, r4
 8002e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e68:	4621      	mov	r1, r4
 8002e6a:	028a      	lsls	r2, r1, #10
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e74:	2200      	movs	r2, #0
 8002e76:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e78:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002e7e:	f7fd f9c7 	bl	8000210 <__aeabi_uldivmod>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4613      	mov	r3, r2
 8002e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e8c:	4b41      	ldr	r3, [pc, #260]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	3301      	adds	r3, #1
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002e9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002eae:	e0eb      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb0:	4b38      	ldr	r3, [pc, #224]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ebc:	4b35      	ldr	r3, [pc, #212]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d06b      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec8:	4b32      	ldr	r3, [pc, #200]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	2200      	movs	r2, #0
 8002ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ed2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eda:	663b      	str	r3, [r7, #96]	@ 0x60
 8002edc:	2300      	movs	r3, #0
 8002ede:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ee0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002ee4:	4622      	mov	r2, r4
 8002ee6:	462b      	mov	r3, r5
 8002ee8:	f04f 0000 	mov.w	r0, #0
 8002eec:	f04f 0100 	mov.w	r1, #0
 8002ef0:	0159      	lsls	r1, r3, #5
 8002ef2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef6:	0150      	lsls	r0, r2, #5
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4621      	mov	r1, r4
 8002efe:	1a51      	subs	r1, r2, r1
 8002f00:	61b9      	str	r1, [r7, #24]
 8002f02:	4629      	mov	r1, r5
 8002f04:	eb63 0301 	sbc.w	r3, r3, r1
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f16:	4659      	mov	r1, fp
 8002f18:	018b      	lsls	r3, r1, #6
 8002f1a:	4651      	mov	r1, sl
 8002f1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f20:	4651      	mov	r1, sl
 8002f22:	018a      	lsls	r2, r1, #6
 8002f24:	4651      	mov	r1, sl
 8002f26:	ebb2 0801 	subs.w	r8, r2, r1
 8002f2a:	4659      	mov	r1, fp
 8002f2c:	eb63 0901 	sbc.w	r9, r3, r1
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f44:	4690      	mov	r8, r2
 8002f46:	4699      	mov	r9, r3
 8002f48:	4623      	mov	r3, r4
 8002f4a:	eb18 0303 	adds.w	r3, r8, r3
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	462b      	mov	r3, r5
 8002f52:	eb49 0303 	adc.w	r3, r9, r3
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002f64:	4629      	mov	r1, r5
 8002f66:	024b      	lsls	r3, r1, #9
 8002f68:	4621      	mov	r1, r4
 8002f6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f6e:	4621      	mov	r1, r4
 8002f70:	024a      	lsls	r2, r1, #9
 8002f72:	4610      	mov	r0, r2
 8002f74:	4619      	mov	r1, r3
 8002f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f7e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002f80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f84:	f7fd f944 	bl	8000210 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f92:	e065      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x420>
 8002f94:	40023800 	.word	0x40023800
 8002f98:	00f42400 	.word	0x00f42400
 8002f9c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	099b      	lsrs	r3, r3, #6
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	4611      	mov	r1, r2
 8002fac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fb6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002fba:	4642      	mov	r2, r8
 8002fbc:	464b      	mov	r3, r9
 8002fbe:	f04f 0000 	mov.w	r0, #0
 8002fc2:	f04f 0100 	mov.w	r1, #0
 8002fc6:	0159      	lsls	r1, r3, #5
 8002fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fcc:	0150      	lsls	r0, r2, #5
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4641      	mov	r1, r8
 8002fd4:	1a51      	subs	r1, r2, r1
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	4649      	mov	r1, r9
 8002fda:	eb63 0301 	sbc.w	r3, r3, r1
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002fec:	4659      	mov	r1, fp
 8002fee:	018b      	lsls	r3, r1, #6
 8002ff0:	4651      	mov	r1, sl
 8002ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ff6:	4651      	mov	r1, sl
 8002ff8:	018a      	lsls	r2, r1, #6
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	1a54      	subs	r4, r2, r1
 8002ffe:	4659      	mov	r1, fp
 8003000:	eb63 0501 	sbc.w	r5, r3, r1
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	00eb      	lsls	r3, r5, #3
 800300e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003012:	00e2      	lsls	r2, r4, #3
 8003014:	4614      	mov	r4, r2
 8003016:	461d      	mov	r5, r3
 8003018:	4643      	mov	r3, r8
 800301a:	18e3      	adds	r3, r4, r3
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	464b      	mov	r3, r9
 8003020:	eb45 0303 	adc.w	r3, r5, r3
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003032:	4629      	mov	r1, r5
 8003034:	028b      	lsls	r3, r1, #10
 8003036:	4621      	mov	r1, r4
 8003038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800303c:	4621      	mov	r1, r4
 800303e:	028a      	lsls	r2, r1, #10
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003048:	2200      	movs	r2, #0
 800304a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800304c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800304e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003052:	f7fd f8dd 	bl	8000210 <__aeabi_uldivmod>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4613      	mov	r3, r2
 800305c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003060:	4b0d      	ldr	r3, [pc, #52]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x458>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	0f1b      	lsrs	r3, r3, #28
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800306e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003072:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003076:	fbb2 f3f3 	udiv	r3, r2, r3
 800307a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800307e:	e003      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b06      	ldr	r3, [pc, #24]	@ (800309c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003082:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003086:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003088:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800308c:	4618      	mov	r0, r3
 800308e:	37b8      	adds	r7, #184	@ 0xb8
 8003090:	46bd      	mov	sp, r7
 8003092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
 800309c:	00f42400 	.word	0x00f42400

080030a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e28d      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8083 	beq.w	80031c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80030c0:	4b94      	ldr	r3, [pc, #592]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 030c 	and.w	r3, r3, #12
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d019      	beq.n	8003100 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80030cc:	4b91      	ldr	r3, [pc, #580]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d106      	bne.n	80030e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80030d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030e4:	d00c      	beq.n	8003100 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80030ee:	2b0c      	cmp	r3, #12
 80030f0:	d112      	bne.n	8003118 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f2:	4b88      	ldr	r3, [pc, #544]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030fe:	d10b      	bne.n	8003118 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003100:	4b84      	ldr	r3, [pc, #528]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d05b      	beq.n	80031c4 <HAL_RCC_OscConfig+0x124>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d157      	bne.n	80031c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e25a      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003120:	d106      	bne.n	8003130 <HAL_RCC_OscConfig+0x90>
 8003122:	4b7c      	ldr	r3, [pc, #496]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a7b      	ldr	r2, [pc, #492]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e01d      	b.n	800316c <HAL_RCC_OscConfig+0xcc>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003138:	d10c      	bne.n	8003154 <HAL_RCC_OscConfig+0xb4>
 800313a:	4b76      	ldr	r3, [pc, #472]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a75      	ldr	r2, [pc, #468]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	4b73      	ldr	r3, [pc, #460]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a72      	ldr	r2, [pc, #456]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e00b      	b.n	800316c <HAL_RCC_OscConfig+0xcc>
 8003154:	4b6f      	ldr	r3, [pc, #444]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a6e      	ldr	r2, [pc, #440]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 800315a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4b6c      	ldr	r3, [pc, #432]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a6b      	ldr	r2, [pc, #428]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800316a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe f9d2 	bl	800151c <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800317c:	f7fe f9ce 	bl	800151c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	@ 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e21f      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b61      	ldr	r3, [pc, #388]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0xdc>
 800319a:	e014      	b.n	80031c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe f9be 	bl	800151c <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a4:	f7fe f9ba 	bl	800151c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	@ 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e20b      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b6:	4b57      	ldr	r3, [pc, #348]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x104>
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d06f      	beq.n	80032b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031d2:	4b50      	ldr	r3, [pc, #320]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d017      	beq.n	800320e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80031de:	4b4d      	ldr	r3, [pc, #308]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d105      	bne.n	80031f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80031ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031f6:	4b47      	ldr	r3, [pc, #284]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d11c      	bne.n	800323c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b44      	ldr	r3, [pc, #272]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d116      	bne.n	800323c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320e:	4b41      	ldr	r3, [pc, #260]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_RCC_OscConfig+0x186>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d001      	beq.n	8003226 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e1d3      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003226:	4b3b      	ldr	r3, [pc, #236]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4937      	ldr	r1, [pc, #220]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323a:	e03a      	b.n	80032b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d020      	beq.n	8003286 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003244:	4b34      	ldr	r3, [pc, #208]	@ (8003318 <HAL_RCC_OscConfig+0x278>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7fe f967 	bl	800151c <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003252:	f7fe f963 	bl	800151c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e1b4      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003264:	4b2b      	ldr	r3, [pc, #172]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003270:	4b28      	ldr	r3, [pc, #160]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	4925      	ldr	r1, [pc, #148]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]
 8003284:	e015      	b.n	80032b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003286:	4b24      	ldr	r3, [pc, #144]	@ (8003318 <HAL_RCC_OscConfig+0x278>)
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe f946 	bl	800151c <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003294:	f7fe f942 	bl	800151c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e193      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d036      	beq.n	800332c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c6:	4b15      	ldr	r3, [pc, #84]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032cc:	f7fe f926 	bl	800151c <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d4:	f7fe f922 	bl	800151c <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e173      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003314 <HAL_RCC_OscConfig+0x274>)
 80032e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f0      	beq.n	80032d4 <HAL_RCC_OscConfig+0x234>
 80032f2:	e01b      	b.n	800332c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f4:	4b09      	ldr	r3, [pc, #36]	@ (800331c <HAL_RCC_OscConfig+0x27c>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fa:	f7fe f90f 	bl	800151c <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003300:	e00e      	b.n	8003320 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003302:	f7fe f90b 	bl	800151c <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d907      	bls.n	8003320 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e15c      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
 8003314:	40023800 	.word	0x40023800
 8003318:	42470000 	.word	0x42470000
 800331c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003320:	4b8a      	ldr	r3, [pc, #552]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ea      	bne.n	8003302 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8097 	beq.w	8003468 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333e:	4b83      	ldr	r3, [pc, #524]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	4b7f      	ldr	r3, [pc, #508]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	4a7e      	ldr	r2, [pc, #504]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003358:	6413      	str	r3, [r2, #64]	@ 0x40
 800335a:	4b7c      	ldr	r3, [pc, #496]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	4b79      	ldr	r3, [pc, #484]	@ (8003550 <HAL_RCC_OscConfig+0x4b0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d118      	bne.n	80033a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003376:	4b76      	ldr	r3, [pc, #472]	@ (8003550 <HAL_RCC_OscConfig+0x4b0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a75      	ldr	r2, [pc, #468]	@ (8003550 <HAL_RCC_OscConfig+0x4b0>)
 800337c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003382:	f7fe f8cb 	bl	800151c <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338a:	f7fe f8c7 	bl	800151c <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e118      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339c:	4b6c      	ldr	r3, [pc, #432]	@ (8003550 <HAL_RCC_OscConfig+0x4b0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x31e>
 80033b0:	4b66      	ldr	r3, [pc, #408]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b4:	4a65      	ldr	r2, [pc, #404]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80033bc:	e01c      	b.n	80033f8 <HAL_RCC_OscConfig+0x358>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x340>
 80033c6:	4b61      	ldr	r3, [pc, #388]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ca:	4a60      	ldr	r2, [pc, #384]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033cc:	f043 0304 	orr.w	r3, r3, #4
 80033d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d2:	4b5e      	ldr	r3, [pc, #376]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	4a5d      	ldr	r2, [pc, #372]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0x358>
 80033e0:	4b5a      	ldr	r3, [pc, #360]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e4:	4a59      	ldr	r2, [pc, #356]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033e6:	f023 0301 	bic.w	r3, r3, #1
 80033ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ec:	4b57      	ldr	r3, [pc, #348]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f0:	4a56      	ldr	r2, [pc, #344]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80033f2:	f023 0304 	bic.w	r3, r3, #4
 80033f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d015      	beq.n	800342c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fe f88c 	bl	800151c <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003406:	e00a      	b.n	800341e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003408:	f7fe f888 	bl	800151c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e0d7      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341e:	4b4b      	ldr	r3, [pc, #300]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0ee      	beq.n	8003408 <HAL_RCC_OscConfig+0x368>
 800342a:	e014      	b.n	8003456 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fe f876 	bl	800151c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003432:	e00a      	b.n	800344a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003434:	f7fe f872 	bl	800151c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e0c1      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344a:	4b40      	ldr	r3, [pc, #256]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1ee      	bne.n	8003434 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d105      	bne.n	8003468 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345c:	4b3b      	ldr	r3, [pc, #236]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	4a3a      	ldr	r2, [pc, #232]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003466:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80ad 	beq.w	80035cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003472:	4b36      	ldr	r3, [pc, #216]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b08      	cmp	r3, #8
 800347c:	d060      	beq.n	8003540 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d145      	bne.n	8003512 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b33      	ldr	r3, [pc, #204]	@ (8003554 <HAL_RCC_OscConfig+0x4b4>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe f846 	bl	800151c <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003494:	f7fe f842 	bl	800151c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e093      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	4b29      	ldr	r3, [pc, #164]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69da      	ldr	r2, [r3, #28]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	019b      	lsls	r3, r3, #6
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c8:	085b      	lsrs	r3, r3, #1
 80034ca:	3b01      	subs	r3, #1
 80034cc:	041b      	lsls	r3, r3, #16
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d4:	061b      	lsls	r3, r3, #24
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034dc:	071b      	lsls	r3, r3, #28
 80034de:	491b      	ldr	r1, [pc, #108]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003554 <HAL_RCC_OscConfig+0x4b4>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fe f817 	bl	800151c <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f2:	f7fe f813 	bl	800151c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e064      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003504:	4b11      	ldr	r3, [pc, #68]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x452>
 8003510:	e05c      	b.n	80035cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b10      	ldr	r3, [pc, #64]	@ (8003554 <HAL_RCC_OscConfig+0x4b4>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe f800 	bl	800151c <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003520:	f7fd fffc 	bl	800151c <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e04d      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	4b06      	ldr	r3, [pc, #24]	@ (800354c <HAL_RCC_OscConfig+0x4ac>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x480>
 800353e:	e045      	b.n	80035cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d107      	bne.n	8003558 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e040      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
 800354c:	40023800 	.word	0x40023800
 8003550:	40007000 	.word	0x40007000
 8003554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003558:	4b1f      	ldr	r3, [pc, #124]	@ (80035d8 <HAL_RCC_OscConfig+0x538>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d030      	beq.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d129      	bne.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d122      	bne.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003588:	4013      	ands	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800358e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003590:	4293      	cmp	r3, r2
 8003592:	d119      	bne.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	3b01      	subs	r3, #1
 80035a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d10f      	bne.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800

080035dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e07b      	b.n	80036e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035fe:	d009      	beq.n	8003614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
 8003606:	e005      	b.n	8003614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fd fd60 	bl	80010f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800364a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003698:	ea42 0103 	orr.w	r1, r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	f003 0104 	and.w	r1, r3, #4
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	f003 0210 	and.w	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69da      	ldr	r2, [r3, #28]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e041      	b.n	8003784 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f839 	bl	800378c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3304      	adds	r3, #4
 800372a:	4619      	mov	r1, r3
 800372c:	4610      	mov	r0, r2
 800372e:	f000 fad1 	bl	8003cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d001      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e04e      	b.n	8003856 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a23      	ldr	r2, [pc, #140]	@ (8003864 <HAL_TIM_Base_Start_IT+0xc4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d022      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x80>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e2:	d01d      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x80>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003868 <HAL_TIM_Base_Start_IT+0xc8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d018      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x80>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1e      	ldr	r2, [pc, #120]	@ (800386c <HAL_TIM_Base_Start_IT+0xcc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d013      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x80>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003870 <HAL_TIM_Base_Start_IT+0xd0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00e      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x80>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1b      	ldr	r2, [pc, #108]	@ (8003874 <HAL_TIM_Base_Start_IT+0xd4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d009      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x80>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a19      	ldr	r2, [pc, #100]	@ (8003878 <HAL_TIM_Base_Start_IT+0xd8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x80>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a18      	ldr	r2, [pc, #96]	@ (800387c <HAL_TIM_Base_Start_IT+0xdc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d111      	bne.n	8003844 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b06      	cmp	r3, #6
 8003830:	d010      	beq.n	8003854 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0201 	orr.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003842:	e007      	b.n	8003854 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40010000 	.word	0x40010000
 8003868:	40000400 	.word	0x40000400
 800386c:	40000800 	.word	0x40000800
 8003870:	40000c00 	.word	0x40000c00
 8003874:	40010400 	.word	0x40010400
 8003878:	40014000 	.word	0x40014000
 800387c:	40001800 	.word	0x40001800

08003880 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e041      	b.n	8003916 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fd fc6c 	bl	8001184 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f000 fa08 	bl	8003cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d020      	beq.n	8003982 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d01b      	beq.n	8003982 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f06f 0202 	mvn.w	r2, #2
 8003952:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f995 	bl	8003c98 <HAL_TIM_IC_CaptureCallback>
 800396e:	e005      	b.n	800397c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f987 	bl	8003c84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f998 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d020      	beq.n	80039ce <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	d01b      	beq.n	80039ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f06f 0204 	mvn.w	r2, #4
 800399e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f96f 	bl	8003c98 <HAL_TIM_IC_CaptureCallback>
 80039ba:	e005      	b.n	80039c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f961 	bl	8003c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f972 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01b      	beq.n	8003a1a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f06f 0208 	mvn.w	r2, #8
 80039ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2204      	movs	r2, #4
 80039f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f949 	bl	8003c98 <HAL_TIM_IC_CaptureCallback>
 8003a06:	e005      	b.n	8003a14 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f93b 	bl	8003c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f94c 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01b      	beq.n	8003a66 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f06f 0210 	mvn.w	r2, #16
 8003a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2208      	movs	r2, #8
 8003a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f923 	bl	8003c98 <HAL_TIM_IC_CaptureCallback>
 8003a52:	e005      	b.n	8003a60 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f915 	bl	8003c84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f926 	bl	8003cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00c      	beq.n	8003a8a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d007      	beq.n	8003a8a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f06f 0201 	mvn.w	r2, #1
 8003a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7fd f9ad 	bl	8000de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00c      	beq.n	8003aae <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fbef 	bl	800428c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f8f7 	bl	8003cc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00c      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f06f 0220 	mvn.w	r2, #32
 8003aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fbc1 	bl	8004278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d101      	bne.n	8003b1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e0ae      	b.n	8003c7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b0c      	cmp	r3, #12
 8003b2a:	f200 809f 	bhi.w	8003c6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b34:	08003b69 	.word	0x08003b69
 8003b38:	08003c6d 	.word	0x08003c6d
 8003b3c:	08003c6d 	.word	0x08003c6d
 8003b40:	08003c6d 	.word	0x08003c6d
 8003b44:	08003ba9 	.word	0x08003ba9
 8003b48:	08003c6d 	.word	0x08003c6d
 8003b4c:	08003c6d 	.word	0x08003c6d
 8003b50:	08003c6d 	.word	0x08003c6d
 8003b54:	08003beb 	.word	0x08003beb
 8003b58:	08003c6d 	.word	0x08003c6d
 8003b5c:	08003c6d 	.word	0x08003c6d
 8003b60:	08003c6d 	.word	0x08003c6d
 8003b64:	08003c2b 	.word	0x08003c2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 f956 	bl	8003e20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0208 	orr.w	r2, r2, #8
 8003b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0204 	bic.w	r2, r2, #4
 8003b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6999      	ldr	r1, [r3, #24]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	691a      	ldr	r2, [r3, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	619a      	str	r2, [r3, #24]
      break;
 8003ba6:	e064      	b.n	8003c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f9a6 	bl	8003f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6999      	ldr	r1, [r3, #24]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	021a      	lsls	r2, r3, #8
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	619a      	str	r2, [r3, #24]
      break;
 8003be8:	e043      	b.n	8003c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 f9fb 	bl	8003fec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0208 	orr.w	r2, r2, #8
 8003c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0204 	bic.w	r2, r2, #4
 8003c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69d9      	ldr	r1, [r3, #28]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	61da      	str	r2, [r3, #28]
      break;
 8003c28:	e023      	b.n	8003c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fa4f 	bl	80040d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69d9      	ldr	r1, [r3, #28]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	021a      	lsls	r2, r3, #8
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	61da      	str	r2, [r3, #28]
      break;
 8003c6a:	e002      	b.n	8003c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a43      	ldr	r2, [pc, #268]	@ (8003df4 <TIM_Base_SetConfig+0x120>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d013      	beq.n	8003d14 <TIM_Base_SetConfig+0x40>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf2:	d00f      	beq.n	8003d14 <TIM_Base_SetConfig+0x40>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a40      	ldr	r2, [pc, #256]	@ (8003df8 <TIM_Base_SetConfig+0x124>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00b      	beq.n	8003d14 <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a3f      	ldr	r2, [pc, #252]	@ (8003dfc <TIM_Base_SetConfig+0x128>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d007      	beq.n	8003d14 <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a3e      	ldr	r2, [pc, #248]	@ (8003e00 <TIM_Base_SetConfig+0x12c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d003      	beq.n	8003d14 <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a3d      	ldr	r2, [pc, #244]	@ (8003e04 <TIM_Base_SetConfig+0x130>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d108      	bne.n	8003d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a32      	ldr	r2, [pc, #200]	@ (8003df4 <TIM_Base_SetConfig+0x120>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d02b      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d34:	d027      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a2f      	ldr	r2, [pc, #188]	@ (8003df8 <TIM_Base_SetConfig+0x124>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d023      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a2e      	ldr	r2, [pc, #184]	@ (8003dfc <TIM_Base_SetConfig+0x128>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01f      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a2d      	ldr	r2, [pc, #180]	@ (8003e00 <TIM_Base_SetConfig+0x12c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01b      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a2c      	ldr	r2, [pc, #176]	@ (8003e04 <TIM_Base_SetConfig+0x130>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d017      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2b      	ldr	r2, [pc, #172]	@ (8003e08 <TIM_Base_SetConfig+0x134>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d013      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a2a      	ldr	r2, [pc, #168]	@ (8003e0c <TIM_Base_SetConfig+0x138>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00f      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a29      	ldr	r2, [pc, #164]	@ (8003e10 <TIM_Base_SetConfig+0x13c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00b      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a28      	ldr	r2, [pc, #160]	@ (8003e14 <TIM_Base_SetConfig+0x140>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d007      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a27      	ldr	r2, [pc, #156]	@ (8003e18 <TIM_Base_SetConfig+0x144>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a26      	ldr	r2, [pc, #152]	@ (8003e1c <TIM_Base_SetConfig+0x148>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d108      	bne.n	8003d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a0e      	ldr	r2, [pc, #56]	@ (8003df4 <TIM_Base_SetConfig+0x120>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_Base_SetConfig+0xf2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a10      	ldr	r2, [pc, #64]	@ (8003e04 <TIM_Base_SetConfig+0x130>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d103      	bne.n	8003dce <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f043 0204 	orr.w	r2, r3, #4
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	601a      	str	r2, [r3, #0]
}
 8003de6:	bf00      	nop
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40010000 	.word	0x40010000
 8003df8:	40000400 	.word	0x40000400
 8003dfc:	40000800 	.word	0x40000800
 8003e00:	40000c00 	.word	0x40000c00
 8003e04:	40010400 	.word	0x40010400
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40014400 	.word	0x40014400
 8003e10:	40014800 	.word	0x40014800
 8003e14:	40001800 	.word	0x40001800
 8003e18:	40001c00 	.word	0x40001c00
 8003e1c:	40002000 	.word	0x40002000

08003e20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f023 0201 	bic.w	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f023 0302 	bic.w	r3, r3, #2
 8003e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a20      	ldr	r2, [pc, #128]	@ (8003ef8 <TIM_OC1_SetConfig+0xd8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_OC1_SetConfig+0x64>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8003efc <TIM_OC1_SetConfig+0xdc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d10c      	bne.n	8003e9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0308 	bic.w	r3, r3, #8
 8003e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f023 0304 	bic.w	r3, r3, #4
 8003e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a15      	ldr	r2, [pc, #84]	@ (8003ef8 <TIM_OC1_SetConfig+0xd8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d003      	beq.n	8003eae <TIM_OC1_SetConfig+0x8e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a14      	ldr	r2, [pc, #80]	@ (8003efc <TIM_OC1_SetConfig+0xdc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d111      	bne.n	8003ed2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	621a      	str	r2, [r3, #32]
}
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	40010000 	.word	0x40010000
 8003efc:	40010400 	.word	0x40010400

08003f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	f023 0210 	bic.w	r2, r3, #16
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f023 0320 	bic.w	r3, r3, #32
 8003f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a22      	ldr	r2, [pc, #136]	@ (8003fe4 <TIM_OC2_SetConfig+0xe4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d003      	beq.n	8003f68 <TIM_OC2_SetConfig+0x68>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a21      	ldr	r2, [pc, #132]	@ (8003fe8 <TIM_OC2_SetConfig+0xe8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d10d      	bne.n	8003f84 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a17      	ldr	r2, [pc, #92]	@ (8003fe4 <TIM_OC2_SetConfig+0xe4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d003      	beq.n	8003f94 <TIM_OC2_SetConfig+0x94>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a16      	ldr	r2, [pc, #88]	@ (8003fe8 <TIM_OC2_SetConfig+0xe8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d113      	bne.n	8003fbc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	621a      	str	r2, [r3, #32]
}
 8003fd6:	bf00      	nop
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	40010400 	.word	0x40010400

08003fec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a21      	ldr	r2, [pc, #132]	@ (80040cc <TIM_OC3_SetConfig+0xe0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_OC3_SetConfig+0x66>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a20      	ldr	r2, [pc, #128]	@ (80040d0 <TIM_OC3_SetConfig+0xe4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d10d      	bne.n	800406e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004058:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800406c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <TIM_OC3_SetConfig+0xe0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_OC3_SetConfig+0x92>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a15      	ldr	r2, [pc, #84]	@ (80040d0 <TIM_OC3_SetConfig+0xe4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d113      	bne.n	80040a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800408c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	621a      	str	r2, [r3, #32]
}
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40010400 	.word	0x40010400

080040d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800410a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800411e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	031b      	lsls	r3, r3, #12
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a12      	ldr	r2, [pc, #72]	@ (8004178 <TIM_OC4_SetConfig+0xa4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d003      	beq.n	800413c <TIM_OC4_SetConfig+0x68>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a11      	ldr	r2, [pc, #68]	@ (800417c <TIM_OC4_SetConfig+0xa8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d109      	bne.n	8004150 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	019b      	lsls	r3, r3, #6
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40010000 	.word	0x40010000
 800417c:	40010400 	.word	0x40010400

08004180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004194:	2302      	movs	r3, #2
 8004196:	e05a      	b.n	800424e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a21      	ldr	r2, [pc, #132]	@ (800425c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d022      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e4:	d01d      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d018      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00e      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a18      	ldr	r2, [pc, #96]	@ (800426c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d009      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a17      	ldr	r2, [pc, #92]	@ (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d004      	beq.n	8004222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a15      	ldr	r2, [pc, #84]	@ (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d10c      	bne.n	800423c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004228:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	4313      	orrs	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40010000 	.word	0x40010000
 8004260:	40000400 	.word	0x40000400
 8004264:	40000800 	.word	0x40000800
 8004268:	40000c00 	.word	0x40000c00
 800426c:	40010400 	.word	0x40010400
 8004270:	40014000 	.word	0x40014000
 8004274:	40001800 	.word	0x40001800

08004278 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e042      	b.n	8004338 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7fc ffb8 	bl	800123c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	@ 0x24
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f82b 	bl	8004340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004344:	b0c0      	sub	sp, #256	@ 0x100
 8004346:	af00      	add	r7, sp, #0
 8004348:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	68d9      	ldr	r1, [r3, #12]
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	ea40 0301 	orr.w	r3, r0, r1
 8004368:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	431a      	orrs	r2, r3
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	431a      	orrs	r2, r3
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004398:	f021 010c 	bic.w	r1, r1, #12
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043a6:	430b      	orrs	r3, r1
 80043a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ba:	6999      	ldr	r1, [r3, #24]
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	ea40 0301 	orr.w	r3, r0, r1
 80043c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b8f      	ldr	r3, [pc, #572]	@ (800460c <UART_SetConfig+0x2cc>)
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d005      	beq.n	80043e0 <UART_SetConfig+0xa0>
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b8d      	ldr	r3, [pc, #564]	@ (8004610 <UART_SetConfig+0x2d0>)
 80043dc:	429a      	cmp	r2, r3
 80043de:	d104      	bne.n	80043ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043e0:	f7fe fbe8 	bl	8002bb4 <HAL_RCC_GetPCLK2Freq>
 80043e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043e8:	e003      	b.n	80043f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043ea:	f7fe fbcf 	bl	8002b8c <HAL_RCC_GetPCLK1Freq>
 80043ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043fc:	f040 810c 	bne.w	8004618 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004404:	2200      	movs	r2, #0
 8004406:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800440a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800440e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004412:	4622      	mov	r2, r4
 8004414:	462b      	mov	r3, r5
 8004416:	1891      	adds	r1, r2, r2
 8004418:	65b9      	str	r1, [r7, #88]	@ 0x58
 800441a:	415b      	adcs	r3, r3
 800441c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800441e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004422:	4621      	mov	r1, r4
 8004424:	eb12 0801 	adds.w	r8, r2, r1
 8004428:	4629      	mov	r1, r5
 800442a:	eb43 0901 	adc.w	r9, r3, r1
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800443a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800443e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004442:	4690      	mov	r8, r2
 8004444:	4699      	mov	r9, r3
 8004446:	4623      	mov	r3, r4
 8004448:	eb18 0303 	adds.w	r3, r8, r3
 800444c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004450:	462b      	mov	r3, r5
 8004452:	eb49 0303 	adc.w	r3, r9, r3
 8004456:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800445a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004466:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800446a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800446e:	460b      	mov	r3, r1
 8004470:	18db      	adds	r3, r3, r3
 8004472:	653b      	str	r3, [r7, #80]	@ 0x50
 8004474:	4613      	mov	r3, r2
 8004476:	eb42 0303 	adc.w	r3, r2, r3
 800447a:	657b      	str	r3, [r7, #84]	@ 0x54
 800447c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004480:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004484:	f7fb fec4 	bl	8000210 <__aeabi_uldivmod>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4b61      	ldr	r3, [pc, #388]	@ (8004614 <UART_SetConfig+0x2d4>)
 800448e:	fba3 2302 	umull	r2, r3, r3, r2
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	011c      	lsls	r4, r3, #4
 8004496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800449a:	2200      	movs	r2, #0
 800449c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044a8:	4642      	mov	r2, r8
 80044aa:	464b      	mov	r3, r9
 80044ac:	1891      	adds	r1, r2, r2
 80044ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044b0:	415b      	adcs	r3, r3
 80044b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044b8:	4641      	mov	r1, r8
 80044ba:	eb12 0a01 	adds.w	sl, r2, r1
 80044be:	4649      	mov	r1, r9
 80044c0:	eb43 0b01 	adc.w	fp, r3, r1
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044d8:	4692      	mov	sl, r2
 80044da:	469b      	mov	fp, r3
 80044dc:	4643      	mov	r3, r8
 80044de:	eb1a 0303 	adds.w	r3, sl, r3
 80044e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044e6:	464b      	mov	r3, r9
 80044e8:	eb4b 0303 	adc.w	r3, fp, r3
 80044ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004500:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004504:	460b      	mov	r3, r1
 8004506:	18db      	adds	r3, r3, r3
 8004508:	643b      	str	r3, [r7, #64]	@ 0x40
 800450a:	4613      	mov	r3, r2
 800450c:	eb42 0303 	adc.w	r3, r2, r3
 8004510:	647b      	str	r3, [r7, #68]	@ 0x44
 8004512:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004516:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800451a:	f7fb fe79 	bl	8000210 <__aeabi_uldivmod>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4611      	mov	r1, r2
 8004524:	4b3b      	ldr	r3, [pc, #236]	@ (8004614 <UART_SetConfig+0x2d4>)
 8004526:	fba3 2301 	umull	r2, r3, r3, r1
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2264      	movs	r2, #100	@ 0x64
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	1acb      	subs	r3, r1, r3
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800453a:	4b36      	ldr	r3, [pc, #216]	@ (8004614 <UART_SetConfig+0x2d4>)
 800453c:	fba3 2302 	umull	r2, r3, r3, r2
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004548:	441c      	add	r4, r3
 800454a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800454e:	2200      	movs	r2, #0
 8004550:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004554:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004558:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800455c:	4642      	mov	r2, r8
 800455e:	464b      	mov	r3, r9
 8004560:	1891      	adds	r1, r2, r2
 8004562:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004564:	415b      	adcs	r3, r3
 8004566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004568:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800456c:	4641      	mov	r1, r8
 800456e:	1851      	adds	r1, r2, r1
 8004570:	6339      	str	r1, [r7, #48]	@ 0x30
 8004572:	4649      	mov	r1, r9
 8004574:	414b      	adcs	r3, r1
 8004576:	637b      	str	r3, [r7, #52]	@ 0x34
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004584:	4659      	mov	r1, fp
 8004586:	00cb      	lsls	r3, r1, #3
 8004588:	4651      	mov	r1, sl
 800458a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800458e:	4651      	mov	r1, sl
 8004590:	00ca      	lsls	r2, r1, #3
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	4603      	mov	r3, r0
 8004598:	4642      	mov	r2, r8
 800459a:	189b      	adds	r3, r3, r2
 800459c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045a0:	464b      	mov	r3, r9
 80045a2:	460a      	mov	r2, r1
 80045a4:	eb42 0303 	adc.w	r3, r2, r3
 80045a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80045bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045c0:	460b      	mov	r3, r1
 80045c2:	18db      	adds	r3, r3, r3
 80045c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045c6:	4613      	mov	r3, r2
 80045c8:	eb42 0303 	adc.w	r3, r2, r3
 80045cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045d6:	f7fb fe1b 	bl	8000210 <__aeabi_uldivmod>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4b0d      	ldr	r3, [pc, #52]	@ (8004614 <UART_SetConfig+0x2d4>)
 80045e0:	fba3 1302 	umull	r1, r3, r3, r2
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	2164      	movs	r1, #100	@ 0x64
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	3332      	adds	r3, #50	@ 0x32
 80045f2:	4a08      	ldr	r2, [pc, #32]	@ (8004614 <UART_SetConfig+0x2d4>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	f003 0207 	and.w	r2, r3, #7
 80045fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4422      	add	r2, r4
 8004606:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004608:	e106      	b.n	8004818 <UART_SetConfig+0x4d8>
 800460a:	bf00      	nop
 800460c:	40011000 	.word	0x40011000
 8004610:	40011400 	.word	0x40011400
 8004614:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800461c:	2200      	movs	r2, #0
 800461e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004622:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004626:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800462a:	4642      	mov	r2, r8
 800462c:	464b      	mov	r3, r9
 800462e:	1891      	adds	r1, r2, r2
 8004630:	6239      	str	r1, [r7, #32]
 8004632:	415b      	adcs	r3, r3
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
 8004636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800463a:	4641      	mov	r1, r8
 800463c:	1854      	adds	r4, r2, r1
 800463e:	4649      	mov	r1, r9
 8004640:	eb43 0501 	adc.w	r5, r3, r1
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	00eb      	lsls	r3, r5, #3
 800464e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004652:	00e2      	lsls	r2, r4, #3
 8004654:	4614      	mov	r4, r2
 8004656:	461d      	mov	r5, r3
 8004658:	4643      	mov	r3, r8
 800465a:	18e3      	adds	r3, r4, r3
 800465c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004660:	464b      	mov	r3, r9
 8004662:	eb45 0303 	adc.w	r3, r5, r3
 8004666:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800466a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004676:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004686:	4629      	mov	r1, r5
 8004688:	008b      	lsls	r3, r1, #2
 800468a:	4621      	mov	r1, r4
 800468c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004690:	4621      	mov	r1, r4
 8004692:	008a      	lsls	r2, r1, #2
 8004694:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004698:	f7fb fdba 	bl	8000210 <__aeabi_uldivmod>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4b60      	ldr	r3, [pc, #384]	@ (8004824 <UART_SetConfig+0x4e4>)
 80046a2:	fba3 2302 	umull	r2, r3, r3, r2
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	011c      	lsls	r4, r3, #4
 80046aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046bc:	4642      	mov	r2, r8
 80046be:	464b      	mov	r3, r9
 80046c0:	1891      	adds	r1, r2, r2
 80046c2:	61b9      	str	r1, [r7, #24]
 80046c4:	415b      	adcs	r3, r3
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046cc:	4641      	mov	r1, r8
 80046ce:	1851      	adds	r1, r2, r1
 80046d0:	6139      	str	r1, [r7, #16]
 80046d2:	4649      	mov	r1, r9
 80046d4:	414b      	adcs	r3, r1
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046e4:	4659      	mov	r1, fp
 80046e6:	00cb      	lsls	r3, r1, #3
 80046e8:	4651      	mov	r1, sl
 80046ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ee:	4651      	mov	r1, sl
 80046f0:	00ca      	lsls	r2, r1, #3
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	4642      	mov	r2, r8
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004700:	464b      	mov	r3, r9
 8004702:	460a      	mov	r2, r1
 8004704:	eb42 0303 	adc.w	r3, r2, r3
 8004708:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004716:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004724:	4649      	mov	r1, r9
 8004726:	008b      	lsls	r3, r1, #2
 8004728:	4641      	mov	r1, r8
 800472a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800472e:	4641      	mov	r1, r8
 8004730:	008a      	lsls	r2, r1, #2
 8004732:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004736:	f7fb fd6b 	bl	8000210 <__aeabi_uldivmod>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4611      	mov	r1, r2
 8004740:	4b38      	ldr	r3, [pc, #224]	@ (8004824 <UART_SetConfig+0x4e4>)
 8004742:	fba3 2301 	umull	r2, r3, r3, r1
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	2264      	movs	r2, #100	@ 0x64
 800474a:	fb02 f303 	mul.w	r3, r2, r3
 800474e:	1acb      	subs	r3, r1, r3
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	3332      	adds	r3, #50	@ 0x32
 8004754:	4a33      	ldr	r2, [pc, #204]	@ (8004824 <UART_SetConfig+0x4e4>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004760:	441c      	add	r4, r3
 8004762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004766:	2200      	movs	r2, #0
 8004768:	673b      	str	r3, [r7, #112]	@ 0x70
 800476a:	677a      	str	r2, [r7, #116]	@ 0x74
 800476c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004770:	4642      	mov	r2, r8
 8004772:	464b      	mov	r3, r9
 8004774:	1891      	adds	r1, r2, r2
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	415b      	adcs	r3, r3
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004780:	4641      	mov	r1, r8
 8004782:	1851      	adds	r1, r2, r1
 8004784:	6039      	str	r1, [r7, #0]
 8004786:	4649      	mov	r1, r9
 8004788:	414b      	adcs	r3, r1
 800478a:	607b      	str	r3, [r7, #4]
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004798:	4659      	mov	r1, fp
 800479a:	00cb      	lsls	r3, r1, #3
 800479c:	4651      	mov	r1, sl
 800479e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047a2:	4651      	mov	r1, sl
 80047a4:	00ca      	lsls	r2, r1, #3
 80047a6:	4610      	mov	r0, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	4603      	mov	r3, r0
 80047ac:	4642      	mov	r2, r8
 80047ae:	189b      	adds	r3, r3, r2
 80047b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047b2:	464b      	mov	r3, r9
 80047b4:	460a      	mov	r2, r1
 80047b6:	eb42 0303 	adc.w	r3, r2, r3
 80047ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80047c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047d4:	4649      	mov	r1, r9
 80047d6:	008b      	lsls	r3, r1, #2
 80047d8:	4641      	mov	r1, r8
 80047da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047de:	4641      	mov	r1, r8
 80047e0:	008a      	lsls	r2, r1, #2
 80047e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047e6:	f7fb fd13 	bl	8000210 <__aeabi_uldivmod>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004824 <UART_SetConfig+0x4e4>)
 80047f0:	fba3 1302 	umull	r1, r3, r3, r2
 80047f4:	095b      	lsrs	r3, r3, #5
 80047f6:	2164      	movs	r1, #100	@ 0x64
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	3332      	adds	r3, #50	@ 0x32
 8004802:	4a08      	ldr	r2, [pc, #32]	@ (8004824 <UART_SetConfig+0x4e4>)
 8004804:	fba2 2303 	umull	r2, r3, r2, r3
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	f003 020f 	and.w	r2, r3, #15
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4422      	add	r2, r4
 8004816:	609a      	str	r2, [r3, #8]
}
 8004818:	bf00      	nop
 800481a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800481e:	46bd      	mov	sp, r7
 8004820:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004824:	51eb851f 	.word	0x51eb851f

08004828 <__NVIC_SetPriority>:
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	6039      	str	r1, [r7, #0]
 8004832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004838:	2b00      	cmp	r3, #0
 800483a:	db0a      	blt.n	8004852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	b2da      	uxtb	r2, r3
 8004840:	490c      	ldr	r1, [pc, #48]	@ (8004874 <__NVIC_SetPriority+0x4c>)
 8004842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004846:	0112      	lsls	r2, r2, #4
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	440b      	add	r3, r1
 800484c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004850:	e00a      	b.n	8004868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	b2da      	uxtb	r2, r3
 8004856:	4908      	ldr	r1, [pc, #32]	@ (8004878 <__NVIC_SetPriority+0x50>)
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	3b04      	subs	r3, #4
 8004860:	0112      	lsls	r2, r2, #4
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	440b      	add	r3, r1
 8004866:	761a      	strb	r2, [r3, #24]
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	e000e100 	.word	0xe000e100
 8004878:	e000ed00 	.word	0xe000ed00

0800487c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004880:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <SysTick_Handler+0x1c>)
 8004882:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004884:	f001 fd18 	bl	80062b8 <xTaskGetSchedulerState>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d001      	beq.n	8004892 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800488e:	f002 fb13 	bl	8006eb8 <xPortSysTickHandler>
  }
}
 8004892:	bf00      	nop
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	e000e010 	.word	0xe000e010

0800489c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80048a0:	2100      	movs	r1, #0
 80048a2:	f06f 0004 	mvn.w	r0, #4
 80048a6:	f7ff ffbf 	bl	8004828 <__NVIC_SetPriority>
#endif
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048b6:	f3ef 8305 	mrs	r3, IPSR
 80048ba:	603b      	str	r3, [r7, #0]
  return(result);
 80048bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80048c2:	f06f 0305 	mvn.w	r3, #5
 80048c6:	607b      	str	r3, [r7, #4]
 80048c8:	e00c      	b.n	80048e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048ca:	4b0a      	ldr	r3, [pc, #40]	@ (80048f4 <osKernelInitialize+0x44>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d105      	bne.n	80048de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048d2:	4b08      	ldr	r3, [pc, #32]	@ (80048f4 <osKernelInitialize+0x44>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048d8:	2300      	movs	r3, #0
 80048da:	607b      	str	r3, [r7, #4]
 80048dc:	e002      	b.n	80048e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80048de:	f04f 33ff 	mov.w	r3, #4294967295
 80048e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048e4:	687b      	ldr	r3, [r7, #4]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000730 	.word	0x20000730

080048f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048fe:	f3ef 8305 	mrs	r3, IPSR
 8004902:	603b      	str	r3, [r7, #0]
  return(result);
 8004904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <osKernelStart+0x1a>
    stat = osErrorISR;
 800490a:	f06f 0305 	mvn.w	r3, #5
 800490e:	607b      	str	r3, [r7, #4]
 8004910:	e010      	b.n	8004934 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004912:	4b0b      	ldr	r3, [pc, #44]	@ (8004940 <osKernelStart+0x48>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d109      	bne.n	800492e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800491a:	f7ff ffbf 	bl	800489c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800491e:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <osKernelStart+0x48>)
 8004920:	2202      	movs	r2, #2
 8004922:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004924:	f001 f87a 	bl	8005a1c <vTaskStartScheduler>
      stat = osOK;
 8004928:	2300      	movs	r3, #0
 800492a:	607b      	str	r3, [r7, #4]
 800492c:	e002      	b.n	8004934 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800492e:	f04f 33ff 	mov.w	r3, #4294967295
 8004932:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004934:	687b      	ldr	r3, [r7, #4]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20000730 	.word	0x20000730

08004944 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b08e      	sub	sp, #56	@ 0x38
 8004948:	af04      	add	r7, sp, #16
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004950:	2300      	movs	r3, #0
 8004952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004954:	f3ef 8305 	mrs	r3, IPSR
 8004958:	617b      	str	r3, [r7, #20]
  return(result);
 800495a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800495c:	2b00      	cmp	r3, #0
 800495e:	d17e      	bne.n	8004a5e <osThreadNew+0x11a>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d07b      	beq.n	8004a5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004966:	2380      	movs	r3, #128	@ 0x80
 8004968:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800496a:	2318      	movs	r3, #24
 800496c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004972:	f04f 33ff 	mov.w	r3, #4294967295
 8004976:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d045      	beq.n	8004a0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <osThreadNew+0x48>
        name = attr->name;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <osThreadNew+0x6e>
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b38      	cmp	r3, #56	@ 0x38
 80049a4:	d805      	bhi.n	80049b2 <osThreadNew+0x6e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <osThreadNew+0x72>
        return (NULL);
 80049b2:	2300      	movs	r3, #0
 80049b4:	e054      	b.n	8004a60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	089b      	lsrs	r3, r3, #2
 80049c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00e      	beq.n	80049ec <osThreadNew+0xa8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	2b5b      	cmp	r3, #91	@ 0x5b
 80049d4:	d90a      	bls.n	80049ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d006      	beq.n	80049ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <osThreadNew+0xa8>
        mem = 1;
 80049e6:	2301      	movs	r3, #1
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	e010      	b.n	8004a0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10c      	bne.n	8004a0e <osThreadNew+0xca>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d108      	bne.n	8004a0e <osThreadNew+0xca>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d104      	bne.n	8004a0e <osThreadNew+0xca>
          mem = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61bb      	str	r3, [r7, #24]
 8004a08:	e001      	b.n	8004a0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d110      	bne.n	8004a36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a1c:	9202      	str	r2, [sp, #8]
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	6a3a      	ldr	r2, [r7, #32]
 8004a28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 fe1a 	bl	8005664 <xTaskCreateStatic>
 8004a30:	4603      	mov	r3, r0
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	e013      	b.n	8004a5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d110      	bne.n	8004a5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	f107 0310 	add.w	r3, r7, #16
 8004a44:	9301      	str	r3, [sp, #4]
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fe68 	bl	8005724 <xTaskCreate>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d001      	beq.n	8004a5e <osThreadNew+0x11a>
            hTask = NULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a5e:	693b      	ldr	r3, [r7, #16]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3728      	adds	r7, #40	@ 0x28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a70:	f3ef 8305 	mrs	r3, IPSR
 8004a74:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <osDelay+0x1c>
    stat = osErrorISR;
 8004a7c:	f06f 0305 	mvn.w	r3, #5
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	e007      	b.n	8004a94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 ff8e 	bl	80059b0 <vTaskDelay>
    }
  }

  return (stat);
 8004a94:	68fb      	ldr	r3, [r7, #12]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4a07      	ldr	r2, [pc, #28]	@ (8004acc <vApplicationGetIdleTaskMemory+0x2c>)
 8004ab0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	4a06      	ldr	r2, [pc, #24]	@ (8004ad0 <vApplicationGetIdleTaskMemory+0x30>)
 8004ab6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2280      	movs	r2, #128	@ 0x80
 8004abc:	601a      	str	r2, [r3, #0]
}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	20000734 	.word	0x20000734
 8004ad0:	20000790 	.word	0x20000790

08004ad4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a07      	ldr	r2, [pc, #28]	@ (8004b00 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ae4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4a06      	ldr	r2, [pc, #24]	@ (8004b04 <vApplicationGetTimerTaskMemory+0x30>)
 8004aea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004af2:	601a      	str	r2, [r3, #0]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	20000990 	.word	0x20000990
 8004b04:	200009ec 	.word	0x200009ec

08004b08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f103 0208 	add.w	r2, r3, #8
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f103 0208 	add.w	r2, r3, #8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f103 0208 	add.w	r2, r3, #8
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b62:	b480      	push	{r7}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	601a      	str	r2, [r3, #0]
}
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004baa:	b480      	push	{r7}
 8004bac:	b085      	sub	sp, #20
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d103      	bne.n	8004bca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e00c      	b.n	8004be4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3308      	adds	r3, #8
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	e002      	b.n	8004bd8 <vListInsert+0x2e>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d2f6      	bcs.n	8004bd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	601a      	str	r2, [r3, #0]
}
 8004c10:	bf00      	nop
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6892      	ldr	r2, [r2, #8]
 8004c32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6852      	ldr	r2, [r2, #4]
 8004c3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d103      	bne.n	8004c50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	1e5a      	subs	r2, r3, #1
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10b      	bne.n	8004c9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c96:	bf00      	nop
 8004c98:	bf00      	nop
 8004c9a:	e7fd      	b.n	8004c98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c9c:	f002 f87c 	bl	8006d98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca8:	68f9      	ldr	r1, [r7, #12]
 8004caa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	441a      	add	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004cd2:	fb01 f303 	mul.w	r3, r1, r3
 8004cd6:	441a      	add	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	22ff      	movs	r2, #255	@ 0xff
 8004ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	22ff      	movs	r2, #255	@ 0xff
 8004ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d114      	bne.n	8004d1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01a      	beq.n	8004d30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3310      	adds	r3, #16
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f001 f91a 	bl	8005f38 <xTaskRemoveFromEventList>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d012      	beq.n	8004d30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d40 <xQueueGenericReset+0xd0>)
 8004d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	e009      	b.n	8004d30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3310      	adds	r3, #16
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fef1 	bl	8004b08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3324      	adds	r3, #36	@ 0x24
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff feec 	bl	8004b08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d30:	f002 f864 	bl	8006dfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d34:	2301      	movs	r3, #1
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	e000ed04 	.word	0xe000ed04

08004d44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08e      	sub	sp, #56	@ 0x38
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10b      	bne.n	8004d70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d6a:	bf00      	nop
 8004d6c:	bf00      	nop
 8004d6e:	e7fd      	b.n	8004d6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10b      	bne.n	8004d8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d88:	bf00      	nop
 8004d8a:	bf00      	nop
 8004d8c:	e7fd      	b.n	8004d8a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <xQueueGenericCreateStatic+0x56>
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <xQueueGenericCreateStatic+0x5a>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <xQueueGenericCreateStatic+0x5c>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10b      	bne.n	8004dbc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	623b      	str	r3, [r7, #32]
}
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	e7fd      	b.n	8004db8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <xQueueGenericCreateStatic+0x84>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <xQueueGenericCreateStatic+0x88>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <xQueueGenericCreateStatic+0x8a>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10b      	bne.n	8004dea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	61fb      	str	r3, [r7, #28]
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	e7fd      	b.n	8004de6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004dea:	2350      	movs	r3, #80	@ 0x50
 8004dec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b50      	cmp	r3, #80	@ 0x50
 8004df2:	d00b      	beq.n	8004e0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	61bb      	str	r3, [r7, #24]
}
 8004e06:	bf00      	nop
 8004e08:	bf00      	nop
 8004e0a:	e7fd      	b.n	8004e08 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00d      	beq.n	8004e34 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f000 f805 	bl	8004e3e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3730      	adds	r7, #48	@ 0x30
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d103      	bne.n	8004e5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	e002      	b.n	8004e60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	69b8      	ldr	r0, [r7, #24]
 8004e70:	f7ff fefe 	bl	8004c70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	78fa      	ldrb	r2, [r7, #3]
 8004e78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08e      	sub	sp, #56	@ 0x38
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e92:	2300      	movs	r3, #0
 8004e94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <xQueueGenericSend+0x34>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	e7fd      	b.n	8004eb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d103      	bne.n	8004ec6 <xQueueGenericSend+0x42>
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <xQueueGenericSend+0x46>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <xQueueGenericSend+0x48>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <xQueueGenericSend+0x64>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	e7fd      	b.n	8004ee4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d103      	bne.n	8004ef6 <xQueueGenericSend+0x72>
 8004eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <xQueueGenericSend+0x76>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <xQueueGenericSend+0x78>
 8004efa:	2300      	movs	r3, #0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10b      	bne.n	8004f18 <xQueueGenericSend+0x94>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	623b      	str	r3, [r7, #32]
}
 8004f12:	bf00      	nop
 8004f14:	bf00      	nop
 8004f16:	e7fd      	b.n	8004f14 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f18:	f001 f9ce 	bl	80062b8 <xTaskGetSchedulerState>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <xQueueGenericSend+0xa4>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <xQueueGenericSend+0xa8>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <xQueueGenericSend+0xaa>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10b      	bne.n	8004f4a <xQueueGenericSend+0xc6>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	61fb      	str	r3, [r7, #28]
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	e7fd      	b.n	8004f46 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f4a:	f001 ff25 	bl	8006d98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d302      	bcc.n	8004f60 <xQueueGenericSend+0xdc>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d129      	bne.n	8004fb4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f66:	f000 fa0f 	bl	8005388 <prvCopyDataToQueue>
 8004f6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d010      	beq.n	8004f96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f76:	3324      	adds	r3, #36	@ 0x24
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 ffdd 	bl	8005f38 <xTaskRemoveFromEventList>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d013      	beq.n	8004fac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f84:	4b3f      	ldr	r3, [pc, #252]	@ (8005084 <xQueueGenericSend+0x200>)
 8004f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	e00a      	b.n	8004fac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f9c:	4b39      	ldr	r3, [pc, #228]	@ (8005084 <xQueueGenericSend+0x200>)
 8004f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fac:	f001 ff26 	bl	8006dfc <vPortExitCritical>
				return pdPASS;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e063      	b.n	800507c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fba:	f001 ff1f 	bl	8006dfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e05c      	b.n	800507c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fc8:	f107 0314 	add.w	r3, r7, #20
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f001 f817 	bl	8006000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fd6:	f001 ff11 	bl	8006dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fda:	f000 fd87 	bl	8005aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fde:	f001 fedb 	bl	8006d98 <vPortEnterCritical>
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fe8:	b25b      	sxtb	r3, r3
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d103      	bne.n	8004ff8 <xQueueGenericSend+0x174>
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d103      	bne.n	800500e <xQueueGenericSend+0x18a>
 8005006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800500e:	f001 fef5 	bl	8006dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005012:	1d3a      	adds	r2, r7, #4
 8005014:	f107 0314 	add.w	r3, r7, #20
 8005018:	4611      	mov	r1, r2
 800501a:	4618      	mov	r0, r3
 800501c:	f001 f806 	bl	800602c <xTaskCheckForTimeOut>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d124      	bne.n	8005070 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005026:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005028:	f000 faa6 	bl	8005578 <prvIsQueueFull>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d018      	beq.n	8005064 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005034:	3310      	adds	r3, #16
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	4611      	mov	r1, r2
 800503a:	4618      	mov	r0, r3
 800503c:	f000 ff2a 	bl	8005e94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005042:	f000 fa31 	bl	80054a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005046:	f000 fd5f 	bl	8005b08 <xTaskResumeAll>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	f47f af7c 	bne.w	8004f4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005052:	4b0c      	ldr	r3, [pc, #48]	@ (8005084 <xQueueGenericSend+0x200>)
 8005054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	e772      	b.n	8004f4a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005064:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005066:	f000 fa1f 	bl	80054a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800506a:	f000 fd4d 	bl	8005b08 <xTaskResumeAll>
 800506e:	e76c      	b.n	8004f4a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005070:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005072:	f000 fa19 	bl	80054a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005076:	f000 fd47 	bl	8005b08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800507a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800507c:	4618      	mov	r0, r3
 800507e:	3738      	adds	r7, #56	@ 0x38
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b090      	sub	sp, #64	@ 0x40
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800509a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10b      	bne.n	80050b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80050b2:	bf00      	nop
 80050b4:	bf00      	nop
 80050b6:	e7fd      	b.n	80050b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d103      	bne.n	80050c6 <xQueueGenericSendFromISR+0x3e>
 80050be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <xQueueGenericSendFromISR+0x42>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <xQueueGenericSendFromISR+0x44>
 80050ca:	2300      	movs	r3, #0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10b      	bne.n	80050e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050e2:	bf00      	nop
 80050e4:	bf00      	nop
 80050e6:	e7fd      	b.n	80050e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d103      	bne.n	80050f6 <xQueueGenericSendFromISR+0x6e>
 80050ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <xQueueGenericSendFromISR+0x72>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <xQueueGenericSendFromISR+0x74>
 80050fa:	2300      	movs	r3, #0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10b      	bne.n	8005118 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	623b      	str	r3, [r7, #32]
}
 8005112:	bf00      	nop
 8005114:	bf00      	nop
 8005116:	e7fd      	b.n	8005114 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005118:	f001 ff1e 	bl	8006f58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800511c:	f3ef 8211 	mrs	r2, BASEPRI
 8005120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	61fa      	str	r2, [r7, #28]
 8005132:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005134:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005136:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800513c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005140:	429a      	cmp	r2, r3
 8005142:	d302      	bcc.n	800514a <xQueueGenericSendFromISR+0xc2>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d12f      	bne.n	80051aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800514a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005150:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005158:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	68b9      	ldr	r1, [r7, #8]
 800515e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005160:	f000 f912 	bl	8005388 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005164:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d112      	bne.n	8005194 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800516e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005172:	2b00      	cmp	r3, #0
 8005174:	d016      	beq.n	80051a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005178:	3324      	adds	r3, #36	@ 0x24
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fedc 	bl	8005f38 <xTaskRemoveFromEventList>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00e      	beq.n	80051a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00b      	beq.n	80051a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	e007      	b.n	80051a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005194:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005198:	3301      	adds	r3, #1
 800519a:	b2db      	uxtb	r3, r3
 800519c:	b25a      	sxtb	r2, r3
 800519e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80051a4:	2301      	movs	r3, #1
 80051a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80051a8:	e001      	b.n	80051ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3740      	adds	r7, #64	@ 0x40
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08c      	sub	sp, #48	@ 0x30
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051d0:	2300      	movs	r3, #0
 80051d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10b      	bne.n	80051f6 <xQueueReceive+0x32>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	623b      	str	r3, [r7, #32]
}
 80051f0:	bf00      	nop
 80051f2:	bf00      	nop
 80051f4:	e7fd      	b.n	80051f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d103      	bne.n	8005204 <xQueueReceive+0x40>
 80051fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <xQueueReceive+0x44>
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <xQueueReceive+0x46>
 8005208:	2300      	movs	r3, #0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10b      	bne.n	8005226 <xQueueReceive+0x62>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	61fb      	str	r3, [r7, #28]
}
 8005220:	bf00      	nop
 8005222:	bf00      	nop
 8005224:	e7fd      	b.n	8005222 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005226:	f001 f847 	bl	80062b8 <xTaskGetSchedulerState>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d102      	bne.n	8005236 <xQueueReceive+0x72>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <xQueueReceive+0x76>
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <xQueueReceive+0x78>
 800523a:	2300      	movs	r3, #0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10b      	bne.n	8005258 <xQueueReceive+0x94>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	61bb      	str	r3, [r7, #24]
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	e7fd      	b.n	8005254 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005258:	f001 fd9e 	bl	8006d98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01f      	beq.n	80052a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005268:	68b9      	ldr	r1, [r7, #8]
 800526a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800526c:	f000 f8f6 	bl	800545c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005272:	1e5a      	subs	r2, r3, #1
 8005274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005276:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00f      	beq.n	80052a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005282:	3310      	adds	r3, #16
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fe57 	bl	8005f38 <xTaskRemoveFromEventList>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005290:	4b3c      	ldr	r3, [pc, #240]	@ (8005384 <xQueueReceive+0x1c0>)
 8005292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052a0:	f001 fdac 	bl	8006dfc <vPortExitCritical>
				return pdPASS;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e069      	b.n	800537c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d103      	bne.n	80052b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052ae:	f001 fda5 	bl	8006dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052b2:	2300      	movs	r3, #0
 80052b4:	e062      	b.n	800537c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d106      	bne.n	80052ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052bc:	f107 0310 	add.w	r3, r7, #16
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fe9d 	bl	8006000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052c6:	2301      	movs	r3, #1
 80052c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052ca:	f001 fd97 	bl	8006dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052ce:	f000 fc0d 	bl	8005aec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052d2:	f001 fd61 	bl	8006d98 <vPortEnterCritical>
 80052d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052dc:	b25b      	sxtb	r3, r3
 80052de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e2:	d103      	bne.n	80052ec <xQueueReceive+0x128>
 80052e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052f2:	b25b      	sxtb	r3, r3
 80052f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f8:	d103      	bne.n	8005302 <xQueueReceive+0x13e>
 80052fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005302:	f001 fd7b 	bl	8006dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005306:	1d3a      	adds	r2, r7, #4
 8005308:	f107 0310 	add.w	r3, r7, #16
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fe8c 	bl	800602c <xTaskCheckForTimeOut>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d123      	bne.n	8005362 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800531a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800531c:	f000 f916 	bl	800554c <prvIsQueueEmpty>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d017      	beq.n	8005356 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005328:	3324      	adds	r3, #36	@ 0x24
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	4611      	mov	r1, r2
 800532e:	4618      	mov	r0, r3
 8005330:	f000 fdb0 	bl	8005e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005336:	f000 f8b7 	bl	80054a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800533a:	f000 fbe5 	bl	8005b08 <xTaskResumeAll>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d189      	bne.n	8005258 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005344:	4b0f      	ldr	r3, [pc, #60]	@ (8005384 <xQueueReceive+0x1c0>)
 8005346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	e780      	b.n	8005258 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005358:	f000 f8a6 	bl	80054a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800535c:	f000 fbd4 	bl	8005b08 <xTaskResumeAll>
 8005360:	e77a      	b.n	8005258 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005364:	f000 f8a0 	bl	80054a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005368:	f000 fbce 	bl	8005b08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800536c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800536e:	f000 f8ed 	bl	800554c <prvIsQueueEmpty>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	f43f af6f 	beq.w	8005258 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800537a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800537c:	4618      	mov	r0, r3
 800537e:	3730      	adds	r7, #48	@ 0x30
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	e000ed04 	.word	0xe000ed04

08005388 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10d      	bne.n	80053c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d14d      	bne.n	800544a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 ff9e 	bl	80062f4 <xTaskPriorityDisinherit>
 80053b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	609a      	str	r2, [r3, #8]
 80053c0:	e043      	b.n	800544a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d119      	bne.n	80053fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6858      	ldr	r0, [r3, #4]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d0:	461a      	mov	r2, r3
 80053d2:	68b9      	ldr	r1, [r7, #8]
 80053d4:	f002 f81c 	bl	8007410 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e0:	441a      	add	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d32b      	bcc.n	800544a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	605a      	str	r2, [r3, #4]
 80053fa:	e026      	b.n	800544a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	68d8      	ldr	r0, [r3, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005404:	461a      	mov	r2, r3
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	f002 f802 	bl	8007410 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005414:	425b      	negs	r3, r3
 8005416:	441a      	add	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d207      	bcs.n	8005438 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005430:	425b      	negs	r3, r3
 8005432:	441a      	add	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d105      	bne.n	800544a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	3b01      	subs	r3, #1
 8005448:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005452:	697b      	ldr	r3, [r7, #20]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d018      	beq.n	80054a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	441a      	add	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	429a      	cmp	r2, r3
 8005486:	d303      	bcc.n	8005490 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68d9      	ldr	r1, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005498:	461a      	mov	r2, r3
 800549a:	6838      	ldr	r0, [r7, #0]
 800549c:	f001 ffb8 	bl	8007410 <memcpy>
	}
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054b0:	f001 fc72 	bl	8006d98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054bc:	e011      	b.n	80054e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d012      	beq.n	80054ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3324      	adds	r3, #36	@ 0x24
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fd34 	bl	8005f38 <xTaskRemoveFromEventList>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054d6:	f000 fe0d 	bl	80060f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	3b01      	subs	r3, #1
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	dce9      	bgt.n	80054be <prvUnlockQueue+0x16>
 80054ea:	e000      	b.n	80054ee <prvUnlockQueue+0x46>
					break;
 80054ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	22ff      	movs	r2, #255	@ 0xff
 80054f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80054f6:	f001 fc81 	bl	8006dfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054fa:	f001 fc4d 	bl	8006d98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005504:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005506:	e011      	b.n	800552c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d012      	beq.n	8005536 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3310      	adds	r3, #16
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fd0f 	bl	8005f38 <xTaskRemoveFromEventList>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005520:	f000 fde8 	bl	80060f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005524:	7bbb      	ldrb	r3, [r7, #14]
 8005526:	3b01      	subs	r3, #1
 8005528:	b2db      	uxtb	r3, r3
 800552a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800552c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005530:	2b00      	cmp	r3, #0
 8005532:	dce9      	bgt.n	8005508 <prvUnlockQueue+0x60>
 8005534:	e000      	b.n	8005538 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005536:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	22ff      	movs	r2, #255	@ 0xff
 800553c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005540:	f001 fc5c 	bl	8006dfc <vPortExitCritical>
}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005554:	f001 fc20 	bl	8006d98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005560:	2301      	movs	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e001      	b.n	800556a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800556a:	f001 fc47 	bl	8006dfc <vPortExitCritical>

	return xReturn;
 800556e:	68fb      	ldr	r3, [r7, #12]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005580:	f001 fc0a 	bl	8006d98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558c:	429a      	cmp	r2, r3
 800558e:	d102      	bne.n	8005596 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005590:	2301      	movs	r3, #1
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	e001      	b.n	800559a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800559a:	f001 fc2f 	bl	8006dfc <vPortExitCritical>

	return xReturn;
 800559e:	68fb      	ldr	r3, [r7, #12]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	e014      	b.n	80055e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055b8:	4a0f      	ldr	r2, [pc, #60]	@ (80055f8 <vQueueAddToRegistry+0x50>)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10b      	bne.n	80055dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055c4:	490c      	ldr	r1, [pc, #48]	@ (80055f8 <vQueueAddToRegistry+0x50>)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055ce:	4a0a      	ldr	r2, [pc, #40]	@ (80055f8 <vQueueAddToRegistry+0x50>)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	4413      	add	r3, r2
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055da:	e006      	b.n	80055ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3301      	adds	r3, #1
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b07      	cmp	r3, #7
 80055e6:	d9e7      	bls.n	80055b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055e8:	bf00      	nop
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	20000dec 	.word	0x20000dec

080055fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800560c:	f001 fbc4 	bl	8006d98 <vPortEnterCritical>
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005616:	b25b      	sxtb	r3, r3
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561c:	d103      	bne.n	8005626 <vQueueWaitForMessageRestricted+0x2a>
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800562c:	b25b      	sxtb	r3, r3
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d103      	bne.n	800563c <vQueueWaitForMessageRestricted+0x40>
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800563c:	f001 fbde 	bl	8006dfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005644:	2b00      	cmp	r3, #0
 8005646:	d106      	bne.n	8005656 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	3324      	adds	r3, #36	@ 0x24
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fc45 	bl	8005ee0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005656:	6978      	ldr	r0, [r7, #20]
 8005658:	f7ff ff26 	bl	80054a8 <prvUnlockQueue>
	}
 800565c:	bf00      	nop
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08e      	sub	sp, #56	@ 0x38
 8005668:	af04      	add	r7, sp, #16
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10b      	bne.n	8005690 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	623b      	str	r3, [r7, #32]
}
 800568a:	bf00      	nop
 800568c:	bf00      	nop
 800568e:	e7fd      	b.n	800568c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10b      	bne.n	80056ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	61fb      	str	r3, [r7, #28]
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	e7fd      	b.n	80056aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056ae:	235c      	movs	r3, #92	@ 0x5c
 80056b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80056b6:	d00b      	beq.n	80056d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	61bb      	str	r3, [r7, #24]
}
 80056ca:	bf00      	nop
 80056cc:	bf00      	nop
 80056ce:	e7fd      	b.n	80056cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01e      	beq.n	8005716 <xTaskCreateStatic+0xb2>
 80056d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d01b      	beq.n	8005716 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056f0:	2300      	movs	r3, #0
 80056f2:	9303      	str	r3, [sp, #12]
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	9302      	str	r3, [sp, #8]
 80056f8:	f107 0314 	add.w	r3, r7, #20
 80056fc:	9301      	str	r3, [sp, #4]
 80056fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	68b9      	ldr	r1, [r7, #8]
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f850 	bl	80057ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800570e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005710:	f000 f8de 	bl	80058d0 <prvAddNewTaskToReadyList>
 8005714:	e001      	b.n	800571a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800571a:	697b      	ldr	r3, [r7, #20]
	}
 800571c:	4618      	mov	r0, r3
 800571e:	3728      	adds	r7, #40	@ 0x28
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08c      	sub	sp, #48	@ 0x30
 8005728:	af04      	add	r7, sp, #16
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	603b      	str	r3, [r7, #0]
 8005730:	4613      	mov	r3, r2
 8005732:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005734:	88fb      	ldrh	r3, [r7, #6]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4618      	mov	r0, r3
 800573a:	f001 fc4f 	bl	8006fdc <pvPortMalloc>
 800573e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00e      	beq.n	8005764 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005746:	205c      	movs	r0, #92	@ 0x5c
 8005748:	f001 fc48 	bl	8006fdc <pvPortMalloc>
 800574c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	631a      	str	r2, [r3, #48]	@ 0x30
 800575a:	e005      	b.n	8005768 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800575c:	6978      	ldr	r0, [r7, #20]
 800575e:	f001 fd0b 	bl	8007178 <vPortFree>
 8005762:	e001      	b.n	8005768 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005764:	2300      	movs	r3, #0
 8005766:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d017      	beq.n	800579e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005776:	88fa      	ldrh	r2, [r7, #6]
 8005778:	2300      	movs	r3, #0
 800577a:	9303      	str	r3, [sp, #12]
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	9302      	str	r3, [sp, #8]
 8005780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005782:	9301      	str	r3, [sp, #4]
 8005784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 f80e 	bl	80057ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005792:	69f8      	ldr	r0, [r7, #28]
 8005794:	f000 f89c 	bl	80058d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005798:	2301      	movs	r3, #1
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	e002      	b.n	80057a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800579e:	f04f 33ff 	mov.w	r3, #4294967295
 80057a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057a4:	69bb      	ldr	r3, [r7, #24]
	}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3720      	adds	r7, #32
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b088      	sub	sp, #32
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	461a      	mov	r2, r3
 80057c6:	21a5      	movs	r1, #165	@ 0xa5
 80057c8:	f001 fdf6 	bl	80073b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057d6:	3b01      	subs	r3, #1
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	f023 0307 	bic.w	r3, r3, #7
 80057e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00b      	beq.n	8005808 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	617b      	str	r3, [r7, #20]
}
 8005802:	bf00      	nop
 8005804:	bf00      	nop
 8005806:	e7fd      	b.n	8005804 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01f      	beq.n	800584e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800580e:	2300      	movs	r3, #0
 8005810:	61fb      	str	r3, [r7, #28]
 8005812:	e012      	b.n	800583a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	4413      	add	r3, r2
 800581a:	7819      	ldrb	r1, [r3, #0]
 800581c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	3334      	adds	r3, #52	@ 0x34
 8005824:	460a      	mov	r2, r1
 8005826:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d006      	beq.n	8005842 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	3301      	adds	r3, #1
 8005838:	61fb      	str	r3, [r7, #28]
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	2b0f      	cmp	r3, #15
 800583e:	d9e9      	bls.n	8005814 <prvInitialiseNewTask+0x66>
 8005840:	e000      	b.n	8005844 <prvInitialiseNewTask+0x96>
			{
				break;
 8005842:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800584c:	e003      	b.n	8005856 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005858:	2b37      	cmp	r3, #55	@ 0x37
 800585a:	d901      	bls.n	8005860 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800585c:	2337      	movs	r3, #55	@ 0x37
 800585e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005862:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005864:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005868:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800586a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800586c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586e:	2200      	movs	r2, #0
 8005870:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005874:	3304      	adds	r3, #4
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff f966 	bl	8004b48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800587c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587e:	3318      	adds	r3, #24
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff f961 	bl	8004b48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800588a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800588c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005894:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800589a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589e:	2200      	movs	r2, #0
 80058a0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	68f9      	ldr	r1, [r7, #12]
 80058ae:	69b8      	ldr	r0, [r7, #24]
 80058b0:	f001 f93e 	bl	8006b30 <pxPortInitialiseStack>
 80058b4:	4602      	mov	r2, r0
 80058b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058c6:	bf00      	nop
 80058c8:	3720      	adds	r7, #32
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058d8:	f001 fa5e 	bl	8006d98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005994 <prvAddNewTaskToReadyList+0xc4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005994 <prvAddNewTaskToReadyList+0xc4>)
 80058e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058e6:	4b2c      	ldr	r3, [pc, #176]	@ (8005998 <prvAddNewTaskToReadyList+0xc8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d109      	bne.n	8005902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005998 <prvAddNewTaskToReadyList+0xc8>)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058f4:	4b27      	ldr	r3, [pc, #156]	@ (8005994 <prvAddNewTaskToReadyList+0xc4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d110      	bne.n	800591e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058fc:	f000 fc1e 	bl	800613c <prvInitialiseTaskLists>
 8005900:	e00d      	b.n	800591e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005902:	4b26      	ldr	r3, [pc, #152]	@ (800599c <prvAddNewTaskToReadyList+0xcc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800590a:	4b23      	ldr	r3, [pc, #140]	@ (8005998 <prvAddNewTaskToReadyList+0xc8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005914:	429a      	cmp	r2, r3
 8005916:	d802      	bhi.n	800591e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005918:	4a1f      	ldr	r2, [pc, #124]	@ (8005998 <prvAddNewTaskToReadyList+0xc8>)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800591e:	4b20      	ldr	r3, [pc, #128]	@ (80059a0 <prvAddNewTaskToReadyList+0xd0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3301      	adds	r3, #1
 8005924:	4a1e      	ldr	r2, [pc, #120]	@ (80059a0 <prvAddNewTaskToReadyList+0xd0>)
 8005926:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005928:	4b1d      	ldr	r3, [pc, #116]	@ (80059a0 <prvAddNewTaskToReadyList+0xd0>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005934:	4b1b      	ldr	r3, [pc, #108]	@ (80059a4 <prvAddNewTaskToReadyList+0xd4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	429a      	cmp	r2, r3
 800593a:	d903      	bls.n	8005944 <prvAddNewTaskToReadyList+0x74>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005940:	4a18      	ldr	r2, [pc, #96]	@ (80059a4 <prvAddNewTaskToReadyList+0xd4>)
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005948:	4613      	mov	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4a15      	ldr	r2, [pc, #84]	@ (80059a8 <prvAddNewTaskToReadyList+0xd8>)
 8005952:	441a      	add	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3304      	adds	r3, #4
 8005958:	4619      	mov	r1, r3
 800595a:	4610      	mov	r0, r2
 800595c:	f7ff f901 	bl	8004b62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005960:	f001 fa4c 	bl	8006dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005964:	4b0d      	ldr	r3, [pc, #52]	@ (800599c <prvAddNewTaskToReadyList+0xcc>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00e      	beq.n	800598a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800596c:	4b0a      	ldr	r3, [pc, #40]	@ (8005998 <prvAddNewTaskToReadyList+0xc8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005976:	429a      	cmp	r2, r3
 8005978:	d207      	bcs.n	800598a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800597a:	4b0c      	ldr	r3, [pc, #48]	@ (80059ac <prvAddNewTaskToReadyList+0xdc>)
 800597c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20001300 	.word	0x20001300
 8005998:	20000e2c 	.word	0x20000e2c
 800599c:	2000130c 	.word	0x2000130c
 80059a0:	2000131c 	.word	0x2000131c
 80059a4:	20001308 	.word	0x20001308
 80059a8:	20000e30 	.word	0x20000e30
 80059ac:	e000ed04 	.word	0xe000ed04

080059b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d018      	beq.n	80059f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059c2:	4b14      	ldr	r3, [pc, #80]	@ (8005a14 <vTaskDelay+0x64>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00b      	beq.n	80059e2 <vTaskDelay+0x32>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	60bb      	str	r3, [r7, #8]
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	e7fd      	b.n	80059de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059e2:	f000 f883 	bl	8005aec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059e6:	2100      	movs	r1, #0
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fcf3 	bl	80063d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059ee:	f000 f88b 	bl	8005b08 <xTaskResumeAll>
 80059f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d107      	bne.n	8005a0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80059fa:	4b07      	ldr	r3, [pc, #28]	@ (8005a18 <vTaskDelay+0x68>)
 80059fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a0a:	bf00      	nop
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20001328 	.word	0x20001328
 8005a18:	e000ed04 	.word	0xe000ed04

08005a1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08a      	sub	sp, #40	@ 0x28
 8005a20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a26:	2300      	movs	r3, #0
 8005a28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a2a:	463a      	mov	r2, r7
 8005a2c:	1d39      	adds	r1, r7, #4
 8005a2e:	f107 0308 	add.w	r3, r7, #8
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff f834 	bl	8004aa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	9202      	str	r2, [sp, #8]
 8005a40:	9301      	str	r3, [sp, #4]
 8005a42:	2300      	movs	r3, #0
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	2300      	movs	r3, #0
 8005a48:	460a      	mov	r2, r1
 8005a4a:	4922      	ldr	r1, [pc, #136]	@ (8005ad4 <vTaskStartScheduler+0xb8>)
 8005a4c:	4822      	ldr	r0, [pc, #136]	@ (8005ad8 <vTaskStartScheduler+0xbc>)
 8005a4e:	f7ff fe09 	bl	8005664 <xTaskCreateStatic>
 8005a52:	4603      	mov	r3, r0
 8005a54:	4a21      	ldr	r2, [pc, #132]	@ (8005adc <vTaskStartScheduler+0xc0>)
 8005a56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a58:	4b20      	ldr	r3, [pc, #128]	@ (8005adc <vTaskStartScheduler+0xc0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a60:	2301      	movs	r3, #1
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e001      	b.n	8005a6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d102      	bne.n	8005a76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a70:	f000 fd04 	bl	800647c <xTimerCreateTimerTask>
 8005a74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d116      	bne.n	8005aaa <vTaskStartScheduler+0x8e>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	613b      	str	r3, [r7, #16]
}
 8005a8e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a90:	4b13      	ldr	r3, [pc, #76]	@ (8005ae0 <vTaskStartScheduler+0xc4>)
 8005a92:	f04f 32ff 	mov.w	r2, #4294967295
 8005a96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a98:	4b12      	ldr	r3, [pc, #72]	@ (8005ae4 <vTaskStartScheduler+0xc8>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a9e:	4b12      	ldr	r3, [pc, #72]	@ (8005ae8 <vTaskStartScheduler+0xcc>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005aa4:	f001 f8d4 	bl	8006c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005aa8:	e00f      	b.n	8005aca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab0:	d10b      	bne.n	8005aca <vTaskStartScheduler+0xae>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	60fb      	str	r3, [r7, #12]
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	e7fd      	b.n	8005ac6 <vTaskStartScheduler+0xaa>
}
 8005aca:	bf00      	nop
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	0800745c 	.word	0x0800745c
 8005ad8:	0800610d 	.word	0x0800610d
 8005adc:	20001324 	.word	0x20001324
 8005ae0:	20001320 	.word	0x20001320
 8005ae4:	2000130c 	.word	0x2000130c
 8005ae8:	20001304 	.word	0x20001304

08005aec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005af0:	4b04      	ldr	r3, [pc, #16]	@ (8005b04 <vTaskSuspendAll+0x18>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3301      	adds	r3, #1
 8005af6:	4a03      	ldr	r2, [pc, #12]	@ (8005b04 <vTaskSuspendAll+0x18>)
 8005af8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005afa:	bf00      	nop
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	20001328 	.word	0x20001328

08005b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b16:	4b42      	ldr	r3, [pc, #264]	@ (8005c20 <xTaskResumeAll+0x118>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10b      	bne.n	8005b36 <xTaskResumeAll+0x2e>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	603b      	str	r3, [r7, #0]
}
 8005b30:	bf00      	nop
 8005b32:	bf00      	nop
 8005b34:	e7fd      	b.n	8005b32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b36:	f001 f92f 	bl	8006d98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b3a:	4b39      	ldr	r3, [pc, #228]	@ (8005c20 <xTaskResumeAll+0x118>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	4a37      	ldr	r2, [pc, #220]	@ (8005c20 <xTaskResumeAll+0x118>)
 8005b42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b44:	4b36      	ldr	r3, [pc, #216]	@ (8005c20 <xTaskResumeAll+0x118>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d162      	bne.n	8005c12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b4c:	4b35      	ldr	r3, [pc, #212]	@ (8005c24 <xTaskResumeAll+0x11c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d05e      	beq.n	8005c12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b54:	e02f      	b.n	8005bb6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b56:	4b34      	ldr	r3, [pc, #208]	@ (8005c28 <xTaskResumeAll+0x120>)
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3318      	adds	r3, #24
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff f85a 	bl	8004c1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff f855 	bl	8004c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b76:	4b2d      	ldr	r3, [pc, #180]	@ (8005c2c <xTaskResumeAll+0x124>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d903      	bls.n	8005b86 <xTaskResumeAll+0x7e>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b82:	4a2a      	ldr	r2, [pc, #168]	@ (8005c2c <xTaskResumeAll+0x124>)
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4a27      	ldr	r2, [pc, #156]	@ (8005c30 <xTaskResumeAll+0x128>)
 8005b94:	441a      	add	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3304      	adds	r3, #4
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	f7fe ffe0 	bl	8004b62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba6:	4b23      	ldr	r3, [pc, #140]	@ (8005c34 <xTaskResumeAll+0x12c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d302      	bcc.n	8005bb6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005bb0:	4b21      	ldr	r3, [pc, #132]	@ (8005c38 <xTaskResumeAll+0x130>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8005c28 <xTaskResumeAll+0x120>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1cb      	bne.n	8005b56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bc4:	f000 fb58 	bl	8006278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8005c3c <xTaskResumeAll+0x134>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d010      	beq.n	8005bf6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005bd4:	f000 f846 	bl	8005c64 <xTaskIncrementTick>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005bde:	4b16      	ldr	r3, [pc, #88]	@ (8005c38 <xTaskResumeAll+0x130>)
 8005be0:	2201      	movs	r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1f1      	bne.n	8005bd4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005bf0:	4b12      	ldr	r3, [pc, #72]	@ (8005c3c <xTaskResumeAll+0x134>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005bf6:	4b10      	ldr	r3, [pc, #64]	@ (8005c38 <xTaskResumeAll+0x130>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d009      	beq.n	8005c12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c02:	4b0f      	ldr	r3, [pc, #60]	@ (8005c40 <xTaskResumeAll+0x138>)
 8005c04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c12:	f001 f8f3 	bl	8006dfc <vPortExitCritical>

	return xAlreadyYielded;
 8005c16:	68bb      	ldr	r3, [r7, #8]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20001328 	.word	0x20001328
 8005c24:	20001300 	.word	0x20001300
 8005c28:	200012c0 	.word	0x200012c0
 8005c2c:	20001308 	.word	0x20001308
 8005c30:	20000e30 	.word	0x20000e30
 8005c34:	20000e2c 	.word	0x20000e2c
 8005c38:	20001314 	.word	0x20001314
 8005c3c:	20001310 	.word	0x20001310
 8005c40:	e000ed04 	.word	0xe000ed04

08005c44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c4a:	4b05      	ldr	r3, [pc, #20]	@ (8005c60 <xTaskGetTickCount+0x1c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c50:	687b      	ldr	r3, [r7, #4]
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	20001304 	.word	0x20001304

08005c64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c6e:	4b4f      	ldr	r3, [pc, #316]	@ (8005dac <xTaskIncrementTick+0x148>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f040 8090 	bne.w	8005d98 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c78:	4b4d      	ldr	r3, [pc, #308]	@ (8005db0 <xTaskIncrementTick+0x14c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c80:	4a4b      	ldr	r2, [pc, #300]	@ (8005db0 <xTaskIncrementTick+0x14c>)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d121      	bne.n	8005cd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c8c:	4b49      	ldr	r3, [pc, #292]	@ (8005db4 <xTaskIncrementTick+0x150>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00b      	beq.n	8005cae <xTaskIncrementTick+0x4a>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	603b      	str	r3, [r7, #0]
}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	e7fd      	b.n	8005caa <xTaskIncrementTick+0x46>
 8005cae:	4b41      	ldr	r3, [pc, #260]	@ (8005db4 <xTaskIncrementTick+0x150>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	4b40      	ldr	r3, [pc, #256]	@ (8005db8 <xTaskIncrementTick+0x154>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a3e      	ldr	r2, [pc, #248]	@ (8005db4 <xTaskIncrementTick+0x150>)
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	4a3e      	ldr	r2, [pc, #248]	@ (8005db8 <xTaskIncrementTick+0x154>)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8005dbc <xTaskIncrementTick+0x158>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	4a3c      	ldr	r2, [pc, #240]	@ (8005dbc <xTaskIncrementTick+0x158>)
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	f000 fad4 	bl	8006278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8005dc0 <xTaskIncrementTick+0x15c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d349      	bcc.n	8005d6e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cda:	4b36      	ldr	r3, [pc, #216]	@ (8005db4 <xTaskIncrementTick+0x150>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d104      	bne.n	8005cee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ce4:	4b36      	ldr	r3, [pc, #216]	@ (8005dc0 <xTaskIncrementTick+0x15c>)
 8005ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cea:	601a      	str	r2, [r3, #0]
					break;
 8005cec:	e03f      	b.n	8005d6e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cee:	4b31      	ldr	r3, [pc, #196]	@ (8005db4 <xTaskIncrementTick+0x150>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d203      	bcs.n	8005d0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d06:	4a2e      	ldr	r2, [pc, #184]	@ (8005dc0 <xTaskIncrementTick+0x15c>)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d0c:	e02f      	b.n	8005d6e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	3304      	adds	r3, #4
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe ff82 	bl	8004c1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d004      	beq.n	8005d2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	3318      	adds	r3, #24
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fe ff79 	bl	8004c1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d2e:	4b25      	ldr	r3, [pc, #148]	@ (8005dc4 <xTaskIncrementTick+0x160>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d903      	bls.n	8005d3e <xTaskIncrementTick+0xda>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3a:	4a22      	ldr	r2, [pc, #136]	@ (8005dc4 <xTaskIncrementTick+0x160>)
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d42:	4613      	mov	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005dc8 <xTaskIncrementTick+0x164>)
 8005d4c:	441a      	add	r2, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	3304      	adds	r3, #4
 8005d52:	4619      	mov	r1, r3
 8005d54:	4610      	mov	r0, r2
 8005d56:	f7fe ff04 	bl	8004b62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8005dcc <xTaskIncrementTick+0x168>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d3b8      	bcc.n	8005cda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d6c:	e7b5      	b.n	8005cda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d6e:	4b17      	ldr	r3, [pc, #92]	@ (8005dcc <xTaskIncrementTick+0x168>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d74:	4914      	ldr	r1, [pc, #80]	@ (8005dc8 <xTaskIncrementTick+0x164>)
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d901      	bls.n	8005d8a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005d86:	2301      	movs	r3, #1
 8005d88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d8a:	4b11      	ldr	r3, [pc, #68]	@ (8005dd0 <xTaskIncrementTick+0x16c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005d92:	2301      	movs	r3, #1
 8005d94:	617b      	str	r3, [r7, #20]
 8005d96:	e004      	b.n	8005da2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d98:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd4 <xTaskIncrementTick+0x170>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8005dd4 <xTaskIncrementTick+0x170>)
 8005da0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005da2:	697b      	ldr	r3, [r7, #20]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20001328 	.word	0x20001328
 8005db0:	20001304 	.word	0x20001304
 8005db4:	200012b8 	.word	0x200012b8
 8005db8:	200012bc 	.word	0x200012bc
 8005dbc:	20001318 	.word	0x20001318
 8005dc0:	20001320 	.word	0x20001320
 8005dc4:	20001308 	.word	0x20001308
 8005dc8:	20000e30 	.word	0x20000e30
 8005dcc:	20000e2c 	.word	0x20000e2c
 8005dd0:	20001314 	.word	0x20001314
 8005dd4:	20001310 	.word	0x20001310

08005dd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dde:	4b28      	ldr	r3, [pc, #160]	@ (8005e80 <vTaskSwitchContext+0xa8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005de6:	4b27      	ldr	r3, [pc, #156]	@ (8005e84 <vTaskSwitchContext+0xac>)
 8005de8:	2201      	movs	r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005dec:	e042      	b.n	8005e74 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005dee:	4b25      	ldr	r3, [pc, #148]	@ (8005e84 <vTaskSwitchContext+0xac>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df4:	4b24      	ldr	r3, [pc, #144]	@ (8005e88 <vTaskSwitchContext+0xb0>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	e011      	b.n	8005e20 <vTaskSwitchContext+0x48>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10b      	bne.n	8005e1a <vTaskSwitchContext+0x42>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	607b      	str	r3, [r7, #4]
}
 8005e14:	bf00      	nop
 8005e16:	bf00      	nop
 8005e18:	e7fd      	b.n	8005e16 <vTaskSwitchContext+0x3e>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	491a      	ldr	r1, [pc, #104]	@ (8005e8c <vTaskSwitchContext+0xb4>)
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	440b      	add	r3, r1
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0e3      	beq.n	8005dfc <vTaskSwitchContext+0x24>
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4613      	mov	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4a13      	ldr	r2, [pc, #76]	@ (8005e8c <vTaskSwitchContext+0xb4>)
 8005e40:	4413      	add	r3, r2
 8005e42:	60bb      	str	r3, [r7, #8]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	605a      	str	r2, [r3, #4]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	3308      	adds	r3, #8
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d104      	bne.n	8005e64 <vTaskSwitchContext+0x8c>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	605a      	str	r2, [r3, #4]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	4a09      	ldr	r2, [pc, #36]	@ (8005e90 <vTaskSwitchContext+0xb8>)
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	4a06      	ldr	r2, [pc, #24]	@ (8005e88 <vTaskSwitchContext+0xb0>)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6013      	str	r3, [r2, #0]
}
 8005e74:	bf00      	nop
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	20001328 	.word	0x20001328
 8005e84:	20001314 	.word	0x20001314
 8005e88:	20001308 	.word	0x20001308
 8005e8c:	20000e30 	.word	0x20000e30
 8005e90:	20000e2c 	.word	0x20000e2c

08005e94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10b      	bne.n	8005ebc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	60fb      	str	r3, [r7, #12]
}
 8005eb6:	bf00      	nop
 8005eb8:	bf00      	nop
 8005eba:	e7fd      	b.n	8005eb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ebc:	4b07      	ldr	r3, [pc, #28]	@ (8005edc <vTaskPlaceOnEventList+0x48>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3318      	adds	r3, #24
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7fe fe70 	bl	8004baa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005eca:	2101      	movs	r1, #1
 8005ecc:	6838      	ldr	r0, [r7, #0]
 8005ece:	f000 fa81 	bl	80063d4 <prvAddCurrentTaskToDelayedList>
}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000e2c 	.word	0x20000e2c

08005ee0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10b      	bne.n	8005f0a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	617b      	str	r3, [r7, #20]
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop
 8005f08:	e7fd      	b.n	8005f06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f34 <vTaskPlaceOnEventListRestricted+0x54>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3318      	adds	r3, #24
 8005f10:	4619      	mov	r1, r3
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7fe fe25 	bl	8004b62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	68b8      	ldr	r0, [r7, #8]
 8005f28:	f000 fa54 	bl	80063d4 <prvAddCurrentTaskToDelayedList>
	}
 8005f2c:	bf00      	nop
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20000e2c 	.word	0x20000e2c

08005f38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10b      	bne.n	8005f66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	60fb      	str	r3, [r7, #12]
}
 8005f60:	bf00      	nop
 8005f62:	bf00      	nop
 8005f64:	e7fd      	b.n	8005f62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	3318      	adds	r3, #24
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe fe56 	bl	8004c1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f70:	4b1d      	ldr	r3, [pc, #116]	@ (8005fe8 <xTaskRemoveFromEventList+0xb0>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d11d      	bne.n	8005fb4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fe fe4d 	bl	8004c1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f86:	4b19      	ldr	r3, [pc, #100]	@ (8005fec <xTaskRemoveFromEventList+0xb4>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d903      	bls.n	8005f96 <xTaskRemoveFromEventList+0x5e>
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f92:	4a16      	ldr	r2, [pc, #88]	@ (8005fec <xTaskRemoveFromEventList+0xb4>)
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4a13      	ldr	r2, [pc, #76]	@ (8005ff0 <xTaskRemoveFromEventList+0xb8>)
 8005fa4:	441a      	add	r2, r3
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4619      	mov	r1, r3
 8005fac:	4610      	mov	r0, r2
 8005fae:	f7fe fdd8 	bl	8004b62 <vListInsertEnd>
 8005fb2:	e005      	b.n	8005fc0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	3318      	adds	r3, #24
 8005fb8:	4619      	mov	r1, r3
 8005fba:	480e      	ldr	r0, [pc, #56]	@ (8005ff4 <xTaskRemoveFromEventList+0xbc>)
 8005fbc:	f7fe fdd1 	bl	8004b62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff8 <xTaskRemoveFromEventList+0xc0>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d905      	bls.n	8005fda <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ffc <xTaskRemoveFromEventList+0xc4>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	e001      	b.n	8005fde <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fde:	697b      	ldr	r3, [r7, #20]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	20001328 	.word	0x20001328
 8005fec:	20001308 	.word	0x20001308
 8005ff0:	20000e30 	.word	0x20000e30
 8005ff4:	200012c0 	.word	0x200012c0
 8005ff8:	20000e2c 	.word	0x20000e2c
 8005ffc:	20001314 	.word	0x20001314

08006000 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006008:	4b06      	ldr	r3, [pc, #24]	@ (8006024 <vTaskInternalSetTimeOutState+0x24>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006010:	4b05      	ldr	r3, [pc, #20]	@ (8006028 <vTaskInternalSetTimeOutState+0x28>)
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	605a      	str	r2, [r3, #4]
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	20001318 	.word	0x20001318
 8006028:	20001304 	.word	0x20001304

0800602c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10b      	bne.n	8006054 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	613b      	str	r3, [r7, #16]
}
 800604e:	bf00      	nop
 8006050:	bf00      	nop
 8006052:	e7fd      	b.n	8006050 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10b      	bne.n	8006072 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	60fb      	str	r3, [r7, #12]
}
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	e7fd      	b.n	800606e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006072:	f000 fe91 	bl	8006d98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006076:	4b1d      	ldr	r3, [pc, #116]	@ (80060ec <xTaskCheckForTimeOut+0xc0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d102      	bne.n	8006096 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006090:	2300      	movs	r3, #0
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	e023      	b.n	80060de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4b15      	ldr	r3, [pc, #84]	@ (80060f0 <xTaskCheckForTimeOut+0xc4>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d007      	beq.n	80060b2 <xTaskCheckForTimeOut+0x86>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d302      	bcc.n	80060b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060ac:	2301      	movs	r3, #1
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	e015      	b.n	80060de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d20b      	bcs.n	80060d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	1ad2      	subs	r2, r2, r3
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff ff99 	bl	8006000 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060ce:	2300      	movs	r3, #0
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	e004      	b.n	80060de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060da:	2301      	movs	r3, #1
 80060dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060de:	f000 fe8d 	bl	8006dfc <vPortExitCritical>

	return xReturn;
 80060e2:	69fb      	ldr	r3, [r7, #28]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3720      	adds	r7, #32
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	20001304 	.word	0x20001304
 80060f0:	20001318 	.word	0x20001318

080060f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060f8:	4b03      	ldr	r3, [pc, #12]	@ (8006108 <vTaskMissedYield+0x14>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	601a      	str	r2, [r3, #0]
}
 80060fe:	bf00      	nop
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	20001314 	.word	0x20001314

0800610c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006114:	f000 f852 	bl	80061bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006118:	4b06      	ldr	r3, [pc, #24]	@ (8006134 <prvIdleTask+0x28>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d9f9      	bls.n	8006114 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006120:	4b05      	ldr	r3, [pc, #20]	@ (8006138 <prvIdleTask+0x2c>)
 8006122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006130:	e7f0      	b.n	8006114 <prvIdleTask+0x8>
 8006132:	bf00      	nop
 8006134:	20000e30 	.word	0x20000e30
 8006138:	e000ed04 	.word	0xe000ed04

0800613c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006142:	2300      	movs	r3, #0
 8006144:	607b      	str	r3, [r7, #4]
 8006146:	e00c      	b.n	8006162 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4a12      	ldr	r2, [pc, #72]	@ (800619c <prvInitialiseTaskLists+0x60>)
 8006154:	4413      	add	r3, r2
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe fcd6 	bl	8004b08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3301      	adds	r3, #1
 8006160:	607b      	str	r3, [r7, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b37      	cmp	r3, #55	@ 0x37
 8006166:	d9ef      	bls.n	8006148 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006168:	480d      	ldr	r0, [pc, #52]	@ (80061a0 <prvInitialiseTaskLists+0x64>)
 800616a:	f7fe fccd 	bl	8004b08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800616e:	480d      	ldr	r0, [pc, #52]	@ (80061a4 <prvInitialiseTaskLists+0x68>)
 8006170:	f7fe fcca 	bl	8004b08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006174:	480c      	ldr	r0, [pc, #48]	@ (80061a8 <prvInitialiseTaskLists+0x6c>)
 8006176:	f7fe fcc7 	bl	8004b08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800617a:	480c      	ldr	r0, [pc, #48]	@ (80061ac <prvInitialiseTaskLists+0x70>)
 800617c:	f7fe fcc4 	bl	8004b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006180:	480b      	ldr	r0, [pc, #44]	@ (80061b0 <prvInitialiseTaskLists+0x74>)
 8006182:	f7fe fcc1 	bl	8004b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006186:	4b0b      	ldr	r3, [pc, #44]	@ (80061b4 <prvInitialiseTaskLists+0x78>)
 8006188:	4a05      	ldr	r2, [pc, #20]	@ (80061a0 <prvInitialiseTaskLists+0x64>)
 800618a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800618c:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <prvInitialiseTaskLists+0x7c>)
 800618e:	4a05      	ldr	r2, [pc, #20]	@ (80061a4 <prvInitialiseTaskLists+0x68>)
 8006190:	601a      	str	r2, [r3, #0]
}
 8006192:	bf00      	nop
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	20000e30 	.word	0x20000e30
 80061a0:	20001290 	.word	0x20001290
 80061a4:	200012a4 	.word	0x200012a4
 80061a8:	200012c0 	.word	0x200012c0
 80061ac:	200012d4 	.word	0x200012d4
 80061b0:	200012ec 	.word	0x200012ec
 80061b4:	200012b8 	.word	0x200012b8
 80061b8:	200012bc 	.word	0x200012bc

080061bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061c2:	e019      	b.n	80061f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061c4:	f000 fde8 	bl	8006d98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061c8:	4b10      	ldr	r3, [pc, #64]	@ (800620c <prvCheckTasksWaitingTermination+0x50>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fe fd21 	bl	8004c1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061da:	4b0d      	ldr	r3, [pc, #52]	@ (8006210 <prvCheckTasksWaitingTermination+0x54>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3b01      	subs	r3, #1
 80061e0:	4a0b      	ldr	r2, [pc, #44]	@ (8006210 <prvCheckTasksWaitingTermination+0x54>)
 80061e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006214 <prvCheckTasksWaitingTermination+0x58>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006214 <prvCheckTasksWaitingTermination+0x58>)
 80061ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061ee:	f000 fe05 	bl	8006dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f810 	bl	8006218 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061f8:	4b06      	ldr	r3, [pc, #24]	@ (8006214 <prvCheckTasksWaitingTermination+0x58>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e1      	bne.n	80061c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006200:	bf00      	nop
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	200012d4 	.word	0x200012d4
 8006210:	20001300 	.word	0x20001300
 8006214:	200012e8 	.word	0x200012e8

08006218 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006226:	2b00      	cmp	r3, #0
 8006228:	d108      	bne.n	800623c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800622e:	4618      	mov	r0, r3
 8006230:	f000 ffa2 	bl	8007178 <vPortFree>
				vPortFree( pxTCB );
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 ff9f 	bl	8007178 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800623a:	e019      	b.n	8006270 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006242:	2b01      	cmp	r3, #1
 8006244:	d103      	bne.n	800624e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 ff96 	bl	8007178 <vPortFree>
	}
 800624c:	e010      	b.n	8006270 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006254:	2b02      	cmp	r3, #2
 8006256:	d00b      	beq.n	8006270 <prvDeleteTCB+0x58>
	__asm volatile
 8006258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800625c:	f383 8811 	msr	BASEPRI, r3
 8006260:	f3bf 8f6f 	isb	sy
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	60fb      	str	r3, [r7, #12]
}
 800626a:	bf00      	nop
 800626c:	bf00      	nop
 800626e:	e7fd      	b.n	800626c <prvDeleteTCB+0x54>
	}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800627e:	4b0c      	ldr	r3, [pc, #48]	@ (80062b0 <prvResetNextTaskUnblockTime+0x38>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006288:	4b0a      	ldr	r3, [pc, #40]	@ (80062b4 <prvResetNextTaskUnblockTime+0x3c>)
 800628a:	f04f 32ff 	mov.w	r2, #4294967295
 800628e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006290:	e008      	b.n	80062a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006292:	4b07      	ldr	r3, [pc, #28]	@ (80062b0 <prvResetNextTaskUnblockTime+0x38>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4a04      	ldr	r2, [pc, #16]	@ (80062b4 <prvResetNextTaskUnblockTime+0x3c>)
 80062a2:	6013      	str	r3, [r2, #0]
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	200012b8 	.word	0x200012b8
 80062b4:	20001320 	.word	0x20001320

080062b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062be:	4b0b      	ldr	r3, [pc, #44]	@ (80062ec <xTaskGetSchedulerState+0x34>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062c6:	2301      	movs	r3, #1
 80062c8:	607b      	str	r3, [r7, #4]
 80062ca:	e008      	b.n	80062de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062cc:	4b08      	ldr	r3, [pc, #32]	@ (80062f0 <xTaskGetSchedulerState+0x38>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d102      	bne.n	80062da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062d4:	2302      	movs	r3, #2
 80062d6:	607b      	str	r3, [r7, #4]
 80062d8:	e001      	b.n	80062de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062da:	2300      	movs	r3, #0
 80062dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062de:	687b      	ldr	r3, [r7, #4]
	}
 80062e0:	4618      	mov	r0, r3
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	2000130c 	.word	0x2000130c
 80062f0:	20001328 	.word	0x20001328

080062f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006300:	2300      	movs	r3, #0
 8006302:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d058      	beq.n	80063bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800630a:	4b2f      	ldr	r3, [pc, #188]	@ (80063c8 <xTaskPriorityDisinherit+0xd4>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	429a      	cmp	r2, r3
 8006312:	d00b      	beq.n	800632c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	60fb      	str	r3, [r7, #12]
}
 8006326:	bf00      	nop
 8006328:	bf00      	nop
 800632a:	e7fd      	b.n	8006328 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10b      	bne.n	800634c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	60bb      	str	r3, [r7, #8]
}
 8006346:	bf00      	nop
 8006348:	bf00      	nop
 800634a:	e7fd      	b.n	8006348 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006350:	1e5a      	subs	r2, r3, #1
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800635e:	429a      	cmp	r2, r3
 8006360:	d02c      	beq.n	80063bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006366:	2b00      	cmp	r3, #0
 8006368:	d128      	bne.n	80063bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	3304      	adds	r3, #4
 800636e:	4618      	mov	r0, r3
 8006370:	f7fe fc54 	bl	8004c1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006380:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800638c:	4b0f      	ldr	r3, [pc, #60]	@ (80063cc <xTaskPriorityDisinherit+0xd8>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d903      	bls.n	800639c <xTaskPriorityDisinherit+0xa8>
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006398:	4a0c      	ldr	r2, [pc, #48]	@ (80063cc <xTaskPriorityDisinherit+0xd8>)
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4a09      	ldr	r2, [pc, #36]	@ (80063d0 <xTaskPriorityDisinherit+0xdc>)
 80063aa:	441a      	add	r2, r3
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4619      	mov	r1, r3
 80063b2:	4610      	mov	r0, r2
 80063b4:	f7fe fbd5 	bl	8004b62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063b8:	2301      	movs	r3, #1
 80063ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063bc:	697b      	ldr	r3, [r7, #20]
	}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000e2c 	.word	0x20000e2c
 80063cc:	20001308 	.word	0x20001308
 80063d0:	20000e30 	.word	0x20000e30

080063d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063de:	4b21      	ldr	r3, [pc, #132]	@ (8006464 <prvAddCurrentTaskToDelayedList+0x90>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063e4:	4b20      	ldr	r3, [pc, #128]	@ (8006468 <prvAddCurrentTaskToDelayedList+0x94>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3304      	adds	r3, #4
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fe fc16 	bl	8004c1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f6:	d10a      	bne.n	800640e <prvAddCurrentTaskToDelayedList+0x3a>
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006468 <prvAddCurrentTaskToDelayedList+0x94>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3304      	adds	r3, #4
 8006404:	4619      	mov	r1, r3
 8006406:	4819      	ldr	r0, [pc, #100]	@ (800646c <prvAddCurrentTaskToDelayedList+0x98>)
 8006408:	f7fe fbab 	bl	8004b62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800640c:	e026      	b.n	800645c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4413      	add	r3, r2
 8006414:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006416:	4b14      	ldr	r3, [pc, #80]	@ (8006468 <prvAddCurrentTaskToDelayedList+0x94>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	429a      	cmp	r2, r3
 8006424:	d209      	bcs.n	800643a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006426:	4b12      	ldr	r3, [pc, #72]	@ (8006470 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4b0f      	ldr	r3, [pc, #60]	@ (8006468 <prvAddCurrentTaskToDelayedList+0x94>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3304      	adds	r3, #4
 8006430:	4619      	mov	r1, r3
 8006432:	4610      	mov	r0, r2
 8006434:	f7fe fbb9 	bl	8004baa <vListInsert>
}
 8006438:	e010      	b.n	800645c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800643a:	4b0e      	ldr	r3, [pc, #56]	@ (8006474 <prvAddCurrentTaskToDelayedList+0xa0>)
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	4b0a      	ldr	r3, [pc, #40]	@ (8006468 <prvAddCurrentTaskToDelayedList+0x94>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3304      	adds	r3, #4
 8006444:	4619      	mov	r1, r3
 8006446:	4610      	mov	r0, r2
 8006448:	f7fe fbaf 	bl	8004baa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800644c:	4b0a      	ldr	r3, [pc, #40]	@ (8006478 <prvAddCurrentTaskToDelayedList+0xa4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	429a      	cmp	r2, r3
 8006454:	d202      	bcs.n	800645c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006456:	4a08      	ldr	r2, [pc, #32]	@ (8006478 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	6013      	str	r3, [r2, #0]
}
 800645c:	bf00      	nop
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	20001304 	.word	0x20001304
 8006468:	20000e2c 	.word	0x20000e2c
 800646c:	200012ec 	.word	0x200012ec
 8006470:	200012bc 	.word	0x200012bc
 8006474:	200012b8 	.word	0x200012b8
 8006478:	20001320 	.word	0x20001320

0800647c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	@ 0x28
 8006480:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006482:	2300      	movs	r3, #0
 8006484:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006486:	f000 fb13 	bl	8006ab0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800648a:	4b1d      	ldr	r3, [pc, #116]	@ (8006500 <xTimerCreateTimerTask+0x84>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d021      	beq.n	80064d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006492:	2300      	movs	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800649a:	1d3a      	adds	r2, r7, #4
 800649c:	f107 0108 	add.w	r1, r7, #8
 80064a0:	f107 030c 	add.w	r3, r7, #12
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fe fb15 	bl	8004ad4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064aa:	6879      	ldr	r1, [r7, #4]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	9202      	str	r2, [sp, #8]
 80064b2:	9301      	str	r3, [sp, #4]
 80064b4:	2302      	movs	r3, #2
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	2300      	movs	r3, #0
 80064ba:	460a      	mov	r2, r1
 80064bc:	4911      	ldr	r1, [pc, #68]	@ (8006504 <xTimerCreateTimerTask+0x88>)
 80064be:	4812      	ldr	r0, [pc, #72]	@ (8006508 <xTimerCreateTimerTask+0x8c>)
 80064c0:	f7ff f8d0 	bl	8005664 <xTaskCreateStatic>
 80064c4:	4603      	mov	r3, r0
 80064c6:	4a11      	ldr	r2, [pc, #68]	@ (800650c <xTimerCreateTimerTask+0x90>)
 80064c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80064ca:	4b10      	ldr	r3, [pc, #64]	@ (800650c <xTimerCreateTimerTask+0x90>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80064d2:	2301      	movs	r3, #1
 80064d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	613b      	str	r3, [r7, #16]
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	e7fd      	b.n	80064f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80064f4:	697b      	ldr	r3, [r7, #20]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	2000135c 	.word	0x2000135c
 8006504:	08007464 	.word	0x08007464
 8006508:	08006649 	.word	0x08006649
 800650c:	20001360 	.word	0x20001360

08006510 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08a      	sub	sp, #40	@ 0x28
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800651e:	2300      	movs	r3, #0
 8006520:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10b      	bne.n	8006540 <xTimerGenericCommand+0x30>
	__asm volatile
 8006528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652c:	f383 8811 	msr	BASEPRI, r3
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	623b      	str	r3, [r7, #32]
}
 800653a:	bf00      	nop
 800653c:	bf00      	nop
 800653e:	e7fd      	b.n	800653c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006540:	4b19      	ldr	r3, [pc, #100]	@ (80065a8 <xTimerGenericCommand+0x98>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d02a      	beq.n	800659e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b05      	cmp	r3, #5
 8006558:	dc18      	bgt.n	800658c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800655a:	f7ff fead 	bl	80062b8 <xTaskGetSchedulerState>
 800655e:	4603      	mov	r3, r0
 8006560:	2b02      	cmp	r3, #2
 8006562:	d109      	bne.n	8006578 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006564:	4b10      	ldr	r3, [pc, #64]	@ (80065a8 <xTimerGenericCommand+0x98>)
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	f107 0110 	add.w	r1, r7, #16
 800656c:	2300      	movs	r3, #0
 800656e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006570:	f7fe fc88 	bl	8004e84 <xQueueGenericSend>
 8006574:	6278      	str	r0, [r7, #36]	@ 0x24
 8006576:	e012      	b.n	800659e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006578:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <xTimerGenericCommand+0x98>)
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	f107 0110 	add.w	r1, r7, #16
 8006580:	2300      	movs	r3, #0
 8006582:	2200      	movs	r2, #0
 8006584:	f7fe fc7e 	bl	8004e84 <xQueueGenericSend>
 8006588:	6278      	str	r0, [r7, #36]	@ 0x24
 800658a:	e008      	b.n	800659e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800658c:	4b06      	ldr	r3, [pc, #24]	@ (80065a8 <xTimerGenericCommand+0x98>)
 800658e:	6818      	ldr	r0, [r3, #0]
 8006590:	f107 0110 	add.w	r1, r7, #16
 8006594:	2300      	movs	r3, #0
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	f7fe fd76 	bl	8005088 <xQueueGenericSendFromISR>
 800659c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3728      	adds	r7, #40	@ 0x28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	2000135c 	.word	0x2000135c

080065ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b6:	4b23      	ldr	r3, [pc, #140]	@ (8006644 <prvProcessExpiredTimer+0x98>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	3304      	adds	r3, #4
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fe fb29 	bl	8004c1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d023      	beq.n	8006620 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	699a      	ldr	r2, [r3, #24]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	18d1      	adds	r1, r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	6978      	ldr	r0, [r7, #20]
 80065e6:	f000 f8d5 	bl	8006794 <prvInsertTimerInActiveList>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d020      	beq.n	8006632 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065f0:	2300      	movs	r3, #0
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	2300      	movs	r3, #0
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	2100      	movs	r1, #0
 80065fa:	6978      	ldr	r0, [r7, #20]
 80065fc:	f7ff ff88 	bl	8006510 <xTimerGenericCommand>
 8006600:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d114      	bne.n	8006632 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	60fb      	str	r3, [r7, #12]
}
 800661a:	bf00      	nop
 800661c:	bf00      	nop
 800661e:	e7fd      	b.n	800661c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006626:	f023 0301 	bic.w	r3, r3, #1
 800662a:	b2da      	uxtb	r2, r3
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	6978      	ldr	r0, [r7, #20]
 8006638:	4798      	blx	r3
}
 800663a:	bf00      	nop
 800663c:	3718      	adds	r7, #24
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20001354 	.word	0x20001354

08006648 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006650:	f107 0308 	add.w	r3, r7, #8
 8006654:	4618      	mov	r0, r3
 8006656:	f000 f859 	bl	800670c <prvGetNextExpireTime>
 800665a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4619      	mov	r1, r3
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 f805 	bl	8006670 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006666:	f000 f8d7 	bl	8006818 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800666a:	bf00      	nop
 800666c:	e7f0      	b.n	8006650 <prvTimerTask+0x8>
	...

08006670 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800667a:	f7ff fa37 	bl	8005aec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800667e:	f107 0308 	add.w	r3, r7, #8
 8006682:	4618      	mov	r0, r3
 8006684:	f000 f866 	bl	8006754 <prvSampleTimeNow>
 8006688:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d130      	bne.n	80066f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10a      	bne.n	80066ac <prvProcessTimerOrBlockTask+0x3c>
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	429a      	cmp	r2, r3
 800669c:	d806      	bhi.n	80066ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800669e:	f7ff fa33 	bl	8005b08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7ff ff81 	bl	80065ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80066aa:	e024      	b.n	80066f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d008      	beq.n	80066c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80066b2:	4b13      	ldr	r3, [pc, #76]	@ (8006700 <prvProcessTimerOrBlockTask+0x90>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <prvProcessTimerOrBlockTask+0x50>
 80066bc:	2301      	movs	r3, #1
 80066be:	e000      	b.n	80066c2 <prvProcessTimerOrBlockTask+0x52>
 80066c0:	2300      	movs	r3, #0
 80066c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80066c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006704 <prvProcessTimerOrBlockTask+0x94>)
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	4619      	mov	r1, r3
 80066d2:	f7fe ff93 	bl	80055fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80066d6:	f7ff fa17 	bl	8005b08 <xTaskResumeAll>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10a      	bne.n	80066f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80066e0:	4b09      	ldr	r3, [pc, #36]	@ (8006708 <prvProcessTimerOrBlockTask+0x98>)
 80066e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	f3bf 8f6f 	isb	sy
}
 80066f0:	e001      	b.n	80066f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80066f2:	f7ff fa09 	bl	8005b08 <xTaskResumeAll>
}
 80066f6:	bf00      	nop
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20001358 	.word	0x20001358
 8006704:	2000135c 	.word	0x2000135c
 8006708:	e000ed04 	.word	0xe000ed04

0800670c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006714:	4b0e      	ldr	r3, [pc, #56]	@ (8006750 <prvGetNextExpireTime+0x44>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <prvGetNextExpireTime+0x16>
 800671e:	2201      	movs	r2, #1
 8006720:	e000      	b.n	8006724 <prvGetNextExpireTime+0x18>
 8006722:	2200      	movs	r2, #0
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d105      	bne.n	800673c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006730:	4b07      	ldr	r3, [pc, #28]	@ (8006750 <prvGetNextExpireTime+0x44>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	e001      	b.n	8006740 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006740:	68fb      	ldr	r3, [r7, #12]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	20001354 	.word	0x20001354

08006754 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800675c:	f7ff fa72 	bl	8005c44 <xTaskGetTickCount>
 8006760:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006762:	4b0b      	ldr	r3, [pc, #44]	@ (8006790 <prvSampleTimeNow+0x3c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	429a      	cmp	r2, r3
 800676a:	d205      	bcs.n	8006778 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800676c:	f000 f93a 	bl	80069e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e002      	b.n	800677e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800677e:	4a04      	ldr	r2, [pc, #16]	@ (8006790 <prvSampleTimeNow+0x3c>)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006784:	68fb      	ldr	r3, [r7, #12]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20001364 	.word	0x20001364

08006794 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d812      	bhi.n	80067e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	1ad2      	subs	r2, r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d302      	bcc.n	80067ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80067c8:	2301      	movs	r3, #1
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	e01b      	b.n	8006806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067ce:	4b10      	ldr	r3, [pc, #64]	@ (8006810 <prvInsertTimerInActiveList+0x7c>)
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3304      	adds	r3, #4
 80067d6:	4619      	mov	r1, r3
 80067d8:	4610      	mov	r0, r2
 80067da:	f7fe f9e6 	bl	8004baa <vListInsert>
 80067de:	e012      	b.n	8006806 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d206      	bcs.n	80067f6 <prvInsertTimerInActiveList+0x62>
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d302      	bcc.n	80067f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80067f0:	2301      	movs	r3, #1
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	e007      	b.n	8006806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067f6:	4b07      	ldr	r3, [pc, #28]	@ (8006814 <prvInsertTimerInActiveList+0x80>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	3304      	adds	r3, #4
 80067fe:	4619      	mov	r1, r3
 8006800:	4610      	mov	r0, r2
 8006802:	f7fe f9d2 	bl	8004baa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006806:	697b      	ldr	r3, [r7, #20]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3718      	adds	r7, #24
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20001358 	.word	0x20001358
 8006814:	20001354 	.word	0x20001354

08006818 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08e      	sub	sp, #56	@ 0x38
 800681c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800681e:	e0ce      	b.n	80069be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	da19      	bge.n	800685a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006826:	1d3b      	adds	r3, r7, #4
 8006828:	3304      	adds	r3, #4
 800682a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800682c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10b      	bne.n	800684a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	61fb      	str	r3, [r7, #28]
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop
 8006848:	e7fd      	b.n	8006846 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800684a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006850:	6850      	ldr	r0, [r2, #4]
 8006852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006854:	6892      	ldr	r2, [r2, #8]
 8006856:	4611      	mov	r1, r2
 8006858:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	f2c0 80ae 	blt.w	80069be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d004      	beq.n	8006878 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800686e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006870:	3304      	adds	r3, #4
 8006872:	4618      	mov	r0, r3
 8006874:	f7fe f9d2 	bl	8004c1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006878:	463b      	mov	r3, r7
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff ff6a 	bl	8006754 <prvSampleTimeNow>
 8006880:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b09      	cmp	r3, #9
 8006886:	f200 8097 	bhi.w	80069b8 <prvProcessReceivedCommands+0x1a0>
 800688a:	a201      	add	r2, pc, #4	@ (adr r2, 8006890 <prvProcessReceivedCommands+0x78>)
 800688c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006890:	080068b9 	.word	0x080068b9
 8006894:	080068b9 	.word	0x080068b9
 8006898:	080068b9 	.word	0x080068b9
 800689c:	0800692f 	.word	0x0800692f
 80068a0:	08006943 	.word	0x08006943
 80068a4:	0800698f 	.word	0x0800698f
 80068a8:	080068b9 	.word	0x080068b9
 80068ac:	080068b9 	.word	0x080068b9
 80068b0:	0800692f 	.word	0x0800692f
 80068b4:	08006943 	.word	0x08006943
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068be:	f043 0301 	orr.w	r3, r3, #1
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	18d1      	adds	r1, r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068d8:	f7ff ff5c 	bl	8006794 <prvInsertTimerInActiveList>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d06c      	beq.n	80069bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d061      	beq.n	80069bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	441a      	add	r2, r3
 8006900:	2300      	movs	r3, #0
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	2300      	movs	r3, #0
 8006906:	2100      	movs	r1, #0
 8006908:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800690a:	f7ff fe01 	bl	8006510 <xTimerGenericCommand>
 800690e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d152      	bne.n	80069bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	61bb      	str	r3, [r7, #24]
}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	e7fd      	b.n	800692a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800692e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006930:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006934:	f023 0301 	bic.w	r3, r3, #1
 8006938:	b2da      	uxtb	r2, r3
 800693a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006940:	e03d      	b.n	80069be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006948:	f043 0301 	orr.w	r3, r3, #1
 800694c:	b2da      	uxtb	r2, r3
 800694e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006950:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006958:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800695a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10b      	bne.n	800697a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006966:	f383 8811 	msr	BASEPRI, r3
 800696a:	f3bf 8f6f 	isb	sy
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	617b      	str	r3, [r7, #20]
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop
 8006978:	e7fd      	b.n	8006976 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800697a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006980:	18d1      	adds	r1, r2, r3
 8006982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006988:	f7ff ff04 	bl	8006794 <prvInsertTimerInActiveList>
					break;
 800698c:	e017      	b.n	80069be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800698e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006990:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d103      	bne.n	80069a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800699c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800699e:	f000 fbeb 	bl	8007178 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80069a2:	e00c      	b.n	80069be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80069b6:	e002      	b.n	80069be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80069b8:	bf00      	nop
 80069ba:	e000      	b.n	80069be <prvProcessReceivedCommands+0x1a6>
					break;
 80069bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069be:	4b08      	ldr	r3, [pc, #32]	@ (80069e0 <prvProcessReceivedCommands+0x1c8>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	1d39      	adds	r1, r7, #4
 80069c4:	2200      	movs	r2, #0
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fe fbfc 	bl	80051c4 <xQueueReceive>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f47f af26 	bne.w	8006820 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	3730      	adds	r7, #48	@ 0x30
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	2000135c 	.word	0x2000135c

080069e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b088      	sub	sp, #32
 80069e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069ea:	e049      	b.n	8006a80 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069ec:	4b2e      	ldr	r3, [pc, #184]	@ (8006aa8 <prvSwitchTimerLists+0xc4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f6:	4b2c      	ldr	r3, [pc, #176]	@ (8006aa8 <prvSwitchTimerLists+0xc4>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fe f909 	bl	8004c1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d02f      	beq.n	8006a80 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4413      	add	r3, r2
 8006a28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d90e      	bls.n	8006a50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa8 <prvSwitchTimerLists+0xc4>)
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	3304      	adds	r3, #4
 8006a46:	4619      	mov	r1, r3
 8006a48:	4610      	mov	r0, r2
 8006a4a:	f7fe f8ae 	bl	8004baa <vListInsert>
 8006a4e:	e017      	b.n	8006a80 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a50:	2300      	movs	r3, #0
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	2300      	movs	r3, #0
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	2100      	movs	r1, #0
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f7ff fd58 	bl	8006510 <xTimerGenericCommand>
 8006a60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10b      	bne.n	8006a80 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	603b      	str	r3, [r7, #0]
}
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	e7fd      	b.n	8006a7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a80:	4b09      	ldr	r3, [pc, #36]	@ (8006aa8 <prvSwitchTimerLists+0xc4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1b0      	bne.n	80069ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a8a:	4b07      	ldr	r3, [pc, #28]	@ (8006aa8 <prvSwitchTimerLists+0xc4>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a90:	4b06      	ldr	r3, [pc, #24]	@ (8006aac <prvSwitchTimerLists+0xc8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a04      	ldr	r2, [pc, #16]	@ (8006aa8 <prvSwitchTimerLists+0xc4>)
 8006a96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a98:	4a04      	ldr	r2, [pc, #16]	@ (8006aac <prvSwitchTimerLists+0xc8>)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	6013      	str	r3, [r2, #0]
}
 8006a9e:	bf00      	nop
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20001354 	.word	0x20001354
 8006aac:	20001358 	.word	0x20001358

08006ab0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ab6:	f000 f96f 	bl	8006d98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006aba:	4b15      	ldr	r3, [pc, #84]	@ (8006b10 <prvCheckForValidListAndQueue+0x60>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d120      	bne.n	8006b04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ac2:	4814      	ldr	r0, [pc, #80]	@ (8006b14 <prvCheckForValidListAndQueue+0x64>)
 8006ac4:	f7fe f820 	bl	8004b08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ac8:	4813      	ldr	r0, [pc, #76]	@ (8006b18 <prvCheckForValidListAndQueue+0x68>)
 8006aca:	f7fe f81d 	bl	8004b08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ace:	4b13      	ldr	r3, [pc, #76]	@ (8006b1c <prvCheckForValidListAndQueue+0x6c>)
 8006ad0:	4a10      	ldr	r2, [pc, #64]	@ (8006b14 <prvCheckForValidListAndQueue+0x64>)
 8006ad2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ad4:	4b12      	ldr	r3, [pc, #72]	@ (8006b20 <prvCheckForValidListAndQueue+0x70>)
 8006ad6:	4a10      	ldr	r2, [pc, #64]	@ (8006b18 <prvCheckForValidListAndQueue+0x68>)
 8006ad8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ada:	2300      	movs	r3, #0
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	4b11      	ldr	r3, [pc, #68]	@ (8006b24 <prvCheckForValidListAndQueue+0x74>)
 8006ae0:	4a11      	ldr	r2, [pc, #68]	@ (8006b28 <prvCheckForValidListAndQueue+0x78>)
 8006ae2:	2110      	movs	r1, #16
 8006ae4:	200a      	movs	r0, #10
 8006ae6:	f7fe f92d 	bl	8004d44 <xQueueGenericCreateStatic>
 8006aea:	4603      	mov	r3, r0
 8006aec:	4a08      	ldr	r2, [pc, #32]	@ (8006b10 <prvCheckForValidListAndQueue+0x60>)
 8006aee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006af0:	4b07      	ldr	r3, [pc, #28]	@ (8006b10 <prvCheckForValidListAndQueue+0x60>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d005      	beq.n	8006b04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006af8:	4b05      	ldr	r3, [pc, #20]	@ (8006b10 <prvCheckForValidListAndQueue+0x60>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	490b      	ldr	r1, [pc, #44]	@ (8006b2c <prvCheckForValidListAndQueue+0x7c>)
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe fd52 	bl	80055a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b04:	f000 f97a 	bl	8006dfc <vPortExitCritical>
}
 8006b08:	bf00      	nop
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	2000135c 	.word	0x2000135c
 8006b14:	2000132c 	.word	0x2000132c
 8006b18:	20001340 	.word	0x20001340
 8006b1c:	20001354 	.word	0x20001354
 8006b20:	20001358 	.word	0x20001358
 8006b24:	20001408 	.word	0x20001408
 8006b28:	20001368 	.word	0x20001368
 8006b2c:	0800746c 	.word	0x0800746c

08006b30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3b04      	subs	r3, #4
 8006b40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3b04      	subs	r3, #4
 8006b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	f023 0201 	bic.w	r2, r3, #1
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3b04      	subs	r3, #4
 8006b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b60:	4a0c      	ldr	r2, [pc, #48]	@ (8006b94 <pxPortInitialiseStack+0x64>)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3b14      	subs	r3, #20
 8006b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	3b04      	subs	r3, #4
 8006b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f06f 0202 	mvn.w	r2, #2
 8006b7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3b20      	subs	r3, #32
 8006b84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b86:	68fb      	ldr	r3, [r7, #12]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	08006b99 	.word	0x08006b99

08006b98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ba2:	4b13      	ldr	r3, [pc, #76]	@ (8006bf0 <prvTaskExitError+0x58>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006baa:	d00b      	beq.n	8006bc4 <prvTaskExitError+0x2c>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	60fb      	str	r3, [r7, #12]
}
 8006bbe:	bf00      	nop
 8006bc0:	bf00      	nop
 8006bc2:	e7fd      	b.n	8006bc0 <prvTaskExitError+0x28>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	60bb      	str	r3, [r7, #8]
}
 8006bd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bd8:	bf00      	nop
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d0fc      	beq.n	8006bda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	2000000c 	.word	0x2000000c
	...

08006c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c00:	4b07      	ldr	r3, [pc, #28]	@ (8006c20 <pxCurrentTCBConst2>)
 8006c02:	6819      	ldr	r1, [r3, #0]
 8006c04:	6808      	ldr	r0, [r1, #0]
 8006c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0a:	f380 8809 	msr	PSP, r0
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f04f 0000 	mov.w	r0, #0
 8006c16:	f380 8811 	msr	BASEPRI, r0
 8006c1a:	4770      	bx	lr
 8006c1c:	f3af 8000 	nop.w

08006c20 <pxCurrentTCBConst2>:
 8006c20:	20000e2c 	.word	0x20000e2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop

08006c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c28:	4808      	ldr	r0, [pc, #32]	@ (8006c4c <prvPortStartFirstTask+0x24>)
 8006c2a:	6800      	ldr	r0, [r0, #0]
 8006c2c:	6800      	ldr	r0, [r0, #0]
 8006c2e:	f380 8808 	msr	MSP, r0
 8006c32:	f04f 0000 	mov.w	r0, #0
 8006c36:	f380 8814 	msr	CONTROL, r0
 8006c3a:	b662      	cpsie	i
 8006c3c:	b661      	cpsie	f
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	df00      	svc	0
 8006c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c4a:	bf00      	nop
 8006c4c:	e000ed08 	.word	0xe000ed08

08006c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c56:	4b47      	ldr	r3, [pc, #284]	@ (8006d74 <xPortStartScheduler+0x124>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a47      	ldr	r2, [pc, #284]	@ (8006d78 <xPortStartScheduler+0x128>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d10b      	bne.n	8006c78 <xPortStartScheduler+0x28>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	60fb      	str	r3, [r7, #12]
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	e7fd      	b.n	8006c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c78:	4b3e      	ldr	r3, [pc, #248]	@ (8006d74 <xPortStartScheduler+0x124>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d7c <xPortStartScheduler+0x12c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d10b      	bne.n	8006c9a <xPortStartScheduler+0x4a>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	613b      	str	r3, [r7, #16]
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	e7fd      	b.n	8006c96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c9a:	4b39      	ldr	r3, [pc, #228]	@ (8006d80 <xPortStartScheduler+0x130>)
 8006c9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	22ff      	movs	r2, #255	@ 0xff
 8006caa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	4b31      	ldr	r3, [pc, #196]	@ (8006d84 <xPortStartScheduler+0x134>)
 8006cc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cc2:	4b31      	ldr	r3, [pc, #196]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006cc4:	2207      	movs	r2, #7
 8006cc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cc8:	e009      	b.n	8006cde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006cca:	4b2f      	ldr	r3, [pc, #188]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006cd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cde:	78fb      	ldrb	r3, [r7, #3]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce6:	2b80      	cmp	r3, #128	@ 0x80
 8006ce8:	d0ef      	beq.n	8006cca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006cea:	4b27      	ldr	r3, [pc, #156]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f1c3 0307 	rsb	r3, r3, #7
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d00b      	beq.n	8006d0e <xPortStartScheduler+0xbe>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60bb      	str	r3, [r7, #8]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	021b      	lsls	r3, r3, #8
 8006d14:	4a1c      	ldr	r2, [pc, #112]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006d16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d18:	4b1b      	ldr	r3, [pc, #108]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d20:	4a19      	ldr	r2, [pc, #100]	@ (8006d88 <xPortStartScheduler+0x138>)
 8006d22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d2c:	4b17      	ldr	r3, [pc, #92]	@ (8006d8c <xPortStartScheduler+0x13c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a16      	ldr	r2, [pc, #88]	@ (8006d8c <xPortStartScheduler+0x13c>)
 8006d32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006d36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d38:	4b14      	ldr	r3, [pc, #80]	@ (8006d8c <xPortStartScheduler+0x13c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a13      	ldr	r2, [pc, #76]	@ (8006d8c <xPortStartScheduler+0x13c>)
 8006d3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006d42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d44:	f000 f8da 	bl	8006efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d48:	4b11      	ldr	r3, [pc, #68]	@ (8006d90 <xPortStartScheduler+0x140>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d4e:	f000 f8f9 	bl	8006f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d52:	4b10      	ldr	r3, [pc, #64]	@ (8006d94 <xPortStartScheduler+0x144>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a0f      	ldr	r2, [pc, #60]	@ (8006d94 <xPortStartScheduler+0x144>)
 8006d58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006d5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d5e:	f7ff ff63 	bl	8006c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d62:	f7ff f839 	bl	8005dd8 <vTaskSwitchContext>
	prvTaskExitError();
 8006d66:	f7ff ff17 	bl	8006b98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	e000ed00 	.word	0xe000ed00
 8006d78:	410fc271 	.word	0x410fc271
 8006d7c:	410fc270 	.word	0x410fc270
 8006d80:	e000e400 	.word	0xe000e400
 8006d84:	20001458 	.word	0x20001458
 8006d88:	2000145c 	.word	0x2000145c
 8006d8c:	e000ed20 	.word	0xe000ed20
 8006d90:	2000000c 	.word	0x2000000c
 8006d94:	e000ef34 	.word	0xe000ef34

08006d98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	607b      	str	r3, [r7, #4]
}
 8006db0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006db2:	4b10      	ldr	r3, [pc, #64]	@ (8006df4 <vPortEnterCritical+0x5c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3301      	adds	r3, #1
 8006db8:	4a0e      	ldr	r2, [pc, #56]	@ (8006df4 <vPortEnterCritical+0x5c>)
 8006dba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <vPortEnterCritical+0x5c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d110      	bne.n	8006de6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006df8 <vPortEnterCritical+0x60>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	603b      	str	r3, [r7, #0]
}
 8006de0:	bf00      	nop
 8006de2:	bf00      	nop
 8006de4:	e7fd      	b.n	8006de2 <vPortEnterCritical+0x4a>
	}
}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	2000000c 	.word	0x2000000c
 8006df8:	e000ed04 	.word	0xe000ed04

08006dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e02:	4b12      	ldr	r3, [pc, #72]	@ (8006e4c <vPortExitCritical+0x50>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10b      	bne.n	8006e22 <vPortExitCritical+0x26>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	607b      	str	r3, [r7, #4]
}
 8006e1c:	bf00      	nop
 8006e1e:	bf00      	nop
 8006e20:	e7fd      	b.n	8006e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e22:	4b0a      	ldr	r3, [pc, #40]	@ (8006e4c <vPortExitCritical+0x50>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	4a08      	ldr	r2, [pc, #32]	@ (8006e4c <vPortExitCritical+0x50>)
 8006e2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e2c:	4b07      	ldr	r3, [pc, #28]	@ (8006e4c <vPortExitCritical+0x50>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d105      	bne.n	8006e40 <vPortExitCritical+0x44>
 8006e34:	2300      	movs	r3, #0
 8006e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	f383 8811 	msr	BASEPRI, r3
}
 8006e3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	2000000c 	.word	0x2000000c

08006e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e50:	f3ef 8009 	mrs	r0, PSP
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	4b15      	ldr	r3, [pc, #84]	@ (8006eb0 <pxCurrentTCBConst>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	f01e 0f10 	tst.w	lr, #16
 8006e60:	bf08      	it	eq
 8006e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6a:	6010      	str	r0, [r2, #0]
 8006e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006e74:	f380 8811 	msr	BASEPRI, r0
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f7fe ffaa 	bl	8005dd8 <vTaskSwitchContext>
 8006e84:	f04f 0000 	mov.w	r0, #0
 8006e88:	f380 8811 	msr	BASEPRI, r0
 8006e8c:	bc09      	pop	{r0, r3}
 8006e8e:	6819      	ldr	r1, [r3, #0]
 8006e90:	6808      	ldr	r0, [r1, #0]
 8006e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e96:	f01e 0f10 	tst.w	lr, #16
 8006e9a:	bf08      	it	eq
 8006e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ea0:	f380 8809 	msr	PSP, r0
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	f3af 8000 	nop.w

08006eb0 <pxCurrentTCBConst>:
 8006eb0:	20000e2c 	.word	0x20000e2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop

08006eb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	607b      	str	r3, [r7, #4]
}
 8006ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ed2:	f7fe fec7 	bl	8005c64 <xTaskIncrementTick>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006edc:	4b06      	ldr	r3, [pc, #24]	@ (8006ef8 <xPortSysTickHandler+0x40>)
 8006ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	f383 8811 	msr	BASEPRI, r3
}
 8006eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ef0:	bf00      	nop
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	e000ed04 	.word	0xe000ed04

08006efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f00:	4b0b      	ldr	r3, [pc, #44]	@ (8006f30 <vPortSetupTimerInterrupt+0x34>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f06:	4b0b      	ldr	r3, [pc, #44]	@ (8006f34 <vPortSetupTimerInterrupt+0x38>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f38 <vPortSetupTimerInterrupt+0x3c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a0a      	ldr	r2, [pc, #40]	@ (8006f3c <vPortSetupTimerInterrupt+0x40>)
 8006f12:	fba2 2303 	umull	r2, r3, r2, r3
 8006f16:	099b      	lsrs	r3, r3, #6
 8006f18:	4a09      	ldr	r2, [pc, #36]	@ (8006f40 <vPortSetupTimerInterrupt+0x44>)
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f1e:	4b04      	ldr	r3, [pc, #16]	@ (8006f30 <vPortSetupTimerInterrupt+0x34>)
 8006f20:	2207      	movs	r2, #7
 8006f22:	601a      	str	r2, [r3, #0]
}
 8006f24:	bf00      	nop
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	e000e010 	.word	0xe000e010
 8006f34:	e000e018 	.word	0xe000e018
 8006f38:	20000000 	.word	0x20000000
 8006f3c:	10624dd3 	.word	0x10624dd3
 8006f40:	e000e014 	.word	0xe000e014

08006f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006f54 <vPortEnableVFP+0x10>
 8006f48:	6801      	ldr	r1, [r0, #0]
 8006f4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006f4e:	6001      	str	r1, [r0, #0]
 8006f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f52:	bf00      	nop
 8006f54:	e000ed88 	.word	0xe000ed88

08006f58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f5e:	f3ef 8305 	mrs	r3, IPSR
 8006f62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2b0f      	cmp	r3, #15
 8006f68:	d915      	bls.n	8006f96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f6a:	4a18      	ldr	r2, [pc, #96]	@ (8006fcc <vPortValidateInterruptPriority+0x74>)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4413      	add	r3, r2
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f74:	4b16      	ldr	r3, [pc, #88]	@ (8006fd0 <vPortValidateInterruptPriority+0x78>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	7afa      	ldrb	r2, [r7, #11]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d20b      	bcs.n	8006f96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	607b      	str	r3, [r7, #4]
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	e7fd      	b.n	8006f92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f96:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd4 <vPortValidateInterruptPriority+0x7c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd8 <vPortValidateInterruptPriority+0x80>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d90b      	bls.n	8006fbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	603b      	str	r3, [r7, #0]
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <vPortValidateInterruptPriority+0x62>
	}
 8006fbe:	bf00      	nop
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	e000e3f0 	.word	0xe000e3f0
 8006fd0:	20001458 	.word	0x20001458
 8006fd4:	e000ed0c 	.word	0xe000ed0c
 8006fd8:	2000145c 	.word	0x2000145c

08006fdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08a      	sub	sp, #40	@ 0x28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fe8:	f7fe fd80 	bl	8005aec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fec:	4b5c      	ldr	r3, [pc, #368]	@ (8007160 <pvPortMalloc+0x184>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ff4:	f000 f924 	bl	8007240 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8007164 <pvPortMalloc+0x188>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4013      	ands	r3, r2
 8007000:	2b00      	cmp	r3, #0
 8007002:	f040 8095 	bne.w	8007130 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01e      	beq.n	800704a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800700c:	2208      	movs	r2, #8
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4413      	add	r3, r2
 8007012:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f003 0307 	and.w	r3, r3, #7
 800701a:	2b00      	cmp	r3, #0
 800701c:	d015      	beq.n	800704a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f023 0307 	bic.w	r3, r3, #7
 8007024:	3308      	adds	r3, #8
 8007026:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00b      	beq.n	800704a <pvPortMalloc+0x6e>
	__asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	617b      	str	r3, [r7, #20]
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop
 8007048:	e7fd      	b.n	8007046 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d06f      	beq.n	8007130 <pvPortMalloc+0x154>
 8007050:	4b45      	ldr	r3, [pc, #276]	@ (8007168 <pvPortMalloc+0x18c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	429a      	cmp	r2, r3
 8007058:	d86a      	bhi.n	8007130 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800705a:	4b44      	ldr	r3, [pc, #272]	@ (800716c <pvPortMalloc+0x190>)
 800705c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800705e:	4b43      	ldr	r3, [pc, #268]	@ (800716c <pvPortMalloc+0x190>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007064:	e004      	b.n	8007070 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007068:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	429a      	cmp	r2, r3
 8007078:	d903      	bls.n	8007082 <pvPortMalloc+0xa6>
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f1      	bne.n	8007066 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007082:	4b37      	ldr	r3, [pc, #220]	@ (8007160 <pvPortMalloc+0x184>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007088:	429a      	cmp	r2, r3
 800708a:	d051      	beq.n	8007130 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2208      	movs	r2, #8
 8007092:	4413      	add	r3, r2
 8007094:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	6a3b      	ldr	r3, [r7, #32]
 800709c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800709e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	1ad2      	subs	r2, r2, r3
 80070a6:	2308      	movs	r3, #8
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d920      	bls.n	80070f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4413      	add	r3, r2
 80070b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	f003 0307 	and.w	r3, r3, #7
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00b      	beq.n	80070d8 <pvPortMalloc+0xfc>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	613b      	str	r3, [r7, #16]
}
 80070d2:	bf00      	nop
 80070d4:	bf00      	nop
 80070d6:	e7fd      	b.n	80070d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070ea:	69b8      	ldr	r0, [r7, #24]
 80070ec:	f000 f90a 	bl	8007304 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007168 <pvPortMalloc+0x18c>)
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007168 <pvPortMalloc+0x18c>)
 80070fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070fe:	4b1a      	ldr	r3, [pc, #104]	@ (8007168 <pvPortMalloc+0x18c>)
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	4b1b      	ldr	r3, [pc, #108]	@ (8007170 <pvPortMalloc+0x194>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d203      	bcs.n	8007112 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800710a:	4b17      	ldr	r3, [pc, #92]	@ (8007168 <pvPortMalloc+0x18c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a18      	ldr	r2, [pc, #96]	@ (8007170 <pvPortMalloc+0x194>)
 8007110:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	4b13      	ldr	r3, [pc, #76]	@ (8007164 <pvPortMalloc+0x188>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	431a      	orrs	r2, r3
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007126:	4b13      	ldr	r3, [pc, #76]	@ (8007174 <pvPortMalloc+0x198>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3301      	adds	r3, #1
 800712c:	4a11      	ldr	r2, [pc, #68]	@ (8007174 <pvPortMalloc+0x198>)
 800712e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007130:	f7fe fcea 	bl	8005b08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	f003 0307 	and.w	r3, r3, #7
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <pvPortMalloc+0x17a>
	__asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	60fb      	str	r3, [r7, #12]
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	e7fd      	b.n	8007152 <pvPortMalloc+0x176>
	return pvReturn;
 8007156:	69fb      	ldr	r3, [r7, #28]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3728      	adds	r7, #40	@ 0x28
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20005068 	.word	0x20005068
 8007164:	2000507c 	.word	0x2000507c
 8007168:	2000506c 	.word	0x2000506c
 800716c:	20005060 	.word	0x20005060
 8007170:	20005070 	.word	0x20005070
 8007174:	20005074 	.word	0x20005074

08007178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d04f      	beq.n	800722a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800718a:	2308      	movs	r3, #8
 800718c:	425b      	negs	r3, r3
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4413      	add	r3, r2
 8007192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	4b25      	ldr	r3, [pc, #148]	@ (8007234 <vPortFree+0xbc>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4013      	ands	r3, r2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <vPortFree+0x46>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	60fb      	str	r3, [r7, #12]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <vPortFree+0x66>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	60bb      	str	r3, [r7, #8]
}
 80071d8:	bf00      	nop
 80071da:	bf00      	nop
 80071dc:	e7fd      	b.n	80071da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	4b14      	ldr	r3, [pc, #80]	@ (8007234 <vPortFree+0xbc>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4013      	ands	r3, r2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01e      	beq.n	800722a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d11a      	bne.n	800722a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007234 <vPortFree+0xbc>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	43db      	mvns	r3, r3
 80071fe:	401a      	ands	r2, r3
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007204:	f7fe fc72 	bl	8005aec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	4b0a      	ldr	r3, [pc, #40]	@ (8007238 <vPortFree+0xc0>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4413      	add	r3, r2
 8007212:	4a09      	ldr	r2, [pc, #36]	@ (8007238 <vPortFree+0xc0>)
 8007214:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007216:	6938      	ldr	r0, [r7, #16]
 8007218:	f000 f874 	bl	8007304 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800721c:	4b07      	ldr	r3, [pc, #28]	@ (800723c <vPortFree+0xc4>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3301      	adds	r3, #1
 8007222:	4a06      	ldr	r2, [pc, #24]	@ (800723c <vPortFree+0xc4>)
 8007224:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007226:	f7fe fc6f 	bl	8005b08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800722a:	bf00      	nop
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	2000507c 	.word	0x2000507c
 8007238:	2000506c 	.word	0x2000506c
 800723c:	20005078 	.word	0x20005078

08007240 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007246:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800724a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800724c:	4b27      	ldr	r3, [pc, #156]	@ (80072ec <prvHeapInit+0xac>)
 800724e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f003 0307 	and.w	r3, r3, #7
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00c      	beq.n	8007274 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3307      	adds	r3, #7
 800725e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0307 	bic.w	r3, r3, #7
 8007266:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	4a1f      	ldr	r2, [pc, #124]	@ (80072ec <prvHeapInit+0xac>)
 8007270:	4413      	add	r3, r2
 8007272:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007278:	4a1d      	ldr	r2, [pc, #116]	@ (80072f0 <prvHeapInit+0xb0>)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800727e:	4b1c      	ldr	r3, [pc, #112]	@ (80072f0 <prvHeapInit+0xb0>)
 8007280:	2200      	movs	r2, #0
 8007282:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	4413      	add	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800728c:	2208      	movs	r2, #8
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	1a9b      	subs	r3, r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0307 	bic.w	r3, r3, #7
 800729a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4a15      	ldr	r2, [pc, #84]	@ (80072f4 <prvHeapInit+0xb4>)
 80072a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072a2:	4b14      	ldr	r3, [pc, #80]	@ (80072f4 <prvHeapInit+0xb4>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2200      	movs	r2, #0
 80072a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072aa:	4b12      	ldr	r3, [pc, #72]	@ (80072f4 <prvHeapInit+0xb4>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2200      	movs	r2, #0
 80072b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	1ad2      	subs	r2, r2, r3
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072c0:	4b0c      	ldr	r3, [pc, #48]	@ (80072f4 <prvHeapInit+0xb4>)
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	4a0a      	ldr	r2, [pc, #40]	@ (80072f8 <prvHeapInit+0xb8>)
 80072ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	4a09      	ldr	r2, [pc, #36]	@ (80072fc <prvHeapInit+0xbc>)
 80072d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072d8:	4b09      	ldr	r3, [pc, #36]	@ (8007300 <prvHeapInit+0xc0>)
 80072da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80072de:	601a      	str	r2, [r3, #0]
}
 80072e0:	bf00      	nop
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	20001460 	.word	0x20001460
 80072f0:	20005060 	.word	0x20005060
 80072f4:	20005068 	.word	0x20005068
 80072f8:	20005070 	.word	0x20005070
 80072fc:	2000506c 	.word	0x2000506c
 8007300:	2000507c 	.word	0x2000507c

08007304 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800730c:	4b28      	ldr	r3, [pc, #160]	@ (80073b0 <prvInsertBlockIntoFreeList+0xac>)
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	e002      	b.n	8007318 <prvInsertBlockIntoFreeList+0x14>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	429a      	cmp	r2, r3
 8007320:	d8f7      	bhi.n	8007312 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	4413      	add	r3, r2
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	429a      	cmp	r2, r3
 8007332:	d108      	bne.n	8007346 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	441a      	add	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	441a      	add	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d118      	bne.n	800738c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	4b15      	ldr	r3, [pc, #84]	@ (80073b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	429a      	cmp	r2, r3
 8007364:	d00d      	beq.n	8007382 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	441a      	add	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	601a      	str	r2, [r3, #0]
 8007380:	e008      	b.n	8007394 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007382:	4b0c      	ldr	r3, [pc, #48]	@ (80073b4 <prvInsertBlockIntoFreeList+0xb0>)
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	e003      	b.n	8007394 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	429a      	cmp	r2, r3
 800739a:	d002      	beq.n	80073a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073a2:	bf00      	nop
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	20005060 	.word	0x20005060
 80073b4:	20005068 	.word	0x20005068

080073b8 <memset>:
 80073b8:	4402      	add	r2, r0
 80073ba:	4603      	mov	r3, r0
 80073bc:	4293      	cmp	r3, r2
 80073be:	d100      	bne.n	80073c2 <memset+0xa>
 80073c0:	4770      	bx	lr
 80073c2:	f803 1b01 	strb.w	r1, [r3], #1
 80073c6:	e7f9      	b.n	80073bc <memset+0x4>

080073c8 <__libc_init_array>:
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	4d0d      	ldr	r5, [pc, #52]	@ (8007400 <__libc_init_array+0x38>)
 80073cc:	4c0d      	ldr	r4, [pc, #52]	@ (8007404 <__libc_init_array+0x3c>)
 80073ce:	1b64      	subs	r4, r4, r5
 80073d0:	10a4      	asrs	r4, r4, #2
 80073d2:	2600      	movs	r6, #0
 80073d4:	42a6      	cmp	r6, r4
 80073d6:	d109      	bne.n	80073ec <__libc_init_array+0x24>
 80073d8:	4d0b      	ldr	r5, [pc, #44]	@ (8007408 <__libc_init_array+0x40>)
 80073da:	4c0c      	ldr	r4, [pc, #48]	@ (800740c <__libc_init_array+0x44>)
 80073dc:	f000 f826 	bl	800742c <_init>
 80073e0:	1b64      	subs	r4, r4, r5
 80073e2:	10a4      	asrs	r4, r4, #2
 80073e4:	2600      	movs	r6, #0
 80073e6:	42a6      	cmp	r6, r4
 80073e8:	d105      	bne.n	80073f6 <__libc_init_array+0x2e>
 80073ea:	bd70      	pop	{r4, r5, r6, pc}
 80073ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f0:	4798      	blx	r3
 80073f2:	3601      	adds	r6, #1
 80073f4:	e7ee      	b.n	80073d4 <__libc_init_array+0xc>
 80073f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80073fa:	4798      	blx	r3
 80073fc:	3601      	adds	r6, #1
 80073fe:	e7f2      	b.n	80073e6 <__libc_init_array+0x1e>
 8007400:	080074e4 	.word	0x080074e4
 8007404:	080074e4 	.word	0x080074e4
 8007408:	080074e4 	.word	0x080074e4
 800740c:	080074e8 	.word	0x080074e8

08007410 <memcpy>:
 8007410:	440a      	add	r2, r1
 8007412:	4291      	cmp	r1, r2
 8007414:	f100 33ff 	add.w	r3, r0, #4294967295
 8007418:	d100      	bne.n	800741c <memcpy+0xc>
 800741a:	4770      	bx	lr
 800741c:	b510      	push	{r4, lr}
 800741e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007426:	4291      	cmp	r1, r2
 8007428:	d1f9      	bne.n	800741e <memcpy+0xe>
 800742a:	bd10      	pop	{r4, pc}

0800742c <_init>:
 800742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742e:	bf00      	nop
 8007430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007432:	bc08      	pop	{r3}
 8007434:	469e      	mov	lr, r3
 8007436:	4770      	bx	lr

08007438 <_fini>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	bf00      	nop
 800743c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743e:	bc08      	pop	{r3}
 8007440:	469e      	mov	lr, r3
 8007442:	4770      	bx	lr
