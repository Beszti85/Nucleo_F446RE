
Nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ef4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080070c4  080070c4  000080c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800712c  0800712c  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800712c  0800712c  0000812c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007134  08007134  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007134  08007134  00008134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007138  08007138  00008138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800713c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e10  20000010  0800714c  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e20  0800714c  00009e20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f098  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004102  00000000  00000000  000280d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be0  00000000  00000000  0002c1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015db  00000000  00000000  0002ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000041b2  00000000  00000000  0002f39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000206b3  00000000  00000000  0003354d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed768  00000000  00000000  00053c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00141368  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077dc  00000000  00000000  001413ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00148b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080070ac 	.word	0x080070ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	080070ac 	.word	0x080070ac

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f000 fe20 	bl	8001184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f824 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 fa14 	bl	8000974 <MX_GPIO_Init>
  MX_DMA_Init();
 800054c:	f000 f9f2 	bl	8000934 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000550:	f000 f9c6 	bl	80008e0 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000554:	f000 f8dc 	bl	8000710 <MX_DAC_Init>
  MX_ADC1_Init();
 8000558:	f000 f888 	bl	800066c <MX_ADC1_Init>
  MX_I2C1_Init();
 800055c:	f000 f902 	bl	8000764 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000560:	f000 f964 	bl	800082c <MX_TIM4_Init>
  MX_SPI1_Init();
 8000564:	f000 f92c 	bl	80007c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000568:	f003 ffe8 	bl	800453c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800056c:	4a05      	ldr	r2, [pc, #20]	@ (8000584 <main+0x48>)
 800056e:	2100      	movs	r1, #0
 8000570:	4805      	ldr	r0, [pc, #20]	@ (8000588 <main+0x4c>)
 8000572:	f004 f82d 	bl	80045d0 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a04      	ldr	r2, [pc, #16]	@ (800058c <main+0x50>)
 800057a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f004 f802 	bl	8004584 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <main+0x44>
 8000584:	080070e8 	.word	0x080070e8
 8000588:	08000aa9 	.word	0x08000aa9
 800058c:	20000224 	.word	0x20000224

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2234      	movs	r2, #52	@ 0x34
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f006 fd4a 	bl	8007038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000664 <SystemClock_Config+0xd4>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	4a29      	ldr	r2, [pc, #164]	@ (8000664 <SystemClock_Config+0xd4>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c4:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <SystemClock_Config+0xd4>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	4b24      	ldr	r3, [pc, #144]	@ (8000668 <SystemClock_Config+0xd8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005dc:	4a22      	ldr	r2, [pc, #136]	@ (8000668 <SystemClock_Config+0xd8>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b20      	ldr	r3, [pc, #128]	@ (8000668 <SystemClock_Config+0xd8>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000604:	2310      	movs	r3, #16
 8000606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800060c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060e:	2304      	movs	r3, #4
 8000610:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000612:	2302      	movs	r3, #2
 8000614:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fb84 	bl	8002d2c <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800062a:	f000 fa57 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2102      	movs	r1, #2
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fff2 	bl	8002634 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000656:	f000 fa41 	bl	8000adc <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	@ 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800067e:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <MX_ADC1_Init+0x98>)
 8000680:	4a21      	ldr	r2, [pc, #132]	@ (8000708 <MX_ADC1_Init+0x9c>)
 8000682:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000684:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <MX_ADC1_Init+0x98>)
 8000686:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800068a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800068c:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000692:	4b1c      	ldr	r3, [pc, #112]	@ (8000704 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000698:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800069e:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a6:	4b17      	ldr	r3, [pc, #92]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ac:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006ae:	4a17      	ldr	r2, [pc, #92]	@ (800070c <MX_ADC1_Init+0xa0>)
 80006b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b2:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006cc:	480d      	ldr	r0, [pc, #52]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006ce:	f000 fd9b 	bl	8001208 <HAL_ADC_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006d8:	f000 fa00 	bl	8000adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006dc:	2300      	movs	r3, #0
 80006de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_ADC1_Init+0x98>)
 80006ee:	f000 fdcf 	bl	8001290 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006f8:	f000 f9f0 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2000002c 	.word	0x2000002c
 8000708:	40012000 	.word	0x40012000
 800070c:	0f000001 	.word	0x0f000001

08000710 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_DAC_Init+0x4c>)
 8000720:	4a0f      	ldr	r2, [pc, #60]	@ (8000760 <MX_DAC_Init+0x50>)
 8000722:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000724:	480d      	ldr	r0, [pc, #52]	@ (800075c <MX_DAC_Init+0x4c>)
 8000726:	f001 f8c3 	bl	80018b0 <HAL_DAC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000730:	f000 f9d4 	bl	8000adc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000734:	2300      	movs	r3, #0
 8000736:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	4619      	mov	r1, r3
 8000742:	4806      	ldr	r0, [pc, #24]	@ (800075c <MX_DAC_Init+0x4c>)
 8000744:	f001 f936 	bl	80019b4 <HAL_DAC_ConfigChannel>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800074e:	f000 f9c5 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000d4 	.word	0x200000d4
 8000760:	40007400 	.word	0x40007400

08000764 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_I2C1_Init+0x50>)
 800076a:	4a13      	ldr	r2, [pc, #76]	@ (80007b8 <MX_I2C1_Init+0x54>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_I2C1_Init+0x50>)
 8000770:	4a12      	ldr	r2, [pc, #72]	@ (80007bc <MX_I2C1_Init+0x58>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_I2C1_Init+0x50>)
 8000782:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000786:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000788:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <MX_I2C1_Init+0x50>)
 80007a2:	f001 fe03 	bl	80023ac <HAL_I2C_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007ac:	f000 f996 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200000e8 	.word	0x200000e8
 80007b8:	40005400 	.word	0x40005400
 80007bc:	000186a0 	.word	0x000186a0

080007c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007c6:	4a18      	ldr	r2, [pc, #96]	@ (8000828 <MX_SPI1_Init+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d2:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d8:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007f4:	2220      	movs	r2, #32
 80007f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_SPI1_Init+0x64>)
 800080c:	220a      	movs	r2, #10
 800080e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	@ (8000824 <MX_SPI1_Init+0x64>)
 8000812:	f002 fd29 	bl	8003268 <HAL_SPI_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800081c:	f000 f95e 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2000013c 	.word	0x2000013c
 8000828:	40013000 	.word	0x40013000

0800082c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	@ 0x28
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800084e:	4b22      	ldr	r3, [pc, #136]	@ (80008d8 <MX_TIM4_Init+0xac>)
 8000850:	4a22      	ldr	r2, [pc, #136]	@ (80008dc <MX_TIM4_Init+0xb0>)
 8000852:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000854:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <MX_TIM4_Init+0xac>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085a:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <MX_TIM4_Init+0xac>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000860:	4b1d      	ldr	r3, [pc, #116]	@ (80008d8 <MX_TIM4_Init+0xac>)
 8000862:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000866:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <MX_TIM4_Init+0xac>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086e:	4b1a      	ldr	r3, [pc, #104]	@ (80008d8 <MX_TIM4_Init+0xac>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000874:	4818      	ldr	r0, [pc, #96]	@ (80008d8 <MX_TIM4_Init+0xac>)
 8000876:	f002 fe49 	bl	800350c <HAL_TIM_PWM_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000880:	f000 f92c 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800088c:	f107 0320 	add.w	r3, r7, #32
 8000890:	4619      	mov	r1, r3
 8000892:	4811      	ldr	r0, [pc, #68]	@ (80008d8 <MX_TIM4_Init+0xac>)
 8000894:	f003 faba 	bl	8003e0c <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800089e:	f000 f91d 	bl	8000adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008a2:	2360      	movs	r3, #96	@ 0x60
 80008a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2200      	movs	r2, #0
 80008b6:	4619      	mov	r1, r3
 80008b8:	4807      	ldr	r0, [pc, #28]	@ (80008d8 <MX_TIM4_Init+0xac>)
 80008ba:	f002 ff67 	bl	800378c <HAL_TIM_PWM_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80008c4:	f000 f90a 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008c8:	4803      	ldr	r0, [pc, #12]	@ (80008d8 <MX_TIM4_Init+0xac>)
 80008ca:	f000 fae7 	bl	8000e9c <HAL_TIM_MspPostInit>

}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	@ 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000194 	.word	0x20000194
 80008dc:	40000800 	.word	0x40000800

080008e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e4:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <MX_USART2_UART_Init+0x50>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_USART2_UART_Init+0x4c>)
 8000918:	f003 fb08 	bl	8003f2c <HAL_UART_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000922:	f000 f8db 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200001dc 	.word	0x200001dc
 8000930:	40004400 	.word	0x40004400

08000934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_DMA_Init+0x3c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a0b      	ldr	r2, [pc, #44]	@ (8000970 <MX_DMA_Init+0x3c>)
 8000944:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_DMA_Init+0x3c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2105      	movs	r1, #5
 800095a:	2038      	movs	r0, #56	@ 0x38
 800095c:	f000 ff7e 	bl	800185c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000960:	2038      	movs	r0, #56	@ 0x38
 8000962:	f000 ff97 	bl	8001894 <HAL_NVIC_EnableIRQ>

}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b42      	ldr	r3, [pc, #264]	@ (8000a98 <MX_GPIO_Init+0x124>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a41      	ldr	r2, [pc, #260]	@ (8000a98 <MX_GPIO_Init+0x124>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a98 <MX_GPIO_Init+0x124>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000a98 <MX_GPIO_Init+0x124>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a3a      	ldr	r2, [pc, #232]	@ (8000a98 <MX_GPIO_Init+0x124>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b38      	ldr	r3, [pc, #224]	@ (8000a98 <MX_GPIO_Init+0x124>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b34      	ldr	r3, [pc, #208]	@ (8000a98 <MX_GPIO_Init+0x124>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a33      	ldr	r2, [pc, #204]	@ (8000a98 <MX_GPIO_Init+0x124>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b31      	ldr	r3, [pc, #196]	@ (8000a98 <MX_GPIO_Init+0x124>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a98 <MX_GPIO_Init+0x124>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a2c      	ldr	r2, [pc, #176]	@ (8000a98 <MX_GPIO_Init+0x124>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000a98 <MX_GPIO_Init+0x124>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D4_Pin|LCD_D5_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8000a00:	4826      	ldr	r0, [pc, #152]	@ (8000a9c <MX_GPIO_Init+0x128>)
 8000a02:	f001 fcb9 	bl	8002378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2180      	movs	r1, #128	@ 0x80
 8000a0a:	4825      	ldr	r0, [pc, #148]	@ (8000aa0 <MX_GPIO_Init+0x12c>)
 8000a0c:	f001 fcb4 	bl	8002378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000a16:	4823      	ldr	r0, [pc, #140]	@ (8000aa4 <MX_GPIO_Init+0x130>)
 8000a18:	f001 fcae 	bl	8002378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a22:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	481b      	ldr	r0, [pc, #108]	@ (8000aa0 <MX_GPIO_Init+0x12c>)
 8000a34:	f001 fb0c 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D4_Pin LCD_D5_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D4_Pin|LCD_D5_Pin;
 8000a38:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4812      	ldr	r0, [pc, #72]	@ (8000a9c <MX_GPIO_Init+0x128>)
 8000a52:	f001 fafd 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_E_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin;
 8000a56:	2380      	movs	r3, #128	@ 0x80
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_E_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <MX_GPIO_Init+0x12c>)
 8000a6e:	f001 faef 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 8000a72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4806      	ldr	r0, [pc, #24]	@ (8000aa4 <MX_GPIO_Init+0x130>)
 8000a8c:	f001 fae0 	bl	8002050 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	@ 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020000 	.word	0x40020000

08000aa8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f003 fe1f 	bl	80046f4 <osDelay>
 8000ab6:	e7fb      	b.n	8000ab0 <StartDefaultTask+0x8>

08000ab8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a04      	ldr	r2, [pc, #16]	@ (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d101      	bne.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000aca:	f000 fb7d 	bl	80011c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40001000 	.word	0x40001000

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <Error_Handler+0x8>

08000ae8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <HAL_MspInit+0x54>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	4a11      	ldr	r2, [pc, #68]	@ (8000b3c <HAL_MspInit+0x54>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <HAL_MspInit+0x54>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <HAL_MspInit+0x54>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <HAL_MspInit+0x54>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <HAL_MspInit+0x54>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	210f      	movs	r1, #15
 8000b2a:	f06f 0001 	mvn.w	r0, #1
 8000b2e:	f000 fe95 	bl	800185c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	@ 0x30
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a49      	ldr	r2, [pc, #292]	@ (8000c84 <HAL_ADC_MspInit+0x144>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	f040 808b 	bne.w	8000c7a <HAL_ADC_MspInit+0x13a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	4b47      	ldr	r3, [pc, #284]	@ (8000c88 <HAL_ADC_MspInit+0x148>)
 8000b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6c:	4a46      	ldr	r2, [pc, #280]	@ (8000c88 <HAL_ADC_MspInit+0x148>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b72:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b74:	4b44      	ldr	r3, [pc, #272]	@ (8000c88 <HAL_ADC_MspInit+0x148>)
 8000b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	4b40      	ldr	r3, [pc, #256]	@ (8000c88 <HAL_ADC_MspInit+0x148>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b88:	4a3f      	ldr	r2, [pc, #252]	@ (8000c88 <HAL_ADC_MspInit+0x148>)
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b90:	4b3d      	ldr	r3, [pc, #244]	@ (8000c88 <HAL_ADC_MspInit+0x148>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	4b39      	ldr	r3, [pc, #228]	@ (8000c88 <HAL_ADC_MspInit+0x148>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba4:	4a38      	ldr	r2, [pc, #224]	@ (8000c88 <HAL_ADC_MspInit+0x148>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bac:	4b36      	ldr	r3, [pc, #216]	@ (8000c88 <HAL_ADC_MspInit+0x148>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	4b32      	ldr	r3, [pc, #200]	@ (8000c88 <HAL_ADC_MspInit+0x148>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	4a31      	ldr	r2, [pc, #196]	@ (8000c88 <HAL_ADC_MspInit+0x148>)
 8000bc2:	f043 0302 	orr.w	r3, r3, #2
 8000bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8000c88 <HAL_ADC_MspInit+0x148>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	4829      	ldr	r0, [pc, #164]	@ (8000c8c <HAL_ADC_MspInit+0x14c>)
 8000be8:	f001 fa32 	bl	8002050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bec:	2303      	movs	r3, #3
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4824      	ldr	r0, [pc, #144]	@ (8000c90 <HAL_ADC_MspInit+0x150>)
 8000c00:	f001 fa26 	bl	8002050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c04:	2301      	movs	r3, #1
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	481f      	ldr	r0, [pc, #124]	@ (8000c94 <HAL_ADC_MspInit+0x154>)
 8000c18:	f001 fa1a 	bl	8002050 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <HAL_ADC_MspInit+0x158>)
 8000c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8000c9c <HAL_ADC_MspInit+0x15c>)
 8000c20:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <HAL_ADC_MspInit+0x158>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <HAL_ADC_MspInit+0x158>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <HAL_ADC_MspInit+0x158>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <HAL_ADC_MspInit+0x158>)
 8000c36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c3a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <HAL_ADC_MspInit+0x158>)
 8000c3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c42:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c44:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <HAL_ADC_MspInit+0x158>)
 8000c46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c4a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <HAL_ADC_MspInit+0x158>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <HAL_ADC_MspInit+0x158>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <HAL_ADC_MspInit+0x158>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c5e:	480e      	ldr	r0, [pc, #56]	@ (8000c98 <HAL_ADC_MspInit+0x158>)
 8000c60:	f000 ff0c 	bl	8001a7c <HAL_DMA_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8000c6a:	f7ff ff37 	bl	8000adc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a09      	ldr	r2, [pc, #36]	@ (8000c98 <HAL_ADC_MspInit+0x158>)
 8000c72:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c74:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <HAL_ADC_MspInit+0x158>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c7a:	bf00      	nop
 8000c7c:	3730      	adds	r7, #48	@ 0x30
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40012000 	.word	0x40012000
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40020400 	.word	0x40020400
 8000c98:	20000074 	.word	0x20000074
 8000c9c:	40026410 	.word	0x40026410

08000ca0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d2c <HAL_DAC_MspInit+0x8c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12f      	bne.n	8000d22 <HAL_DAC_MspInit+0x82>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <HAL_DAC_MspInit+0x90>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	4a19      	ldr	r2, [pc, #100]	@ (8000d30 <HAL_DAC_MspInit+0x90>)
 8000ccc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd2:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <HAL_DAC_MspInit+0x90>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <HAL_DAC_MspInit+0x90>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a12      	ldr	r2, [pc, #72]	@ (8000d30 <HAL_DAC_MspInit+0x90>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <HAL_DAC_MspInit+0x90>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4809      	ldr	r0, [pc, #36]	@ (8000d34 <HAL_DAC_MspInit+0x94>)
 8000d0e:	f001 f99f 	bl	8002050 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	210f      	movs	r1, #15
 8000d16:	2036      	movs	r0, #54	@ 0x36
 8000d18:	f000 fda0 	bl	800185c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d1c:	2036      	movs	r0, #54	@ 0x36
 8000d1e:	f000 fdb9 	bl	8001894 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	@ 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40007400 	.word	0x40007400
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000

08000d38 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a19      	ldr	r2, [pc, #100]	@ (8000dbc <HAL_I2C_MspInit+0x84>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d12c      	bne.n	8000db4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b18      	ldr	r3, [pc, #96]	@ (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a17      	ldr	r2, [pc, #92]	@ (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7c:	2312      	movs	r3, #18
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <HAL_I2C_MspInit+0x8c>)
 8000d94:	f001 f95c 	bl	8002050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	4a07      	ldr	r2, [pc, #28]	@ (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000da2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000da6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	@ 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a19      	ldr	r2, [pc, #100]	@ (8000e4c <HAL_SPI_MspInit+0x84>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d12b      	bne.n	8000e42 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	4a17      	ldr	r2, [pc, #92]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000df4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a10      	ldr	r2, [pc, #64]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <HAL_SPI_MspInit+0x88>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e22:	23e0      	movs	r3, #224	@ 0xe0
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e32:	2305      	movs	r3, #5
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <HAL_SPI_MspInit+0x8c>)
 8000e3e:	f001 f907 	bl	8002050 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	@ 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40013000 	.word	0x40013000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000

08000e58 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10d      	bne.n	8000e86 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x40>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	4a09      	ldr	r2, [pc, #36]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x40>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e7a:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <HAL_TIM_PWM_MspInit+0x40>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40000800 	.word	0x40000800
 8000e98:	40023800 	.word	0x40023800

08000e9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a12      	ldr	r2, [pc, #72]	@ (8000f04 <HAL_TIM_MspPostInit+0x68>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d11d      	bne.n	8000efa <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <HAL_TIM_MspPostInit+0x6c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a10      	ldr	r2, [pc, #64]	@ (8000f08 <HAL_TIM_MspPostInit+0x6c>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <HAL_TIM_MspPostInit+0x6c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eda:	2340      	movs	r3, #64	@ 0x40
 8000edc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000eea:	2302      	movs	r3, #2
 8000eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <HAL_TIM_MspPostInit+0x70>)
 8000ef6:	f001 f8ab 	bl	8002050 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40000800 	.word	0x40000800
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020400 	.word	0x40020400

08000f10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	@ 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a19      	ldr	r2, [pc, #100]	@ (8000f94 <HAL_UART_MspInit+0x84>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12b      	bne.n	8000f8a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <HAL_UART_MspInit+0x88>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	4a17      	ldr	r2, [pc, #92]	@ (8000f98 <HAL_UART_MspInit+0x88>)
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f42:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <HAL_UART_MspInit+0x88>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b11      	ldr	r3, [pc, #68]	@ (8000f98 <HAL_UART_MspInit+0x88>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a10      	ldr	r2, [pc, #64]	@ (8000f98 <HAL_UART_MspInit+0x88>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <HAL_UART_MspInit+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f6a:	230c      	movs	r3, #12
 8000f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	2303      	movs	r3, #3
 8000f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <HAL_UART_MspInit+0x8c>)
 8000f86:	f001 f863 	bl	8002050 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	@ 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40004400 	.word	0x40004400
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08e      	sub	sp, #56	@ 0x38
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	4b33      	ldr	r3, [pc, #204]	@ (8001084 <HAL_InitTick+0xe4>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb8:	4a32      	ldr	r2, [pc, #200]	@ (8001084 <HAL_InitTick+0xe4>)
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc0:	4b30      	ldr	r3, [pc, #192]	@ (8001084 <HAL_InitTick+0xe4>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	f003 0310 	and.w	r3, r3, #16
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fcc:	f107 0210 	add.w	r2, r7, #16
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 fc46 	bl	8002868 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d103      	bne.n	8000fee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fe6:	f001 fc17 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 8000fea:	6378      	str	r0, [r7, #52]	@ 0x34
 8000fec:	e004      	b.n	8000ff8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fee:	f001 fc13 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ffa:	4a23      	ldr	r2, [pc, #140]	@ (8001088 <HAL_InitTick+0xe8>)
 8000ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8001000:	0c9b      	lsrs	r3, r3, #18
 8001002:	3b01      	subs	r3, #1
 8001004:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <HAL_InitTick+0xec>)
 8001008:	4a21      	ldr	r2, [pc, #132]	@ (8001090 <HAL_InitTick+0xf0>)
 800100a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <HAL_InitTick+0xec>)
 800100e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001012:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001014:	4a1d      	ldr	r2, [pc, #116]	@ (800108c <HAL_InitTick+0xec>)
 8001016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001018:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <HAL_InitTick+0xec>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <HAL_InitTick+0xec>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001026:	4b19      	ldr	r3, [pc, #100]	@ (800108c <HAL_InitTick+0xec>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800102c:	4817      	ldr	r0, [pc, #92]	@ (800108c <HAL_InitTick+0xec>)
 800102e:	f002 f9a4 	bl	800337a <HAL_TIM_Base_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001038:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800103c:	2b00      	cmp	r3, #0
 800103e:	d11b      	bne.n	8001078 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001040:	4812      	ldr	r0, [pc, #72]	@ (800108c <HAL_InitTick+0xec>)
 8001042:	f002 f9f3 	bl	800342c <HAL_TIM_Base_Start_IT>
 8001046:	4603      	mov	r3, r0
 8001048:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800104c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001050:	2b00      	cmp	r3, #0
 8001052:	d111      	bne.n	8001078 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001054:	2036      	movs	r0, #54	@ 0x36
 8001056:	f000 fc1d 	bl	8001894 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d808      	bhi.n	8001072 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	2036      	movs	r0, #54	@ 0x36
 8001066:	f000 fbf9 	bl	800185c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800106a:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <HAL_InitTick+0xf4>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	e002      	b.n	8001078 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001078:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800107c:	4618      	mov	r0, r3
 800107e:	3738      	adds	r7, #56	@ 0x38
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40023800 	.word	0x40023800
 8001088:	431bde83 	.word	0x431bde83
 800108c:	20000484 	.word	0x20000484
 8001090:	40001000 	.word	0x40001000
 8001094:	20000004 	.word	0x20000004

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <NMI_Handler+0x4>

080010a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <MemManage_Handler+0x4>

080010b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <UsageFault_Handler+0x4>

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <TIM6_DAC_IRQHandler+0x20>)
 80010d6:	791b      	ldrb	r3, [r3, #4]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80010de:	4804      	ldr	r0, [pc, #16]	@ (80010f0 <TIM6_DAC_IRQHandler+0x20>)
 80010e0:	f000 fc08 	bl	80018f4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80010e4:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <TIM6_DAC_IRQHandler+0x24>)
 80010e6:	f002 fa60 	bl	80035aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000d4 	.word	0x200000d4
 80010f4:	20000484 	.word	0x20000484

080010f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010fc:	4802      	ldr	r0, [pc, #8]	@ (8001108 <DMA2_Stream0_IRQHandler+0x10>)
 80010fe:	f000 fd6b 	bl	8001bd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000074 	.word	0x20000074

0800110c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	@ (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001168 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001134:	f7ff ffea 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001138:	480c      	ldr	r0, [pc, #48]	@ (800116c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113a:	490d      	ldr	r1, [pc, #52]	@ (8001170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001150:	4c0a      	ldr	r4, [pc, #40]	@ (800117c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800115e:	f005 ff73 	bl	8007048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff f9eb 	bl	800053c <main>
  bx  lr    
 8001166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001174:	0800713c 	.word	0x0800713c
  ldr r2, =_sbss
 8001178:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800117c:	20004e20 	.word	0x20004e20

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>
	...

08001184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001188:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a0d      	ldr	r2, [pc, #52]	@ (80011c4 <HAL_Init+0x40>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <HAL_Init+0x40>)
 800119a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800119e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	@ (80011c4 <HAL_Init+0x40>)
 80011a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 fb4a 	bl	8001846 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	200f      	movs	r0, #15
 80011b4:	f7ff fef4 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff fc96 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00

080011c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_IncTick+0x20>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_IncTick+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <HAL_IncTick+0x24>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008
 80011ec:	200004cc 	.word	0x200004cc

080011f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return uwTick;
 80011f4:	4b03      	ldr	r3, [pc, #12]	@ (8001204 <HAL_GetTick+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200004cc 	.word	0x200004cc

08001208 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e033      	b.n	8001286 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	2b00      	cmp	r3, #0
 8001224:	d109      	bne.n	800123a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fc8a 	bl	8000b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	2b00      	cmp	r3, #0
 8001244:	d118      	bne.n	8001278 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800124e:	f023 0302 	bic.w	r3, r3, #2
 8001252:	f043 0202 	orr.w	r2, r3, #2
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f94a 	bl	80014f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f023 0303 	bic.w	r3, r3, #3
 800126e:	f043 0201 	orr.w	r2, r3, #1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	641a      	str	r2, [r3, #64]	@ 0x40
 8001276:	e001      	b.n	800127c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d101      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x1c>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e113      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x244>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b09      	cmp	r3, #9
 80012ba:	d925      	bls.n	8001308 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68d9      	ldr	r1, [r3, #12]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	3b1e      	subs	r3, #30
 80012d2:	2207      	movs	r2, #7
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43da      	mvns	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	400a      	ands	r2, r1
 80012e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68d9      	ldr	r1, [r3, #12]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	4603      	mov	r3, r0
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4403      	add	r3, r0
 80012fa:	3b1e      	subs	r3, #30
 80012fc:	409a      	lsls	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	e022      	b.n	800134e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6919      	ldr	r1, [r3, #16]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	2207      	movs	r2, #7
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	400a      	ands	r2, r1
 800132a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6919      	ldr	r1, [r3, #16]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	4603      	mov	r3, r0
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4403      	add	r3, r0
 8001344:	409a      	lsls	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b06      	cmp	r3, #6
 8001354:	d824      	bhi.n	80013a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	3b05      	subs	r3, #5
 8001368:	221f      	movs	r2, #31
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	400a      	ands	r2, r1
 8001376:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	b29b      	uxth	r3, r3
 8001384:	4618      	mov	r0, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	3b05      	subs	r3, #5
 8001392:	fa00 f203 	lsl.w	r2, r0, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	430a      	orrs	r2, r1
 800139c:	635a      	str	r2, [r3, #52]	@ 0x34
 800139e:	e04c      	b.n	800143a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b0c      	cmp	r3, #12
 80013a6:	d824      	bhi.n	80013f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	3b23      	subs	r3, #35	@ 0x23
 80013ba:	221f      	movs	r2, #31
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43da      	mvns	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	400a      	ands	r2, r1
 80013c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	3b23      	subs	r3, #35	@ 0x23
 80013e4:	fa00 f203 	lsl.w	r2, r0, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80013f0:	e023      	b.n	800143a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	3b41      	subs	r3, #65	@ 0x41
 8001404:	221f      	movs	r2, #31
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	400a      	ands	r2, r1
 8001412:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	b29b      	uxth	r3, r3
 8001420:	4618      	mov	r0, r3
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	3b41      	subs	r3, #65	@ 0x41
 800142e:	fa00 f203 	lsl.w	r2, r0, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800143a:	4b29      	ldr	r3, [pc, #164]	@ (80014e0 <HAL_ADC_ConfigChannel+0x250>)
 800143c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a28      	ldr	r2, [pc, #160]	@ (80014e4 <HAL_ADC_ConfigChannel+0x254>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d10f      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x1d8>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b12      	cmp	r3, #18
 800144e:	d10b      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a1d      	ldr	r2, [pc, #116]	@ (80014e4 <HAL_ADC_ConfigChannel+0x254>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d12b      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x23a>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a1c      	ldr	r2, [pc, #112]	@ (80014e8 <HAL_ADC_ConfigChannel+0x258>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d003      	beq.n	8001484 <HAL_ADC_ConfigChannel+0x1f4>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b11      	cmp	r3, #17
 8001482:	d122      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a11      	ldr	r2, [pc, #68]	@ (80014e8 <HAL_ADC_ConfigChannel+0x258>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d111      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014a6:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <HAL_ADC_ConfigChannel+0x25c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a11      	ldr	r2, [pc, #68]	@ (80014f0 <HAL_ADC_ConfigChannel+0x260>)
 80014ac:	fba2 2303 	umull	r2, r3, r2, r3
 80014b0:	0c9a      	lsrs	r2, r3, #18
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014bc:	e002      	b.n	80014c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f9      	bne.n	80014be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40012300 	.word	0x40012300
 80014e4:	40012000 	.word	0x40012000
 80014e8:	10000012 	.word	0x10000012
 80014ec:	20000000 	.word	0x20000000
 80014f0:	431bde83 	.word	0x431bde83

080014f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014fc:	4b79      	ldr	r3, [pc, #484]	@ (80016e4 <ADC_Init+0x1f0>)
 80014fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	431a      	orrs	r2, r3
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001528:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	021a      	lsls	r2, r3, #8
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800154c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6859      	ldr	r1, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800156e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6899      	ldr	r1, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68da      	ldr	r2, [r3, #12]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001586:	4a58      	ldr	r2, [pc, #352]	@ (80016e8 <ADC_Init+0x1f4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d022      	beq.n	80015d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800159a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6899      	ldr	r1, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6899      	ldr	r1, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	e00f      	b.n	80015f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0202 	bic.w	r2, r2, #2
 8001600:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6899      	ldr	r1, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7e1b      	ldrb	r3, [r3, #24]
 800160c:	005a      	lsls	r2, r3, #1
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d01b      	beq.n	8001658 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800162e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800163e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6859      	ldr	r1, [r3, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164a:	3b01      	subs	r3, #1
 800164c:	035a      	lsls	r2, r3, #13
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	e007      	b.n	8001668 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001666:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001676:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	3b01      	subs	r3, #1
 8001684:	051a      	lsls	r2, r3, #20
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800169c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6899      	ldr	r1, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016aa:	025a      	lsls	r2, r3, #9
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6899      	ldr	r1, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	029a      	lsls	r2, r3, #10
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	609a      	str	r2, [r3, #8]
}
 80016d8:	bf00      	nop
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	40012300 	.word	0x40012300
 80016e8:	0f000001 	.word	0x0f000001

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4907      	ldr	r1, [pc, #28]	@ (8001788 <__NVIC_EnableIRQ+0x38>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	@ (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	@ (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	@ 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ff4c 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800186e:	f7ff ff61 	bl	8001734 <__NVIC_GetPriorityGrouping>
 8001872:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	68b9      	ldr	r1, [r7, #8]
 8001878:	6978      	ldr	r0, [r7, #20]
 800187a:	f7ff ffb1 	bl	80017e0 <NVIC_EncodePriority>
 800187e:	4602      	mov	r2, r0
 8001880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff80 	bl	800178c <__NVIC_SetPriority>
}
 800188c:	bf00      	nop
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff54 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e014      	b.n	80018ec <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	791b      	ldrb	r3, [r3, #4]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d105      	bne.n	80018d8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff f9e4 	bl	8000ca0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800190a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d01d      	beq.n	8001952 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d018      	beq.n	8001952 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2204      	movs	r2, #4
 8001924:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f043 0201 	orr.w	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800193a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800194a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f827 	bl	80019a0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d01d      	beq.n	8001998 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d018      	beq.n	8001998 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2204      	movs	r2, #4
 800196a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f043 0202 	orr.w	r2, r3, #2
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001980:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001990:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f867 	bl	8001a66 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	@ 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <HAL_DAC_ConfigChannel+0x1c>
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e042      	b.n	8001a5a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	795b      	ldrb	r3, [r3, #5]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_DAC_ConfigChannel+0x2c>
 80019dc:	2302      	movs	r3, #2
 80019de:	e03c      	b.n	8001a5a <HAL_DAC_ConfigChannel+0xa6>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2202      	movs	r2, #2
 80019ea:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6819      	ldr	r1, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	22c0      	movs	r2, #192	@ 0xc0
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	400a      	ands	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001a58:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	@ 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff fbb2 	bl	80011f0 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e099      	b.n	8001bcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab8:	e00f      	b.n	8001ada <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aba:	f7ff fb99 	bl	80011f0 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b05      	cmp	r3, #5
 8001ac6:	d908      	bls.n	8001ada <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2220      	movs	r2, #32
 8001acc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e078      	b.n	8001bcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1e8      	bne.n	8001aba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	4b38      	ldr	r3, [pc, #224]	@ (8001bd4 <HAL_DMA_Init+0x158>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d107      	bne.n	8001b44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f023 0307 	bic.w	r3, r3, #7
 8001b5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d117      	bne.n	8001b9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00e      	beq.n	8001b9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f9e9 	bl	8001f58 <DMA_CheckFifoParam>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2240      	movs	r2, #64	@ 0x40
 8001b90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e016      	b.n	8001bcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f9a0 	bl	8001eec <DMA_CalcBaseAndBitshift>
 8001bac:	4603      	mov	r3, r0
 8001bae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb4:	223f      	movs	r2, #63	@ 0x3f
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	f010803f 	.word	0xf010803f

08001bd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001be4:	4b8e      	ldr	r3, [pc, #568]	@ (8001e20 <HAL_DMA_IRQHandler+0x248>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a8e      	ldr	r2, [pc, #568]	@ (8001e24 <HAL_DMA_IRQHandler+0x24c>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	0a9b      	lsrs	r3, r3, #10
 8001bf0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c02:	2208      	movs	r2, #8
 8001c04:	409a      	lsls	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d01a      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d013      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0204 	bic.w	r2, r2, #4
 8001c2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c30:	2208      	movs	r2, #8
 8001c32:	409a      	lsls	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c48:	2201      	movs	r2, #1
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d012      	beq.n	8001c7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00b      	beq.n	8001c7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c66:	2201      	movs	r2, #1
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c72:	f043 0202 	orr.w	r2, r3, #2
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7e:	2204      	movs	r2, #4
 8001c80:	409a      	lsls	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d012      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00b      	beq.n	8001cb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca8:	f043 0204 	orr.w	r2, r3, #4
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb4:	2210      	movs	r2, #16
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d043      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d03c      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d018      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d108      	bne.n	8001d08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d024      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	4798      	blx	r3
 8001d06:	e01f      	b.n	8001d48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d01b      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	4798      	blx	r3
 8001d18:	e016      	b.n	8001d48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d107      	bne.n	8001d38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0208 	bic.w	r2, r2, #8
 8001d36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 808f 	beq.w	8001e78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 8087 	beq.w	8001e78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6e:	2220      	movs	r2, #32
 8001d70:	409a      	lsls	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d136      	bne.n	8001df0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0216 	bic.w	r2, r2, #22
 8001d90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001da0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d103      	bne.n	8001db2 <HAL_DMA_IRQHandler+0x1da>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d007      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0208 	bic.w	r2, r2, #8
 8001dc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc6:	223f      	movs	r2, #63	@ 0x3f
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d07e      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	4798      	blx	r3
        }
        return;
 8001dee:	e079      	b.n	8001ee4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01d      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10d      	bne.n	8001e28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d031      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	4798      	blx	r3
 8001e1c:	e02c      	b.n	8001e78 <HAL_DMA_IRQHandler+0x2a0>
 8001e1e:	bf00      	nop
 8001e20:	20000000 	.word	0x20000000
 8001e24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d023      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	4798      	blx	r3
 8001e38:	e01e      	b.n	8001e78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10f      	bne.n	8001e68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0210 	bic.w	r2, r2, #16
 8001e56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d032      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d022      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2205      	movs	r2, #5
 8001e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0201 	bic.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d307      	bcc.n	8001ec0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f2      	bne.n	8001ea4 <HAL_DMA_IRQHandler+0x2cc>
 8001ebe:	e000      	b.n	8001ec2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ec0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4798      	blx	r3
 8001ee2:	e000      	b.n	8001ee6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ee4:	bf00      	nop
    }
  }
}
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	3b10      	subs	r3, #16
 8001efc:	4a14      	ldr	r2, [pc, #80]	@ (8001f50 <DMA_CalcBaseAndBitshift+0x64>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f06:	4a13      	ldr	r2, [pc, #76]	@ (8001f54 <DMA_CalcBaseAndBitshift+0x68>)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d909      	bls.n	8001f2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f22:	f023 0303 	bic.w	r3, r3, #3
 8001f26:	1d1a      	adds	r2, r3, #4
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f2c:	e007      	b.n	8001f3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f36:	f023 0303 	bic.w	r3, r3, #3
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	aaaaaaab 	.word	0xaaaaaaab
 8001f54:	08007124 	.word	0x08007124

08001f58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d11f      	bne.n	8001fb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d856      	bhi.n	8002026 <DMA_CheckFifoParam+0xce>
 8001f78:	a201      	add	r2, pc, #4	@ (adr r2, 8001f80 <DMA_CheckFifoParam+0x28>)
 8001f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7e:	bf00      	nop
 8001f80:	08001f91 	.word	0x08001f91
 8001f84:	08001fa3 	.word	0x08001fa3
 8001f88:	08001f91 	.word	0x08001f91
 8001f8c:	08002027 	.word	0x08002027
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d046      	beq.n	800202a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fa0:	e043      	b.n	800202a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001faa:	d140      	bne.n	800202e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fb0:	e03d      	b.n	800202e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fba:	d121      	bne.n	8002000 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d837      	bhi.n	8002032 <DMA_CheckFifoParam+0xda>
 8001fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc8 <DMA_CheckFifoParam+0x70>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08001fd9 	.word	0x08001fd9
 8001fcc:	08001fdf 	.word	0x08001fdf
 8001fd0:	08001fd9 	.word	0x08001fd9
 8001fd4:	08001ff1 	.word	0x08001ff1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
      break;
 8001fdc:	e030      	b.n	8002040 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d025      	beq.n	8002036 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fee:	e022      	b.n	8002036 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ff8:	d11f      	bne.n	800203a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ffe:	e01c      	b.n	800203a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d903      	bls.n	800200e <DMA_CheckFifoParam+0xb6>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d003      	beq.n	8002014 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800200c:	e018      	b.n	8002040 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
      break;
 8002012:	e015      	b.n	8002040 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002018:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00e      	beq.n	800203e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
      break;
 8002024:	e00b      	b.n	800203e <DMA_CheckFifoParam+0xe6>
      break;
 8002026:	bf00      	nop
 8002028:	e00a      	b.n	8002040 <DMA_CheckFifoParam+0xe8>
      break;
 800202a:	bf00      	nop
 800202c:	e008      	b.n	8002040 <DMA_CheckFifoParam+0xe8>
      break;
 800202e:	bf00      	nop
 8002030:	e006      	b.n	8002040 <DMA_CheckFifoParam+0xe8>
      break;
 8002032:	bf00      	nop
 8002034:	e004      	b.n	8002040 <DMA_CheckFifoParam+0xe8>
      break;
 8002036:	bf00      	nop
 8002038:	e002      	b.n	8002040 <DMA_CheckFifoParam+0xe8>
      break;   
 800203a:	bf00      	nop
 800203c:	e000      	b.n	8002040 <DMA_CheckFifoParam+0xe8>
      break;
 800203e:	bf00      	nop
    }
  } 
  
  return status; 
 8002040:	7bfb      	ldrb	r3, [r7, #15]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop

08002050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	@ 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	e165      	b.n	8002338 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	429a      	cmp	r2, r3
 8002086:	f040 8154 	bne.w	8002332 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b01      	cmp	r3, #1
 8002094:	d005      	beq.n	80020a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d130      	bne.n	8002104 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d8:	2201      	movs	r2, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 0201 	and.w	r2, r3, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b03      	cmp	r3, #3
 800210e:	d017      	beq.n	8002140 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d123      	bne.n	8002194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	08da      	lsrs	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3208      	adds	r2, #8
 8002154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	220f      	movs	r2, #15
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	08da      	lsrs	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3208      	adds	r2, #8
 800218e:	69b9      	ldr	r1, [r7, #24]
 8002190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0203 	and.w	r2, r3, #3
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80ae 	beq.w	8002332 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b5d      	ldr	r3, [pc, #372]	@ (8002350 <HAL_GPIO_Init+0x300>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	4a5c      	ldr	r2, [pc, #368]	@ (8002350 <HAL_GPIO_Init+0x300>)
 80021e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80021e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002350 <HAL_GPIO_Init+0x300>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021f2:	4a58      	ldr	r2, [pc, #352]	@ (8002354 <HAL_GPIO_Init+0x304>)
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	089b      	lsrs	r3, r3, #2
 80021f8:	3302      	adds	r3, #2
 80021fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	220f      	movs	r2, #15
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4f      	ldr	r2, [pc, #316]	@ (8002358 <HAL_GPIO_Init+0x308>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d025      	beq.n	800226a <HAL_GPIO_Init+0x21a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4e      	ldr	r2, [pc, #312]	@ (800235c <HAL_GPIO_Init+0x30c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01f      	beq.n	8002266 <HAL_GPIO_Init+0x216>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4d      	ldr	r2, [pc, #308]	@ (8002360 <HAL_GPIO_Init+0x310>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d019      	beq.n	8002262 <HAL_GPIO_Init+0x212>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4c      	ldr	r2, [pc, #304]	@ (8002364 <HAL_GPIO_Init+0x314>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_GPIO_Init+0x20e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4b      	ldr	r2, [pc, #300]	@ (8002368 <HAL_GPIO_Init+0x318>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00d      	beq.n	800225a <HAL_GPIO_Init+0x20a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4a      	ldr	r2, [pc, #296]	@ (800236c <HAL_GPIO_Init+0x31c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x206>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a49      	ldr	r2, [pc, #292]	@ (8002370 <HAL_GPIO_Init+0x320>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_GPIO_Init+0x202>
 800224e:	2306      	movs	r3, #6
 8002250:	e00c      	b.n	800226c <HAL_GPIO_Init+0x21c>
 8002252:	2307      	movs	r3, #7
 8002254:	e00a      	b.n	800226c <HAL_GPIO_Init+0x21c>
 8002256:	2305      	movs	r3, #5
 8002258:	e008      	b.n	800226c <HAL_GPIO_Init+0x21c>
 800225a:	2304      	movs	r3, #4
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x21c>
 800225e:	2303      	movs	r3, #3
 8002260:	e004      	b.n	800226c <HAL_GPIO_Init+0x21c>
 8002262:	2302      	movs	r3, #2
 8002264:	e002      	b.n	800226c <HAL_GPIO_Init+0x21c>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_GPIO_Init+0x21c>
 800226a:	2300      	movs	r3, #0
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	f002 0203 	and.w	r2, r2, #3
 8002272:	0092      	lsls	r2, r2, #2
 8002274:	4093      	lsls	r3, r2
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800227c:	4935      	ldr	r1, [pc, #212]	@ (8002354 <HAL_GPIO_Init+0x304>)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	3302      	adds	r3, #2
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800228a:	4b3a      	ldr	r3, [pc, #232]	@ (8002374 <HAL_GPIO_Init+0x324>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ae:	4a31      	ldr	r2, [pc, #196]	@ (8002374 <HAL_GPIO_Init+0x324>)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002374 <HAL_GPIO_Init+0x324>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d8:	4a26      	ldr	r2, [pc, #152]	@ (8002374 <HAL_GPIO_Init+0x324>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022de:	4b25      	ldr	r3, [pc, #148]	@ (8002374 <HAL_GPIO_Init+0x324>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002302:	4a1c      	ldr	r2, [pc, #112]	@ (8002374 <HAL_GPIO_Init+0x324>)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002308:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <HAL_GPIO_Init+0x324>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800232c:	4a11      	ldr	r2, [pc, #68]	@ (8002374 <HAL_GPIO_Init+0x324>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3301      	adds	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b0f      	cmp	r3, #15
 800233c:	f67f ae96 	bls.w	800206c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3724      	adds	r7, #36	@ 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
 8002354:	40013800 	.word	0x40013800
 8002358:	40020000 	.word	0x40020000
 800235c:	40020400 	.word	0x40020400
 8002360:	40020800 	.word	0x40020800
 8002364:	40020c00 	.word	0x40020c00
 8002368:	40021000 	.word	0x40021000
 800236c:	40021400 	.word	0x40021400
 8002370:	40021800 	.word	0x40021800
 8002374:	40013c00 	.word	0x40013c00

08002378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	807b      	strh	r3, [r7, #2]
 8002384:	4613      	mov	r3, r2
 8002386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002388:	787b      	ldrb	r3, [r7, #1]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238e:	887a      	ldrh	r2, [r7, #2]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002394:	e003      	b.n	800239e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002396:	887b      	ldrh	r3, [r7, #2]
 8002398:	041a      	lsls	r2, r3, #16
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	619a      	str	r2, [r3, #24]
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e12b      	b.n	8002616 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe fcb0 	bl	8000d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2224      	movs	r2, #36	@ 0x24
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800240e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002410:	f000 fa02 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 8002414:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4a81      	ldr	r2, [pc, #516]	@ (8002620 <HAL_I2C_Init+0x274>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d807      	bhi.n	8002430 <HAL_I2C_Init+0x84>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a80      	ldr	r2, [pc, #512]	@ (8002624 <HAL_I2C_Init+0x278>)
 8002424:	4293      	cmp	r3, r2
 8002426:	bf94      	ite	ls
 8002428:	2301      	movls	r3, #1
 800242a:	2300      	movhi	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	e006      	b.n	800243e <HAL_I2C_Init+0x92>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4a7d      	ldr	r2, [pc, #500]	@ (8002628 <HAL_I2C_Init+0x27c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	bf94      	ite	ls
 8002438:	2301      	movls	r3, #1
 800243a:	2300      	movhi	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0e7      	b.n	8002616 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4a78      	ldr	r2, [pc, #480]	@ (800262c <HAL_I2C_Init+0x280>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0c9b      	lsrs	r3, r3, #18
 8002450:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a6a      	ldr	r2, [pc, #424]	@ (8002620 <HAL_I2C_Init+0x274>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d802      	bhi.n	8002480 <HAL_I2C_Init+0xd4>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	3301      	adds	r3, #1
 800247e:	e009      	b.n	8002494 <HAL_I2C_Init+0xe8>
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	4a69      	ldr	r2, [pc, #420]	@ (8002630 <HAL_I2C_Init+0x284>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	099b      	lsrs	r3, r3, #6
 8002492:	3301      	adds	r3, #1
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	430b      	orrs	r3, r1
 800249a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	495c      	ldr	r1, [pc, #368]	@ (8002620 <HAL_I2C_Init+0x274>)
 80024b0:	428b      	cmp	r3, r1
 80024b2:	d819      	bhi.n	80024e8 <HAL_I2C_Init+0x13c>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1e59      	subs	r1, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c2:	1c59      	adds	r1, r3, #1
 80024c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024c8:	400b      	ands	r3, r1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_I2C_Init+0x138>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1e59      	subs	r1, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024dc:	3301      	adds	r3, #1
 80024de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e2:	e051      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 80024e4:	2304      	movs	r3, #4
 80024e6:	e04f      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d111      	bne.n	8002514 <HAL_I2C_Init+0x168>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e58      	subs	r0, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	440b      	add	r3, r1
 80024fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002502:	3301      	adds	r3, #1
 8002504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e012      	b.n	800253a <HAL_I2C_Init+0x18e>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1e58      	subs	r0, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	0099      	lsls	r1, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	fbb0 f3f3 	udiv	r3, r0, r3
 800252a:	3301      	adds	r3, #1
 800252c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Init+0x196>
 800253e:	2301      	movs	r3, #1
 8002540:	e022      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10e      	bne.n	8002568 <HAL_I2C_Init+0x1bc>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1e58      	subs	r0, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	440b      	add	r3, r1
 8002558:	fbb0 f3f3 	udiv	r3, r0, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002566:	e00f      	b.n	8002588 <HAL_I2C_Init+0x1dc>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1e58      	subs	r0, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	0099      	lsls	r1, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	fbb0 f3f3 	udiv	r3, r0, r3
 800257e:	3301      	adds	r3, #1
 8002580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002584:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	6809      	ldr	r1, [r1, #0]
 800258c:	4313      	orrs	r3, r2
 800258e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6911      	ldr	r1, [r2, #16]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68d2      	ldr	r2, [r2, #12]
 80025c2:	4311      	orrs	r1, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	000186a0 	.word	0x000186a0
 8002624:	001e847f 	.word	0x001e847f
 8002628:	003d08ff 	.word	0x003d08ff
 800262c:	431bde83 	.word	0x431bde83
 8002630:	10624dd3 	.word	0x10624dd3

08002634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0cc      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002648:	4b68      	ldr	r3, [pc, #416]	@ (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d90c      	bls.n	8002670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b65      	ldr	r3, [pc, #404]	@ (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b63      	ldr	r3, [pc, #396]	@ (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0b8      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002688:	4b59      	ldr	r3, [pc, #356]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a58      	ldr	r2, [pc, #352]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002692:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a0:	4b53      	ldr	r3, [pc, #332]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4a52      	ldr	r2, [pc, #328]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ac:	4b50      	ldr	r3, [pc, #320]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	494d      	ldr	r1, [pc, #308]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d044      	beq.n	8002754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b47      	ldr	r3, [pc, #284]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d119      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e07f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d003      	beq.n	80026f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	4b3f      	ldr	r3, [pc, #252]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e06f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002702:	4b3b      	ldr	r3, [pc, #236]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e067      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002712:	4b37      	ldr	r3, [pc, #220]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f023 0203 	bic.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4934      	ldr	r1, [pc, #208]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	4313      	orrs	r3, r2
 8002722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002724:	f7fe fd64 	bl	80011f0 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	e00a      	b.n	8002742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272c:	f7fe fd60 	bl	80011f0 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e04f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	4b2b      	ldr	r3, [pc, #172]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 020c 	and.w	r2, r3, #12
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	429a      	cmp	r2, r3
 8002752:	d1eb      	bne.n	800272c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002754:	4b25      	ldr	r3, [pc, #148]	@ (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d20c      	bcs.n	800277c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b22      	ldr	r3, [pc, #136]	@ (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b20      	ldr	r3, [pc, #128]	@ (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e032      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002788:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4916      	ldr	r1, [pc, #88]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027a6:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	490e      	ldr	r1, [pc, #56]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ba:	f000 f887 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 80027be:	4602      	mov	r2, r0
 80027c0:	4b0b      	ldr	r3, [pc, #44]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	490a      	ldr	r1, [pc, #40]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 80027cc:	5ccb      	ldrb	r3, [r1, r3]
 80027ce:	fa22 f303 	lsr.w	r3, r2, r3
 80027d2:	4a09      	ldr	r2, [pc, #36]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027d6:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fbe0 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00
 80027f0:	40023800 	.word	0x40023800
 80027f4:	0800710c 	.word	0x0800710c
 80027f8:	20000000 	.word	0x20000000
 80027fc:	20000004 	.word	0x20000004

08002800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002804:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <HAL_RCC_GetHCLKFreq+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20000000 	.word	0x20000000

08002818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800281c:	f7ff fff0 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	0a9b      	lsrs	r3, r3, #10
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	4903      	ldr	r1, [pc, #12]	@ (800283c <HAL_RCC_GetPCLK1Freq+0x24>)
 800282e:	5ccb      	ldrb	r3, [r1, r3]
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40023800 	.word	0x40023800
 800283c:	0800711c 	.word	0x0800711c

08002840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002844:	f7ff ffdc 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	@ (8002860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0b5b      	lsrs	r3, r3, #13
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4903      	ldr	r1, [pc, #12]	@ (8002864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	0800711c 	.word	0x0800711c

08002868 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	220f      	movs	r2, #15
 8002876:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002878:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002884:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002890:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800289c:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	08db      	lsrs	r3, r3, #3
 80028a2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028aa:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <HAL_RCC_GetClockConfig+0x60>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 020f 	and.w	r2, r3, #15
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	601a      	str	r2, [r3, #0]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40023c00 	.word	0x40023c00

080028cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d0:	b0ae      	sub	sp, #184	@ 0xb8
 80028d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f2:	4bcb      	ldr	r3, [pc, #812]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	f200 8206 	bhi.w	8002d0c <HAL_RCC_GetSysClockFreq+0x440>
 8002900:	a201      	add	r2, pc, #4	@ (adr r2, 8002908 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	0800293d 	.word	0x0800293d
 800290c:	08002d0d 	.word	0x08002d0d
 8002910:	08002d0d 	.word	0x08002d0d
 8002914:	08002d0d 	.word	0x08002d0d
 8002918:	08002945 	.word	0x08002945
 800291c:	08002d0d 	.word	0x08002d0d
 8002920:	08002d0d 	.word	0x08002d0d
 8002924:	08002d0d 	.word	0x08002d0d
 8002928:	0800294d 	.word	0x0800294d
 800292c:	08002d0d 	.word	0x08002d0d
 8002930:	08002d0d 	.word	0x08002d0d
 8002934:	08002d0d 	.word	0x08002d0d
 8002938:	08002b3d 	.word	0x08002b3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800293c:	4bb9      	ldr	r3, [pc, #740]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x358>)
 800293e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002942:	e1e7      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002944:	4bb8      	ldr	r3, [pc, #736]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002946:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800294a:	e1e3      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800294c:	4bb4      	ldr	r3, [pc, #720]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002954:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002958:	4bb1      	ldr	r3, [pc, #708]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d071      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002964:	4bae      	ldr	r3, [pc, #696]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	099b      	lsrs	r3, r3, #6
 800296a:	2200      	movs	r2, #0
 800296c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002970:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002974:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800297c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002980:	2300      	movs	r3, #0
 8002982:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002986:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800298a:	4622      	mov	r2, r4
 800298c:	462b      	mov	r3, r5
 800298e:	f04f 0000 	mov.w	r0, #0
 8002992:	f04f 0100 	mov.w	r1, #0
 8002996:	0159      	lsls	r1, r3, #5
 8002998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800299c:	0150      	lsls	r0, r2, #5
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4621      	mov	r1, r4
 80029a4:	1a51      	subs	r1, r2, r1
 80029a6:	6439      	str	r1, [r7, #64]	@ 0x40
 80029a8:	4629      	mov	r1, r5
 80029aa:	eb63 0301 	sbc.w	r3, r3, r1
 80029ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80029bc:	4649      	mov	r1, r9
 80029be:	018b      	lsls	r3, r1, #6
 80029c0:	4641      	mov	r1, r8
 80029c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029c6:	4641      	mov	r1, r8
 80029c8:	018a      	lsls	r2, r1, #6
 80029ca:	4641      	mov	r1, r8
 80029cc:	1a51      	subs	r1, r2, r1
 80029ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029d0:	4649      	mov	r1, r9
 80029d2:	eb63 0301 	sbc.w	r3, r3, r1
 80029d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80029e4:	4649      	mov	r1, r9
 80029e6:	00cb      	lsls	r3, r1, #3
 80029e8:	4641      	mov	r1, r8
 80029ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ee:	4641      	mov	r1, r8
 80029f0:	00ca      	lsls	r2, r1, #3
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	4622      	mov	r2, r4
 80029fa:	189b      	adds	r3, r3, r2
 80029fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80029fe:	462b      	mov	r3, r5
 8002a00:	460a      	mov	r2, r1
 8002a02:	eb42 0303 	adc.w	r3, r2, r3
 8002a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a14:	4629      	mov	r1, r5
 8002a16:	024b      	lsls	r3, r1, #9
 8002a18:	4621      	mov	r1, r4
 8002a1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a1e:	4621      	mov	r1, r4
 8002a20:	024a      	lsls	r2, r1, #9
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a38:	f7fd fbea 	bl	8000210 <__aeabi_uldivmod>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4613      	mov	r3, r2
 8002a42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a46:	e067      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a48:	4b75      	ldr	r3, [pc, #468]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a54:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a62:	2300      	movs	r3, #0
 8002a64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a66:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	462b      	mov	r3, r5
 8002a6e:	f04f 0000 	mov.w	r0, #0
 8002a72:	f04f 0100 	mov.w	r1, #0
 8002a76:	0159      	lsls	r1, r3, #5
 8002a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a7c:	0150      	lsls	r0, r2, #5
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4621      	mov	r1, r4
 8002a84:	1a51      	subs	r1, r2, r1
 8002a86:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002a88:	4629      	mov	r1, r5
 8002a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002a9c:	4649      	mov	r1, r9
 8002a9e:	018b      	lsls	r3, r1, #6
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aa6:	4641      	mov	r1, r8
 8002aa8:	018a      	lsls	r2, r1, #6
 8002aaa:	4641      	mov	r1, r8
 8002aac:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ab0:	4649      	mov	r1, r9
 8002ab2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ac2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ac6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aca:	4692      	mov	sl, r2
 8002acc:	469b      	mov	fp, r3
 8002ace:	4623      	mov	r3, r4
 8002ad0:	eb1a 0303 	adds.w	r3, sl, r3
 8002ad4:	623b      	str	r3, [r7, #32]
 8002ad6:	462b      	mov	r3, r5
 8002ad8:	eb4b 0303 	adc.w	r3, fp, r3
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002aea:	4629      	mov	r1, r5
 8002aec:	028b      	lsls	r3, r1, #10
 8002aee:	4621      	mov	r1, r4
 8002af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002af4:	4621      	mov	r1, r4
 8002af6:	028a      	lsls	r2, r1, #10
 8002af8:	4610      	mov	r0, r2
 8002afa:	4619      	mov	r1, r3
 8002afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b00:	2200      	movs	r2, #0
 8002b02:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b04:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b0a:	f7fd fb81 	bl	8000210 <__aeabi_uldivmod>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4613      	mov	r3, r2
 8002b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b18:	4b41      	ldr	r3, [pc, #260]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	3301      	adds	r3, #1
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002b2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b3a:	e0eb      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b3c:	4b38      	ldr	r3, [pc, #224]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b48:	4b35      	ldr	r3, [pc, #212]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d06b      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b54:	4b32      	ldr	r3, [pc, #200]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b66:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b68:	2300      	movs	r3, #0
 8002b6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002b70:	4622      	mov	r2, r4
 8002b72:	462b      	mov	r3, r5
 8002b74:	f04f 0000 	mov.w	r0, #0
 8002b78:	f04f 0100 	mov.w	r1, #0
 8002b7c:	0159      	lsls	r1, r3, #5
 8002b7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b82:	0150      	lsls	r0, r2, #5
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4621      	mov	r1, r4
 8002b8a:	1a51      	subs	r1, r2, r1
 8002b8c:	61b9      	str	r1, [r7, #24]
 8002b8e:	4629      	mov	r1, r5
 8002b90:	eb63 0301 	sbc.w	r3, r3, r1
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ba2:	4659      	mov	r1, fp
 8002ba4:	018b      	lsls	r3, r1, #6
 8002ba6:	4651      	mov	r1, sl
 8002ba8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bac:	4651      	mov	r1, sl
 8002bae:	018a      	lsls	r2, r1, #6
 8002bb0:	4651      	mov	r1, sl
 8002bb2:	ebb2 0801 	subs.w	r8, r2, r1
 8002bb6:	4659      	mov	r1, fp
 8002bb8:	eb63 0901 	sbc.w	r9, r3, r1
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bcc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bd0:	4690      	mov	r8, r2
 8002bd2:	4699      	mov	r9, r3
 8002bd4:	4623      	mov	r3, r4
 8002bd6:	eb18 0303 	adds.w	r3, r8, r3
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	462b      	mov	r3, r5
 8002bde:	eb49 0303 	adc.w	r3, r9, r3
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	024b      	lsls	r3, r1, #9
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	024a      	lsls	r2, r1, #9
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c06:	2200      	movs	r2, #0
 8002c08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c0a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002c0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c10:	f7fd fafe 	bl	8000210 <__aeabi_uldivmod>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4613      	mov	r3, r2
 8002c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c1e:	e065      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x420>
 8002c20:	40023800 	.word	0x40023800
 8002c24:	00f42400 	.word	0x00f42400
 8002c28:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	2200      	movs	r2, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	4611      	mov	r1, r2
 8002c38:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c3e:	2300      	movs	r3, #0
 8002c40:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c42:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002c46:	4642      	mov	r2, r8
 8002c48:	464b      	mov	r3, r9
 8002c4a:	f04f 0000 	mov.w	r0, #0
 8002c4e:	f04f 0100 	mov.w	r1, #0
 8002c52:	0159      	lsls	r1, r3, #5
 8002c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c58:	0150      	lsls	r0, r2, #5
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4641      	mov	r1, r8
 8002c60:	1a51      	subs	r1, r2, r1
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	4649      	mov	r1, r9
 8002c66:	eb63 0301 	sbc.w	r3, r3, r1
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002c78:	4659      	mov	r1, fp
 8002c7a:	018b      	lsls	r3, r1, #6
 8002c7c:	4651      	mov	r1, sl
 8002c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c82:	4651      	mov	r1, sl
 8002c84:	018a      	lsls	r2, r1, #6
 8002c86:	4651      	mov	r1, sl
 8002c88:	1a54      	subs	r4, r2, r1
 8002c8a:	4659      	mov	r1, fp
 8002c8c:	eb63 0501 	sbc.w	r5, r3, r1
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	00eb      	lsls	r3, r5, #3
 8002c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c9e:	00e2      	lsls	r2, r4, #3
 8002ca0:	4614      	mov	r4, r2
 8002ca2:	461d      	mov	r5, r3
 8002ca4:	4643      	mov	r3, r8
 8002ca6:	18e3      	adds	r3, r4, r3
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	464b      	mov	r3, r9
 8002cac:	eb45 0303 	adc.w	r3, r5, r3
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	028b      	lsls	r3, r1, #10
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc8:	4621      	mov	r1, r4
 8002cca:	028a      	lsls	r2, r1, #10
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cd8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002cda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002cde:	f7fd fa97 	bl	8000210 <__aeabi_uldivmod>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002cec:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x458>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	0f1b      	lsrs	r3, r3, #28
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002cfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d0a:	e003      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	37b8      	adds	r7, #184	@ 0xb8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	00f42400 	.word	0x00f42400

08002d2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e28d      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8083 	beq.w	8002e52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d4c:	4b94      	ldr	r3, [pc, #592]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d019      	beq.n	8002d8c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d58:	4b91      	ldr	r3, [pc, #580]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d64:	4b8e      	ldr	r3, [pc, #568]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d70:	d00c      	beq.n	8002d8c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d72:	4b8b      	ldr	r3, [pc, #556]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d7a:	2b0c      	cmp	r3, #12
 8002d7c:	d112      	bne.n	8002da4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7e:	4b88      	ldr	r3, [pc, #544]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d8a:	d10b      	bne.n	8002da4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	4b84      	ldr	r3, [pc, #528]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d05b      	beq.n	8002e50 <HAL_RCC_OscConfig+0x124>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d157      	bne.n	8002e50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e25a      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dac:	d106      	bne.n	8002dbc <HAL_RCC_OscConfig+0x90>
 8002dae:	4b7c      	ldr	r3, [pc, #496]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a7b      	ldr	r2, [pc, #492]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e01d      	b.n	8002df8 <HAL_RCC_OscConfig+0xcc>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0xb4>
 8002dc6:	4b76      	ldr	r3, [pc, #472]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a75      	ldr	r2, [pc, #468]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	4b73      	ldr	r3, [pc, #460]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a72      	ldr	r2, [pc, #456]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e00b      	b.n	8002df8 <HAL_RCC_OscConfig+0xcc>
 8002de0:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a6e      	ldr	r2, [pc, #440]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002de6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	4b6c      	ldr	r3, [pc, #432]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a6b      	ldr	r2, [pc, #428]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002df2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d013      	beq.n	8002e28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe f9f6 	bl	80011f0 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fe f9f2 	bl	80011f0 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	@ 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e21f      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	4b61      	ldr	r3, [pc, #388]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0xdc>
 8002e26:	e014      	b.n	8002e52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe f9e2 	bl	80011f0 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e30:	f7fe f9de 	bl	80011f0 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	@ 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e20b      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	4b57      	ldr	r3, [pc, #348]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x104>
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d06f      	beq.n	8002f3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e5e:	4b50      	ldr	r3, [pc, #320]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d017      	beq.n	8002e9a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e6a:	4b4d      	ldr	r3, [pc, #308]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d105      	bne.n	8002e82 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e76:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00b      	beq.n	8002e9a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e82:	4b47      	ldr	r3, [pc, #284]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d11c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8e:	4b44      	ldr	r3, [pc, #272]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d116      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9a:	4b41      	ldr	r3, [pc, #260]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x186>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e1d3      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4937      	ldr	r1, [pc, #220]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec6:	e03a      	b.n	8002f3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d020      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed0:	4b34      	ldr	r3, [pc, #208]	@ (8002fa4 <HAL_RCC_OscConfig+0x278>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed6:	f7fe f98b 	bl	80011f0 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ede:	f7fe f987 	bl	80011f0 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e1b4      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efc:	4b28      	ldr	r3, [pc, #160]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4925      	ldr	r1, [pc, #148]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
 8002f10:	e015      	b.n	8002f3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f12:	4b24      	ldr	r3, [pc, #144]	@ (8002fa4 <HAL_RCC_OscConfig+0x278>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe f96a 	bl	80011f0 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f20:	f7fe f966 	bl	80011f0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e193      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f32:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d036      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d016      	beq.n	8002f80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f52:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fe f94a 	bl	80011f0 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f60:	f7fe f946 	bl	80011f0 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e173      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x234>
 8002f7e:	e01b      	b.n	8002fb8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f80:	4b09      	ldr	r3, [pc, #36]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f86:	f7fe f933 	bl	80011f0 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8c:	e00e      	b.n	8002fac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8e:	f7fe f92f 	bl	80011f0 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d907      	bls.n	8002fac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e15c      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	42470000 	.word	0x42470000
 8002fa8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fac:	4b8a      	ldr	r3, [pc, #552]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8002fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ea      	bne.n	8002f8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8097 	beq.w	80030f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fca:	4b83      	ldr	r3, [pc, #524]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	4b7f      	ldr	r3, [pc, #508]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	4a7e      	ldr	r2, [pc, #504]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8002fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff6:	4b79      	ldr	r3, [pc, #484]	@ (80031dc <HAL_RCC_OscConfig+0x4b0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d118      	bne.n	8003034 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003002:	4b76      	ldr	r3, [pc, #472]	@ (80031dc <HAL_RCC_OscConfig+0x4b0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a75      	ldr	r2, [pc, #468]	@ (80031dc <HAL_RCC_OscConfig+0x4b0>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300e:	f7fe f8ef 	bl	80011f0 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003016:	f7fe f8eb 	bl	80011f0 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e118      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	4b6c      	ldr	r3, [pc, #432]	@ (80031dc <HAL_RCC_OscConfig+0x4b0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d106      	bne.n	800304a <HAL_RCC_OscConfig+0x31e>
 800303c:	4b66      	ldr	r3, [pc, #408]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003040:	4a65      	ldr	r2, [pc, #404]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6713      	str	r3, [r2, #112]	@ 0x70
 8003048:	e01c      	b.n	8003084 <HAL_RCC_OscConfig+0x358>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b05      	cmp	r3, #5
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x340>
 8003052:	4b61      	ldr	r3, [pc, #388]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003056:	4a60      	ldr	r2, [pc, #384]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	6713      	str	r3, [r2, #112]	@ 0x70
 800305e:	4b5e      	ldr	r3, [pc, #376]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003062:	4a5d      	ldr	r2, [pc, #372]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6713      	str	r3, [r2, #112]	@ 0x70
 800306a:	e00b      	b.n	8003084 <HAL_RCC_OscConfig+0x358>
 800306c:	4b5a      	ldr	r3, [pc, #360]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003070:	4a59      	ldr	r2, [pc, #356]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	6713      	str	r3, [r2, #112]	@ 0x70
 8003078:	4b57      	ldr	r3, [pc, #348]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307c:	4a56      	ldr	r2, [pc, #344]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d015      	beq.n	80030b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308c:	f7fe f8b0 	bl	80011f0 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003092:	e00a      	b.n	80030aa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003094:	f7fe f8ac 	bl	80011f0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e0d7      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	4b4b      	ldr	r3, [pc, #300]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ee      	beq.n	8003094 <HAL_RCC_OscConfig+0x368>
 80030b6:	e014      	b.n	80030e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b8:	f7fe f89a 	bl	80011f0 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c0:	f7fe f896 	bl	80011f0 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e0c1      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d6:	4b40      	ldr	r3, [pc, #256]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1ee      	bne.n	80030c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e8:	4b3b      	ldr	r3, [pc, #236]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	4a3a      	ldr	r2, [pc, #232]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 80030ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80ad 	beq.w	8003258 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030fe:	4b36      	ldr	r3, [pc, #216]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b08      	cmp	r3, #8
 8003108:	d060      	beq.n	80031cc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d145      	bne.n	800319e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003112:	4b33      	ldr	r3, [pc, #204]	@ (80031e0 <HAL_RCC_OscConfig+0x4b4>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe f86a 	bl	80011f0 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe f866 	bl	80011f0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e093      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	4b29      	ldr	r3, [pc, #164]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69da      	ldr	r2, [r3, #28]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	019b      	lsls	r3, r3, #6
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	3b01      	subs	r3, #1
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003160:	061b      	lsls	r3, r3, #24
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003168:	071b      	lsls	r3, r3, #28
 800316a:	491b      	ldr	r1, [pc, #108]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003170:	4b1b      	ldr	r3, [pc, #108]	@ (80031e0 <HAL_RCC_OscConfig+0x4b4>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003176:	f7fe f83b 	bl	80011f0 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317e:	f7fe f837 	bl	80011f0 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e064      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003190:	4b11      	ldr	r3, [pc, #68]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x452>
 800319c:	e05c      	b.n	8003258 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b10      	ldr	r3, [pc, #64]	@ (80031e0 <HAL_RCC_OscConfig+0x4b4>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe f824 	bl	80011f0 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fe f820 	bl	80011f0 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e04d      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031be:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x480>
 80031ca:	e045      	b.n	8003258 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e040      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40007000 	.word	0x40007000
 80031e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003264 <HAL_RCC_OscConfig+0x538>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d030      	beq.n	8003254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d129      	bne.n	8003254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d122      	bne.n	8003254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800321a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800321c:	4293      	cmp	r3, r2
 800321e:	d119      	bne.n	8003254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	3b01      	subs	r3, #1
 800322e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d10f      	bne.n	8003254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d107      	bne.n	8003254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800

08003268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e07b      	b.n	8003372 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	2b00      	cmp	r3, #0
 8003280:	d108      	bne.n	8003294 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800328a:	d009      	beq.n	80032a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	61da      	str	r2, [r3, #28]
 8003292:	e005      	b.n	80032a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7fd fd84 	bl	8000dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003324:	ea42 0103 	orr.w	r1, r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	f003 0104 	and.w	r1, r3, #4
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	f003 0210 	and.w	r2, r3, #16
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003360:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e041      	b.n	8003410 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d106      	bne.n	80033a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f839 	bl	8003418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3304      	adds	r3, #4
 80033b6:	4619      	mov	r1, r3
 80033b8:	4610      	mov	r0, r2
 80033ba:	f000 fad1 	bl	8003960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d001      	beq.n	8003444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e04e      	b.n	80034e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a23      	ldr	r2, [pc, #140]	@ (80034f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d022      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x80>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800346e:	d01d      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x80>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a1f      	ldr	r2, [pc, #124]	@ (80034f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d018      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x80>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a1e      	ldr	r2, [pc, #120]	@ (80034f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d013      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x80>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1c      	ldr	r2, [pc, #112]	@ (80034fc <HAL_TIM_Base_Start_IT+0xd0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00e      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x80>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1b      	ldr	r2, [pc, #108]	@ (8003500 <HAL_TIM_Base_Start_IT+0xd4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d009      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x80>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a19      	ldr	r2, [pc, #100]	@ (8003504 <HAL_TIM_Base_Start_IT+0xd8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d004      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x80>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a18      	ldr	r2, [pc, #96]	@ (8003508 <HAL_TIM_Base_Start_IT+0xdc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d111      	bne.n	80034d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d010      	beq.n	80034e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0201 	orr.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ce:	e007      	b.n	80034e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40010000 	.word	0x40010000
 80034f4:	40000400 	.word	0x40000400
 80034f8:	40000800 	.word	0x40000800
 80034fc:	40000c00 	.word	0x40000c00
 8003500:	40010400 	.word	0x40010400
 8003504:	40014000 	.word	0x40014000
 8003508:	40001800 	.word	0x40001800

0800350c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e041      	b.n	80035a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fd fc90 	bl	8000e58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2202      	movs	r2, #2
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3304      	adds	r3, #4
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f000 fa08 	bl	8003960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d020      	beq.n	800360e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01b      	beq.n	800360e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f06f 0202 	mvn.w	r2, #2
 80035de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f995 	bl	8003924 <HAL_TIM_IC_CaptureCallback>
 80035fa:	e005      	b.n	8003608 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f987 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f998 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d020      	beq.n	800365a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d01b      	beq.n	800365a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f06f 0204 	mvn.w	r2, #4
 800362a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f96f 	bl	8003924 <HAL_TIM_IC_CaptureCallback>
 8003646:	e005      	b.n	8003654 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f961 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f972 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d01b      	beq.n	80036a6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f06f 0208 	mvn.w	r2, #8
 8003676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2204      	movs	r2, #4
 800367c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f949 	bl	8003924 <HAL_TIM_IC_CaptureCallback>
 8003692:	e005      	b.n	80036a0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f93b 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f94c 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d020      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d01b      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f06f 0210 	mvn.w	r2, #16
 80036c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2208      	movs	r2, #8
 80036c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f923 	bl	8003924 <HAL_TIM_IC_CaptureCallback>
 80036de:	e005      	b.n	80036ec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f915 	bl	8003910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f926 	bl	8003938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00c      	beq.n	8003716 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f06f 0201 	mvn.w	r2, #1
 800370e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7fd f9d1 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00c      	beq.n	800373a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fbef 	bl	8003f18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00c      	beq.n	800375e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d007      	beq.n	800375e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f8f7 	bl	800394c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00c      	beq.n	8003782 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f06f 0220 	mvn.w	r2, #32
 800377a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 fbc1 	bl	8003f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e0ae      	b.n	8003908 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	f200 809f 	bhi.w	80038f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037ba:	a201      	add	r2, pc, #4	@ (adr r2, 80037c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c0:	080037f5 	.word	0x080037f5
 80037c4:	080038f9 	.word	0x080038f9
 80037c8:	080038f9 	.word	0x080038f9
 80037cc:	080038f9 	.word	0x080038f9
 80037d0:	08003835 	.word	0x08003835
 80037d4:	080038f9 	.word	0x080038f9
 80037d8:	080038f9 	.word	0x080038f9
 80037dc:	080038f9 	.word	0x080038f9
 80037e0:	08003877 	.word	0x08003877
 80037e4:	080038f9 	.word	0x080038f9
 80037e8:	080038f9 	.word	0x080038f9
 80037ec:	080038f9 	.word	0x080038f9
 80037f0:	080038b7 	.word	0x080038b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f956 	bl	8003aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0208 	orr.w	r2, r2, #8
 800380e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0204 	bic.w	r2, r2, #4
 800381e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6999      	ldr	r1, [r3, #24]
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	619a      	str	r2, [r3, #24]
      break;
 8003832:	e064      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f9a6 	bl	8003b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800384e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699a      	ldr	r2, [r3, #24]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800385e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6999      	ldr	r1, [r3, #24]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	021a      	lsls	r2, r3, #8
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	619a      	str	r2, [r3, #24]
      break;
 8003874:	e043      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f9fb 	bl	8003c78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0208 	orr.w	r2, r2, #8
 8003890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69da      	ldr	r2, [r3, #28]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0204 	bic.w	r2, r2, #4
 80038a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69d9      	ldr	r1, [r3, #28]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	61da      	str	r2, [r3, #28]
      break;
 80038b4:	e023      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fa4f 	bl	8003d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69da      	ldr	r2, [r3, #28]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69d9      	ldr	r1, [r3, #28]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	021a      	lsls	r2, r3, #8
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	61da      	str	r2, [r3, #28]
      break;
 80038f6:	e002      	b.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	75fb      	strb	r3, [r7, #23]
      break;
 80038fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003906:	7dfb      	ldrb	r3, [r7, #23]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a43      	ldr	r2, [pc, #268]	@ (8003a80 <TIM_Base_SetConfig+0x120>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d013      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800397e:	d00f      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a40      	ldr	r2, [pc, #256]	@ (8003a84 <TIM_Base_SetConfig+0x124>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00b      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a3f      	ldr	r2, [pc, #252]	@ (8003a88 <TIM_Base_SetConfig+0x128>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d007      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a3e      	ldr	r2, [pc, #248]	@ (8003a8c <TIM_Base_SetConfig+0x12c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d003      	beq.n	80039a0 <TIM_Base_SetConfig+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3d      	ldr	r2, [pc, #244]	@ (8003a90 <TIM_Base_SetConfig+0x130>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d108      	bne.n	80039b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a32      	ldr	r2, [pc, #200]	@ (8003a80 <TIM_Base_SetConfig+0x120>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d02b      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039c0:	d027      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003a84 <TIM_Base_SetConfig+0x124>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d023      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003a88 <TIM_Base_SetConfig+0x128>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01f      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2d      	ldr	r2, [pc, #180]	@ (8003a8c <TIM_Base_SetConfig+0x12c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01b      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003a90 <TIM_Base_SetConfig+0x130>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d017      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003a94 <TIM_Base_SetConfig+0x134>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003a98 <TIM_Base_SetConfig+0x138>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00f      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a29      	ldr	r2, [pc, #164]	@ (8003a9c <TIM_Base_SetConfig+0x13c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00b      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a28      	ldr	r2, [pc, #160]	@ (8003aa0 <TIM_Base_SetConfig+0x140>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a27      	ldr	r2, [pc, #156]	@ (8003aa4 <TIM_Base_SetConfig+0x144>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a26      	ldr	r2, [pc, #152]	@ (8003aa8 <TIM_Base_SetConfig+0x148>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d108      	bne.n	8003a24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a0e      	ldr	r2, [pc, #56]	@ (8003a80 <TIM_Base_SetConfig+0x120>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d003      	beq.n	8003a52 <TIM_Base_SetConfig+0xf2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a10      	ldr	r2, [pc, #64]	@ (8003a90 <TIM_Base_SetConfig+0x130>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d103      	bne.n	8003a5a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f043 0204 	orr.w	r2, r3, #4
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	601a      	str	r2, [r3, #0]
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40010000 	.word	0x40010000
 8003a84:	40000400 	.word	0x40000400
 8003a88:	40000800 	.word	0x40000800
 8003a8c:	40000c00 	.word	0x40000c00
 8003a90:	40010400 	.word	0x40010400
 8003a94:	40014000 	.word	0x40014000
 8003a98:	40014400 	.word	0x40014400
 8003a9c:	40014800 	.word	0x40014800
 8003aa0:	40001800 	.word	0x40001800
 8003aa4:	40001c00 	.word	0x40001c00
 8003aa8:	40002000 	.word	0x40002000

08003aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f023 0201 	bic.w	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f023 0302 	bic.w	r3, r3, #2
 8003af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a20      	ldr	r2, [pc, #128]	@ (8003b84 <TIM_OC1_SetConfig+0xd8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d003      	beq.n	8003b10 <TIM_OC1_SetConfig+0x64>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b88 <TIM_OC1_SetConfig+0xdc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d10c      	bne.n	8003b2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f023 0308 	bic.w	r3, r3, #8
 8003b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f023 0304 	bic.w	r3, r3, #4
 8003b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a15      	ldr	r2, [pc, #84]	@ (8003b84 <TIM_OC1_SetConfig+0xd8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d003      	beq.n	8003b3a <TIM_OC1_SetConfig+0x8e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a14      	ldr	r2, [pc, #80]	@ (8003b88 <TIM_OC1_SetConfig+0xdc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d111      	bne.n	8003b5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	621a      	str	r2, [r3, #32]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40010400 	.word	0x40010400

08003b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f023 0210 	bic.w	r2, r3, #16
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f023 0320 	bic.w	r3, r3, #32
 8003bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a22      	ldr	r2, [pc, #136]	@ (8003c70 <TIM_OC2_SetConfig+0xe4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_OC2_SetConfig+0x68>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a21      	ldr	r2, [pc, #132]	@ (8003c74 <TIM_OC2_SetConfig+0xe8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d10d      	bne.n	8003c10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a17      	ldr	r2, [pc, #92]	@ (8003c70 <TIM_OC2_SetConfig+0xe4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d003      	beq.n	8003c20 <TIM_OC2_SetConfig+0x94>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a16      	ldr	r2, [pc, #88]	@ (8003c74 <TIM_OC2_SetConfig+0xe8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d113      	bne.n	8003c48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	621a      	str	r2, [r3, #32]
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40010000 	.word	0x40010000
 8003c74:	40010400 	.word	0x40010400

08003c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0303 	bic.w	r3, r3, #3
 8003cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a21      	ldr	r2, [pc, #132]	@ (8003d58 <TIM_OC3_SetConfig+0xe0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <TIM_OC3_SetConfig+0x66>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a20      	ldr	r2, [pc, #128]	@ (8003d5c <TIM_OC3_SetConfig+0xe4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d10d      	bne.n	8003cfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a16      	ldr	r2, [pc, #88]	@ (8003d58 <TIM_OC3_SetConfig+0xe0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_OC3_SetConfig+0x92>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a15      	ldr	r2, [pc, #84]	@ (8003d5c <TIM_OC3_SetConfig+0xe4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d113      	bne.n	8003d32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	621a      	str	r2, [r3, #32]
}
 8003d4c:	bf00      	nop
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	40010000 	.word	0x40010000
 8003d5c:	40010400 	.word	0x40010400

08003d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	031b      	lsls	r3, r3, #12
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a12      	ldr	r2, [pc, #72]	@ (8003e04 <TIM_OC4_SetConfig+0xa4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_OC4_SetConfig+0x68>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a11      	ldr	r2, [pc, #68]	@ (8003e08 <TIM_OC4_SetConfig+0xa8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d109      	bne.n	8003ddc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	019b      	lsls	r3, r3, #6
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40010000 	.word	0x40010000
 8003e08:	40010400 	.word	0x40010400

08003e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e05a      	b.n	8003eda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a21      	ldr	r2, [pc, #132]	@ (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d022      	beq.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e70:	d01d      	beq.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a1d      	ldr	r2, [pc, #116]	@ (8003eec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d018      	beq.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d013      	beq.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00e      	beq.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a18      	ldr	r2, [pc, #96]	@ (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d009      	beq.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a17      	ldr	r2, [pc, #92]	@ (8003efc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d004      	beq.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a15      	ldr	r2, [pc, #84]	@ (8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d10c      	bne.n	8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40010000 	.word	0x40010000
 8003eec:	40000400 	.word	0x40000400
 8003ef0:	40000800 	.word	0x40000800
 8003ef4:	40000c00 	.word	0x40000c00
 8003ef8:	40010400 	.word	0x40010400
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40001800 	.word	0x40001800

08003f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e042      	b.n	8003fc4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fc ffdc 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2224      	movs	r2, #36	@ 0x24
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f82b 	bl	8003fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd0:	b0c0      	sub	sp, #256	@ 0x100
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe8:	68d9      	ldr	r1, [r3, #12]
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	ea40 0301 	orr.w	r3, r0, r1
 8003ff4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	431a      	orrs	r2, r3
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	431a      	orrs	r2, r3
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004024:	f021 010c 	bic.w	r1, r1, #12
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004032:	430b      	orrs	r3, r1
 8004034:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004046:	6999      	ldr	r1, [r3, #24]
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	ea40 0301 	orr.w	r3, r0, r1
 8004052:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4b8f      	ldr	r3, [pc, #572]	@ (8004298 <UART_SetConfig+0x2cc>)
 800405c:	429a      	cmp	r2, r3
 800405e:	d005      	beq.n	800406c <UART_SetConfig+0xa0>
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4b8d      	ldr	r3, [pc, #564]	@ (800429c <UART_SetConfig+0x2d0>)
 8004068:	429a      	cmp	r2, r3
 800406a:	d104      	bne.n	8004076 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800406c:	f7fe fbe8 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 8004070:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004074:	e003      	b.n	800407e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004076:	f7fe fbcf 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 800407a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004088:	f040 810c 	bne.w	80042a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800408c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004090:	2200      	movs	r2, #0
 8004092:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004096:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800409a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800409e:	4622      	mov	r2, r4
 80040a0:	462b      	mov	r3, r5
 80040a2:	1891      	adds	r1, r2, r2
 80040a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040a6:	415b      	adcs	r3, r3
 80040a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040ae:	4621      	mov	r1, r4
 80040b0:	eb12 0801 	adds.w	r8, r2, r1
 80040b4:	4629      	mov	r1, r5
 80040b6:	eb43 0901 	adc.w	r9, r3, r1
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ce:	4690      	mov	r8, r2
 80040d0:	4699      	mov	r9, r3
 80040d2:	4623      	mov	r3, r4
 80040d4:	eb18 0303 	adds.w	r3, r8, r3
 80040d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80040dc:	462b      	mov	r3, r5
 80040de:	eb49 0303 	adc.w	r3, r9, r3
 80040e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040fa:	460b      	mov	r3, r1
 80040fc:	18db      	adds	r3, r3, r3
 80040fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004100:	4613      	mov	r3, r2
 8004102:	eb42 0303 	adc.w	r3, r2, r3
 8004106:	657b      	str	r3, [r7, #84]	@ 0x54
 8004108:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800410c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004110:	f7fc f87e 	bl	8000210 <__aeabi_uldivmod>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4b61      	ldr	r3, [pc, #388]	@ (80042a0 <UART_SetConfig+0x2d4>)
 800411a:	fba3 2302 	umull	r2, r3, r3, r2
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	011c      	lsls	r4, r3, #4
 8004122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004126:	2200      	movs	r2, #0
 8004128:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800412c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004130:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004134:	4642      	mov	r2, r8
 8004136:	464b      	mov	r3, r9
 8004138:	1891      	adds	r1, r2, r2
 800413a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800413c:	415b      	adcs	r3, r3
 800413e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004140:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004144:	4641      	mov	r1, r8
 8004146:	eb12 0a01 	adds.w	sl, r2, r1
 800414a:	4649      	mov	r1, r9
 800414c:	eb43 0b01 	adc.w	fp, r3, r1
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800415c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004160:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004164:	4692      	mov	sl, r2
 8004166:	469b      	mov	fp, r3
 8004168:	4643      	mov	r3, r8
 800416a:	eb1a 0303 	adds.w	r3, sl, r3
 800416e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004172:	464b      	mov	r3, r9
 8004174:	eb4b 0303 	adc.w	r3, fp, r3
 8004178:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004188:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800418c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004190:	460b      	mov	r3, r1
 8004192:	18db      	adds	r3, r3, r3
 8004194:	643b      	str	r3, [r7, #64]	@ 0x40
 8004196:	4613      	mov	r3, r2
 8004198:	eb42 0303 	adc.w	r3, r2, r3
 800419c:	647b      	str	r3, [r7, #68]	@ 0x44
 800419e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041a6:	f7fc f833 	bl	8000210 <__aeabi_uldivmod>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4611      	mov	r1, r2
 80041b0:	4b3b      	ldr	r3, [pc, #236]	@ (80042a0 <UART_SetConfig+0x2d4>)
 80041b2:	fba3 2301 	umull	r2, r3, r3, r1
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	2264      	movs	r2, #100	@ 0x64
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
 80041be:	1acb      	subs	r3, r1, r3
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041c6:	4b36      	ldr	r3, [pc, #216]	@ (80042a0 <UART_SetConfig+0x2d4>)
 80041c8:	fba3 2302 	umull	r2, r3, r3, r2
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041d4:	441c      	add	r4, r3
 80041d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041da:	2200      	movs	r2, #0
 80041dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041e8:	4642      	mov	r2, r8
 80041ea:	464b      	mov	r3, r9
 80041ec:	1891      	adds	r1, r2, r2
 80041ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041f0:	415b      	adcs	r3, r3
 80041f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041f8:	4641      	mov	r1, r8
 80041fa:	1851      	adds	r1, r2, r1
 80041fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80041fe:	4649      	mov	r1, r9
 8004200:	414b      	adcs	r3, r1
 8004202:	637b      	str	r3, [r7, #52]	@ 0x34
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004210:	4659      	mov	r1, fp
 8004212:	00cb      	lsls	r3, r1, #3
 8004214:	4651      	mov	r1, sl
 8004216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800421a:	4651      	mov	r1, sl
 800421c:	00ca      	lsls	r2, r1, #3
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	4603      	mov	r3, r0
 8004224:	4642      	mov	r2, r8
 8004226:	189b      	adds	r3, r3, r2
 8004228:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800422c:	464b      	mov	r3, r9
 800422e:	460a      	mov	r2, r1
 8004230:	eb42 0303 	adc.w	r3, r2, r3
 8004234:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004244:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004248:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800424c:	460b      	mov	r3, r1
 800424e:	18db      	adds	r3, r3, r3
 8004250:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004252:	4613      	mov	r3, r2
 8004254:	eb42 0303 	adc.w	r3, r2, r3
 8004258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800425a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800425e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004262:	f7fb ffd5 	bl	8000210 <__aeabi_uldivmod>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4b0d      	ldr	r3, [pc, #52]	@ (80042a0 <UART_SetConfig+0x2d4>)
 800426c:	fba3 1302 	umull	r1, r3, r3, r2
 8004270:	095b      	lsrs	r3, r3, #5
 8004272:	2164      	movs	r1, #100	@ 0x64
 8004274:	fb01 f303 	mul.w	r3, r1, r3
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	3332      	adds	r3, #50	@ 0x32
 800427e:	4a08      	ldr	r2, [pc, #32]	@ (80042a0 <UART_SetConfig+0x2d4>)
 8004280:	fba2 2303 	umull	r2, r3, r2, r3
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	f003 0207 	and.w	r2, r3, #7
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4422      	add	r2, r4
 8004292:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004294:	e106      	b.n	80044a4 <UART_SetConfig+0x4d8>
 8004296:	bf00      	nop
 8004298:	40011000 	.word	0x40011000
 800429c:	40011400 	.word	0x40011400
 80042a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042a8:	2200      	movs	r2, #0
 80042aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042b6:	4642      	mov	r2, r8
 80042b8:	464b      	mov	r3, r9
 80042ba:	1891      	adds	r1, r2, r2
 80042bc:	6239      	str	r1, [r7, #32]
 80042be:	415b      	adcs	r3, r3
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042c6:	4641      	mov	r1, r8
 80042c8:	1854      	adds	r4, r2, r1
 80042ca:	4649      	mov	r1, r9
 80042cc:	eb43 0501 	adc.w	r5, r3, r1
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	00eb      	lsls	r3, r5, #3
 80042da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042de:	00e2      	lsls	r2, r4, #3
 80042e0:	4614      	mov	r4, r2
 80042e2:	461d      	mov	r5, r3
 80042e4:	4643      	mov	r3, r8
 80042e6:	18e3      	adds	r3, r4, r3
 80042e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042ec:	464b      	mov	r3, r9
 80042ee:	eb45 0303 	adc.w	r3, r5, r3
 80042f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004302:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004312:	4629      	mov	r1, r5
 8004314:	008b      	lsls	r3, r1, #2
 8004316:	4621      	mov	r1, r4
 8004318:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800431c:	4621      	mov	r1, r4
 800431e:	008a      	lsls	r2, r1, #2
 8004320:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004324:	f7fb ff74 	bl	8000210 <__aeabi_uldivmod>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4b60      	ldr	r3, [pc, #384]	@ (80044b0 <UART_SetConfig+0x4e4>)
 800432e:	fba3 2302 	umull	r2, r3, r3, r2
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	011c      	lsls	r4, r3, #4
 8004336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800433a:	2200      	movs	r2, #0
 800433c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004340:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004344:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004348:	4642      	mov	r2, r8
 800434a:	464b      	mov	r3, r9
 800434c:	1891      	adds	r1, r2, r2
 800434e:	61b9      	str	r1, [r7, #24]
 8004350:	415b      	adcs	r3, r3
 8004352:	61fb      	str	r3, [r7, #28]
 8004354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004358:	4641      	mov	r1, r8
 800435a:	1851      	adds	r1, r2, r1
 800435c:	6139      	str	r1, [r7, #16]
 800435e:	4649      	mov	r1, r9
 8004360:	414b      	adcs	r3, r1
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004370:	4659      	mov	r1, fp
 8004372:	00cb      	lsls	r3, r1, #3
 8004374:	4651      	mov	r1, sl
 8004376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800437a:	4651      	mov	r1, sl
 800437c:	00ca      	lsls	r2, r1, #3
 800437e:	4610      	mov	r0, r2
 8004380:	4619      	mov	r1, r3
 8004382:	4603      	mov	r3, r0
 8004384:	4642      	mov	r2, r8
 8004386:	189b      	adds	r3, r3, r2
 8004388:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800438c:	464b      	mov	r3, r9
 800438e:	460a      	mov	r2, r1
 8004390:	eb42 0303 	adc.w	r3, r2, r3
 8004394:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043b0:	4649      	mov	r1, r9
 80043b2:	008b      	lsls	r3, r1, #2
 80043b4:	4641      	mov	r1, r8
 80043b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043ba:	4641      	mov	r1, r8
 80043bc:	008a      	lsls	r2, r1, #2
 80043be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043c2:	f7fb ff25 	bl	8000210 <__aeabi_uldivmod>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4611      	mov	r1, r2
 80043cc:	4b38      	ldr	r3, [pc, #224]	@ (80044b0 <UART_SetConfig+0x4e4>)
 80043ce:	fba3 2301 	umull	r2, r3, r3, r1
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	2264      	movs	r2, #100	@ 0x64
 80043d6:	fb02 f303 	mul.w	r3, r2, r3
 80043da:	1acb      	subs	r3, r1, r3
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	3332      	adds	r3, #50	@ 0x32
 80043e0:	4a33      	ldr	r2, [pc, #204]	@ (80044b0 <UART_SetConfig+0x4e4>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043ec:	441c      	add	r4, r3
 80043ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043f2:	2200      	movs	r2, #0
 80043f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80043f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80043f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043fc:	4642      	mov	r2, r8
 80043fe:	464b      	mov	r3, r9
 8004400:	1891      	adds	r1, r2, r2
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	415b      	adcs	r3, r3
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800440c:	4641      	mov	r1, r8
 800440e:	1851      	adds	r1, r2, r1
 8004410:	6039      	str	r1, [r7, #0]
 8004412:	4649      	mov	r1, r9
 8004414:	414b      	adcs	r3, r1
 8004416:	607b      	str	r3, [r7, #4]
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004424:	4659      	mov	r1, fp
 8004426:	00cb      	lsls	r3, r1, #3
 8004428:	4651      	mov	r1, sl
 800442a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800442e:	4651      	mov	r1, sl
 8004430:	00ca      	lsls	r2, r1, #3
 8004432:	4610      	mov	r0, r2
 8004434:	4619      	mov	r1, r3
 8004436:	4603      	mov	r3, r0
 8004438:	4642      	mov	r2, r8
 800443a:	189b      	adds	r3, r3, r2
 800443c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800443e:	464b      	mov	r3, r9
 8004440:	460a      	mov	r2, r1
 8004442:	eb42 0303 	adc.w	r3, r2, r3
 8004446:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	663b      	str	r3, [r7, #96]	@ 0x60
 8004452:	667a      	str	r2, [r7, #100]	@ 0x64
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004460:	4649      	mov	r1, r9
 8004462:	008b      	lsls	r3, r1, #2
 8004464:	4641      	mov	r1, r8
 8004466:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800446a:	4641      	mov	r1, r8
 800446c:	008a      	lsls	r2, r1, #2
 800446e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004472:	f7fb fecd 	bl	8000210 <__aeabi_uldivmod>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4b0d      	ldr	r3, [pc, #52]	@ (80044b0 <UART_SetConfig+0x4e4>)
 800447c:	fba3 1302 	umull	r1, r3, r3, r2
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	2164      	movs	r1, #100	@ 0x64
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	3332      	adds	r3, #50	@ 0x32
 800448e:	4a08      	ldr	r2, [pc, #32]	@ (80044b0 <UART_SetConfig+0x4e4>)
 8004490:	fba2 2303 	umull	r2, r3, r2, r3
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	f003 020f 	and.w	r2, r3, #15
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4422      	add	r2, r4
 80044a2:	609a      	str	r2, [r3, #8]
}
 80044a4:	bf00      	nop
 80044a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044aa:	46bd      	mov	sp, r7
 80044ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b0:	51eb851f 	.word	0x51eb851f

080044b4 <__NVIC_SetPriority>:
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	6039      	str	r1, [r7, #0]
 80044be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	db0a      	blt.n	80044de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	490c      	ldr	r1, [pc, #48]	@ (8004500 <__NVIC_SetPriority+0x4c>)
 80044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d2:	0112      	lsls	r2, r2, #4
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	440b      	add	r3, r1
 80044d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80044dc:	e00a      	b.n	80044f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	4908      	ldr	r1, [pc, #32]	@ (8004504 <__NVIC_SetPriority+0x50>)
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	3b04      	subs	r3, #4
 80044ec:	0112      	lsls	r2, r2, #4
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	440b      	add	r3, r1
 80044f2:	761a      	strb	r2, [r3, #24]
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	e000e100 	.word	0xe000e100
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800450c:	4b05      	ldr	r3, [pc, #20]	@ (8004524 <SysTick_Handler+0x1c>)
 800450e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004510:	f001 fd18 	bl	8005f44 <xTaskGetSchedulerState>
 8004514:	4603      	mov	r3, r0
 8004516:	2b01      	cmp	r3, #1
 8004518:	d001      	beq.n	800451e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800451a:	f002 fb0d 	bl	8006b38 <xPortSysTickHandler>
  }
}
 800451e:	bf00      	nop
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	e000e010 	.word	0xe000e010

08004528 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800452c:	2100      	movs	r1, #0
 800452e:	f06f 0004 	mvn.w	r0, #4
 8004532:	f7ff ffbf 	bl	80044b4 <__NVIC_SetPriority>
#endif
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004542:	f3ef 8305 	mrs	r3, IPSR
 8004546:	603b      	str	r3, [r7, #0]
  return(result);
 8004548:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800454e:	f06f 0305 	mvn.w	r3, #5
 8004552:	607b      	str	r3, [r7, #4]
 8004554:	e00c      	b.n	8004570 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004556:	4b0a      	ldr	r3, [pc, #40]	@ (8004580 <osKernelInitialize+0x44>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d105      	bne.n	800456a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800455e:	4b08      	ldr	r3, [pc, #32]	@ (8004580 <osKernelInitialize+0x44>)
 8004560:	2201      	movs	r2, #1
 8004562:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004564:	2300      	movs	r3, #0
 8004566:	607b      	str	r3, [r7, #4]
 8004568:	e002      	b.n	8004570 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800456a:	f04f 33ff 	mov.w	r3, #4294967295
 800456e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004570:	687b      	ldr	r3, [r7, #4]
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	200004d0 	.word	0x200004d0

08004584 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800458a:	f3ef 8305 	mrs	r3, IPSR
 800458e:	603b      	str	r3, [r7, #0]
  return(result);
 8004590:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004596:	f06f 0305 	mvn.w	r3, #5
 800459a:	607b      	str	r3, [r7, #4]
 800459c:	e010      	b.n	80045c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800459e:	4b0b      	ldr	r3, [pc, #44]	@ (80045cc <osKernelStart+0x48>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d109      	bne.n	80045ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045a6:	f7ff ffbf 	bl	8004528 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045aa:	4b08      	ldr	r3, [pc, #32]	@ (80045cc <osKernelStart+0x48>)
 80045ac:	2202      	movs	r2, #2
 80045ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045b0:	f001 f87a 	bl	80056a8 <vTaskStartScheduler>
      stat = osOK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	607b      	str	r3, [r7, #4]
 80045b8:	e002      	b.n	80045c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295
 80045be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045c0:	687b      	ldr	r3, [r7, #4]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	200004d0 	.word	0x200004d0

080045d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08e      	sub	sp, #56	@ 0x38
 80045d4:	af04      	add	r7, sp, #16
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045e0:	f3ef 8305 	mrs	r3, IPSR
 80045e4:	617b      	str	r3, [r7, #20]
  return(result);
 80045e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d17e      	bne.n	80046ea <osThreadNew+0x11a>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d07b      	beq.n	80046ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80045f2:	2380      	movs	r3, #128	@ 0x80
 80045f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80045f6:	2318      	movs	r3, #24
 80045f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80045fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004602:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d045      	beq.n	8004696 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <osThreadNew+0x48>
        name = attr->name;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <osThreadNew+0x6e>
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b38      	cmp	r3, #56	@ 0x38
 8004630:	d805      	bhi.n	800463e <osThreadNew+0x6e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <osThreadNew+0x72>
        return (NULL);
 800463e:	2300      	movs	r3, #0
 8004640:	e054      	b.n	80046ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	089b      	lsrs	r3, r3, #2
 8004650:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00e      	beq.n	8004678 <osThreadNew+0xa8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2b5b      	cmp	r3, #91	@ 0x5b
 8004660:	d90a      	bls.n	8004678 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004666:	2b00      	cmp	r3, #0
 8004668:	d006      	beq.n	8004678 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <osThreadNew+0xa8>
        mem = 1;
 8004672:	2301      	movs	r3, #1
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	e010      	b.n	800469a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10c      	bne.n	800469a <osThreadNew+0xca>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d108      	bne.n	800469a <osThreadNew+0xca>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d104      	bne.n	800469a <osThreadNew+0xca>
          mem = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	e001      	b.n	800469a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004696:	2300      	movs	r3, #0
 8004698:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d110      	bne.n	80046c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046a8:	9202      	str	r2, [sp, #8]
 80046aa:	9301      	str	r3, [sp, #4]
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	6a3a      	ldr	r2, [r7, #32]
 80046b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 fe1a 	bl	80052f0 <xTaskCreateStatic>
 80046bc:	4603      	mov	r3, r0
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	e013      	b.n	80046ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d110      	bne.n	80046ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	f107 0310 	add.w	r3, r7, #16
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 fe68 	bl	80053b0 <xTaskCreate>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d001      	beq.n	80046ea <osThreadNew+0x11a>
            hTask = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80046ea:	693b      	ldr	r3, [r7, #16]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3728      	adds	r7, #40	@ 0x28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046fc:	f3ef 8305 	mrs	r3, IPSR
 8004700:	60bb      	str	r3, [r7, #8]
  return(result);
 8004702:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <osDelay+0x1c>
    stat = osErrorISR;
 8004708:	f06f 0305 	mvn.w	r3, #5
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e007      	b.n	8004720 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <osDelay+0x2c>
      vTaskDelay(ticks);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 ff8e 	bl	800563c <vTaskDelay>
    }
  }

  return (stat);
 8004720:	68fb      	ldr	r3, [r7, #12]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a07      	ldr	r2, [pc, #28]	@ (8004758 <vApplicationGetIdleTaskMemory+0x2c>)
 800473c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4a06      	ldr	r2, [pc, #24]	@ (800475c <vApplicationGetIdleTaskMemory+0x30>)
 8004742:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2280      	movs	r2, #128	@ 0x80
 8004748:	601a      	str	r2, [r3, #0]
}
 800474a:	bf00      	nop
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	200004d4 	.word	0x200004d4
 800475c:	20000530 	.word	0x20000530

08004760 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4a07      	ldr	r2, [pc, #28]	@ (800478c <vApplicationGetTimerTaskMemory+0x2c>)
 8004770:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	4a06      	ldr	r2, [pc, #24]	@ (8004790 <vApplicationGetTimerTaskMemory+0x30>)
 8004776:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800477e:	601a      	str	r2, [r3, #0]
}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	20000730 	.word	0x20000730
 8004790:	2000078c 	.word	0x2000078c

08004794 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f103 0208 	add.w	r2, r3, #8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f04f 32ff 	mov.w	r2, #4294967295
 80047ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f103 0208 	add.w	r2, r3, #8
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f103 0208 	add.w	r2, r3, #8
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	601a      	str	r2, [r3, #0]
}
 800482a:	bf00      	nop
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004836:	b480      	push	{r7}
 8004838:	b085      	sub	sp, #20
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484c:	d103      	bne.n	8004856 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	e00c      	b.n	8004870 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3308      	adds	r3, #8
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	e002      	b.n	8004864 <vListInsert+0x2e>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	429a      	cmp	r2, r3
 800486e:	d2f6      	bcs.n	800485e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	601a      	str	r2, [r3, #0]
}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6892      	ldr	r2, [r2, #8]
 80048be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6852      	ldr	r2, [r2, #4]
 80048c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d103      	bne.n	80048dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	1e5a      	subs	r2, r3, #1
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004922:	bf00      	nop
 8004924:	bf00      	nop
 8004926:	e7fd      	b.n	8004924 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004928:	f002 f876 	bl	8006a18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004934:	68f9      	ldr	r1, [r7, #12]
 8004936:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	441a      	add	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004958:	3b01      	subs	r3, #1
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800495e:	fb01 f303 	mul.w	r3, r1, r3
 8004962:	441a      	add	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	22ff      	movs	r2, #255	@ 0xff
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	22ff      	movs	r2, #255	@ 0xff
 8004974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d114      	bne.n	80049a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01a      	beq.n	80049bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3310      	adds	r3, #16
 800498a:	4618      	mov	r0, r3
 800498c:	f001 f91a 	bl	8005bc4 <xTaskRemoveFromEventList>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d012      	beq.n	80049bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004996:	4b0d      	ldr	r3, [pc, #52]	@ (80049cc <xQueueGenericReset+0xd0>)
 8004998:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	e009      	b.n	80049bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3310      	adds	r3, #16
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff fef1 	bl	8004794 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3324      	adds	r3, #36	@ 0x24
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff feec 	bl	8004794 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049bc:	f002 f85e 	bl	8006a7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049c0:	2301      	movs	r3, #1
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	e000ed04 	.word	0xe000ed04

080049d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08e      	sub	sp, #56	@ 0x38
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10b      	bne.n	80049fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80049f6:	bf00      	nop
 80049f8:	bf00      	nop
 80049fa:	e7fd      	b.n	80049f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10b      	bne.n	8004a1a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a14:	bf00      	nop
 8004a16:	bf00      	nop
 8004a18:	e7fd      	b.n	8004a16 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <xQueueGenericCreateStatic+0x56>
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <xQueueGenericCreateStatic+0x5a>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <xQueueGenericCreateStatic+0x5c>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10b      	bne.n	8004a48 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	623b      	str	r3, [r7, #32]
}
 8004a42:	bf00      	nop
 8004a44:	bf00      	nop
 8004a46:	e7fd      	b.n	8004a44 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d102      	bne.n	8004a54 <xQueueGenericCreateStatic+0x84>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <xQueueGenericCreateStatic+0x88>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <xQueueGenericCreateStatic+0x8a>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10b      	bne.n	8004a76 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	61fb      	str	r3, [r7, #28]
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	e7fd      	b.n	8004a72 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a76:	2350      	movs	r3, #80	@ 0x50
 8004a78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b50      	cmp	r3, #80	@ 0x50
 8004a7e:	d00b      	beq.n	8004a98 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	61bb      	str	r3, [r7, #24]
}
 8004a92:	bf00      	nop
 8004a94:	bf00      	nop
 8004a96:	e7fd      	b.n	8004a94 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00d      	beq.n	8004ac0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004aac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	68b9      	ldr	r1, [r7, #8]
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f000 f805 	bl	8004aca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3730      	adds	r7, #48	@ 0x30
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	e002      	b.n	8004aec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004af8:	2101      	movs	r1, #1
 8004afa:	69b8      	ldr	r0, [r7, #24]
 8004afc:	f7ff fefe 	bl	80048fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08e      	sub	sp, #56	@ 0x38
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10b      	bne.n	8004b44 <xQueueGenericSend+0x34>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b3e:	bf00      	nop
 8004b40:	bf00      	nop
 8004b42:	e7fd      	b.n	8004b40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d103      	bne.n	8004b52 <xQueueGenericSend+0x42>
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <xQueueGenericSend+0x46>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <xQueueGenericSend+0x48>
 8004b56:	2300      	movs	r3, #0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10b      	bne.n	8004b74 <xQueueGenericSend+0x64>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b6e:	bf00      	nop
 8004b70:	bf00      	nop
 8004b72:	e7fd      	b.n	8004b70 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d103      	bne.n	8004b82 <xQueueGenericSend+0x72>
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d101      	bne.n	8004b86 <xQueueGenericSend+0x76>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <xQueueGenericSend+0x78>
 8004b86:	2300      	movs	r3, #0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10b      	bne.n	8004ba4 <xQueueGenericSend+0x94>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	623b      	str	r3, [r7, #32]
}
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	e7fd      	b.n	8004ba0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ba4:	f001 f9ce 	bl	8005f44 <xTaskGetSchedulerState>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d102      	bne.n	8004bb4 <xQueueGenericSend+0xa4>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <xQueueGenericSend+0xa8>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <xQueueGenericSend+0xaa>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10b      	bne.n	8004bd6 <xQueueGenericSend+0xc6>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	61fb      	str	r3, [r7, #28]
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	e7fd      	b.n	8004bd2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bd6:	f001 ff1f 	bl	8006a18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d302      	bcc.n	8004bec <xQueueGenericSend+0xdc>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d129      	bne.n	8004c40 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004bf2:	f000 fa0f 	bl	8005014 <prvCopyDataToQueue>
 8004bf6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d010      	beq.n	8004c22 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c02:	3324      	adds	r3, #36	@ 0x24
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 ffdd 	bl	8005bc4 <xTaskRemoveFromEventList>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d013      	beq.n	8004c38 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c10:	4b3f      	ldr	r3, [pc, #252]	@ (8004d10 <xQueueGenericSend+0x200>)
 8004c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	e00a      	b.n	8004c38 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c28:	4b39      	ldr	r3, [pc, #228]	@ (8004d10 <xQueueGenericSend+0x200>)
 8004c2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c38:	f001 ff20 	bl	8006a7c <vPortExitCritical>
				return pdPASS;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e063      	b.n	8004d08 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c46:	f001 ff19 	bl	8006a7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e05c      	b.n	8004d08 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c54:	f107 0314 	add.w	r3, r7, #20
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f001 f817 	bl	8005c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c62:	f001 ff0b 	bl	8006a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c66:	f000 fd87 	bl	8005778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c6a:	f001 fed5 	bl	8006a18 <vPortEnterCritical>
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c74:	b25b      	sxtb	r3, r3
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d103      	bne.n	8004c84 <xQueueGenericSend+0x174>
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c8a:	b25b      	sxtb	r3, r3
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d103      	bne.n	8004c9a <xQueueGenericSend+0x18a>
 8004c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c9a:	f001 feef 	bl	8006a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c9e:	1d3a      	adds	r2, r7, #4
 8004ca0:	f107 0314 	add.w	r3, r7, #20
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f001 f806 	bl	8005cb8 <xTaskCheckForTimeOut>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d124      	bne.n	8004cfc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cb4:	f000 faa6 	bl	8005204 <prvIsQueueFull>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d018      	beq.n	8004cf0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc0:	3310      	adds	r3, #16
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 ff2a 	bl	8005b20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cce:	f000 fa31 	bl	8005134 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cd2:	f000 fd5f 	bl	8005794 <xTaskResumeAll>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f47f af7c 	bne.w	8004bd6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004cde:	4b0c      	ldr	r3, [pc, #48]	@ (8004d10 <xQueueGenericSend+0x200>)
 8004ce0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	e772      	b.n	8004bd6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004cf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cf2:	f000 fa1f 	bl	8005134 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cf6:	f000 fd4d 	bl	8005794 <xTaskResumeAll>
 8004cfa:	e76c      	b.n	8004bd6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004cfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cfe:	f000 fa19 	bl	8005134 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d02:	f000 fd47 	bl	8005794 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3738      	adds	r7, #56	@ 0x38
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	e000ed04 	.word	0xe000ed04

08004d14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b090      	sub	sp, #64	@ 0x40
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10b      	bne.n	8004d44 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d3e:	bf00      	nop
 8004d40:	bf00      	nop
 8004d42:	e7fd      	b.n	8004d40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <xQueueGenericSendFromISR+0x3e>
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <xQueueGenericSendFromISR+0x42>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <xQueueGenericSendFromISR+0x44>
 8004d56:	2300      	movs	r3, #0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10b      	bne.n	8004d74 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
 8004d72:	e7fd      	b.n	8004d70 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d103      	bne.n	8004d82 <xQueueGenericSendFromISR+0x6e>
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <xQueueGenericSendFromISR+0x72>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <xQueueGenericSendFromISR+0x74>
 8004d86:	2300      	movs	r3, #0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10b      	bne.n	8004da4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	623b      	str	r3, [r7, #32]
}
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
 8004da2:	e7fd      	b.n	8004da0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004da4:	f001 ff18 	bl	8006bd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004da8:	f3ef 8211 	mrs	r2, BASEPRI
 8004dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	61fa      	str	r2, [r7, #28]
 8004dbe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dc2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d302      	bcc.n	8004dd6 <xQueueGenericSendFromISR+0xc2>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d12f      	bne.n	8004e36 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ddc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004dec:	f000 f912 	bl	8005014 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004df0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d112      	bne.n	8004e20 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d016      	beq.n	8004e30 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e04:	3324      	adds	r3, #36	@ 0x24
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fedc 	bl	8005bc4 <xTaskRemoveFromEventList>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00e      	beq.n	8004e30 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00b      	beq.n	8004e30 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e007      	b.n	8004e30 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004e24:	3301      	adds	r3, #1
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	b25a      	sxtb	r2, r3
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004e30:	2301      	movs	r3, #1
 8004e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004e34:	e001      	b.n	8004e3a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3740      	adds	r7, #64	@ 0x40
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08c      	sub	sp, #48	@ 0x30
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10b      	bne.n	8004e82 <xQueueReceive+0x32>
	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	623b      	str	r3, [r7, #32]
}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	e7fd      	b.n	8004e7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d103      	bne.n	8004e90 <xQueueReceive+0x40>
 8004e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <xQueueReceive+0x44>
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <xQueueReceive+0x46>
 8004e94:	2300      	movs	r3, #0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10b      	bne.n	8004eb2 <xQueueReceive+0x62>
	__asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	61fb      	str	r3, [r7, #28]
}
 8004eac:	bf00      	nop
 8004eae:	bf00      	nop
 8004eb0:	e7fd      	b.n	8004eae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eb2:	f001 f847 	bl	8005f44 <xTaskGetSchedulerState>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d102      	bne.n	8004ec2 <xQueueReceive+0x72>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <xQueueReceive+0x76>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <xQueueReceive+0x78>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10b      	bne.n	8004ee4 <xQueueReceive+0x94>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	61bb      	str	r3, [r7, #24]
}
 8004ede:	bf00      	nop
 8004ee0:	bf00      	nop
 8004ee2:	e7fd      	b.n	8004ee0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ee4:	f001 fd98 	bl	8006a18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01f      	beq.n	8004f34 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ef8:	f000 f8f6 	bl	80050e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efe:	1e5a      	subs	r2, r3, #1
 8004f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f02:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00f      	beq.n	8004f2c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0e:	3310      	adds	r3, #16
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fe57 	bl	8005bc4 <xTaskRemoveFromEventList>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f1c:	4b3c      	ldr	r3, [pc, #240]	@ (8005010 <xQueueReceive+0x1c0>)
 8004f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f2c:	f001 fda6 	bl	8006a7c <vPortExitCritical>
				return pdPASS;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e069      	b.n	8005008 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d103      	bne.n	8004f42 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f3a:	f001 fd9f 	bl	8006a7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e062      	b.n	8005008 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f48:	f107 0310 	add.w	r3, r7, #16
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fe9d 	bl	8005c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f52:	2301      	movs	r3, #1
 8004f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f56:	f001 fd91 	bl	8006a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f5a:	f000 fc0d 	bl	8005778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f5e:	f001 fd5b 	bl	8006a18 <vPortEnterCritical>
 8004f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f68:	b25b      	sxtb	r3, r3
 8004f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6e:	d103      	bne.n	8004f78 <xQueueReceive+0x128>
 8004f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f7e:	b25b      	sxtb	r3, r3
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f84:	d103      	bne.n	8004f8e <xQueueReceive+0x13e>
 8004f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f8e:	f001 fd75 	bl	8006a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f92:	1d3a      	adds	r2, r7, #4
 8004f94:	f107 0310 	add.w	r3, r7, #16
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fe8c 	bl	8005cb8 <xTaskCheckForTimeOut>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d123      	bne.n	8004fee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fa8:	f000 f916 	bl	80051d8 <prvIsQueueEmpty>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d017      	beq.n	8004fe2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb4:	3324      	adds	r3, #36	@ 0x24
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	4611      	mov	r1, r2
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fdb0 	bl	8005b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fc2:	f000 f8b7 	bl	8005134 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fc6:	f000 fbe5 	bl	8005794 <xTaskResumeAll>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d189      	bne.n	8004ee4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8005010 <xQueueReceive+0x1c0>)
 8004fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	e780      	b.n	8004ee4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fe4:	f000 f8a6 	bl	8005134 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fe8:	f000 fbd4 	bl	8005794 <xTaskResumeAll>
 8004fec:	e77a      	b.n	8004ee4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004fee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ff0:	f000 f8a0 	bl	8005134 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ff4:	f000 fbce 	bl	8005794 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ff8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ffa:	f000 f8ed 	bl	80051d8 <prvIsQueueEmpty>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	f43f af6f 	beq.w	8004ee4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005006:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005008:	4618      	mov	r0, r3
 800500a:	3730      	adds	r7, #48	@ 0x30
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	e000ed04 	.word	0xe000ed04

08005014 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005028:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10d      	bne.n	800504e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d14d      	bne.n	80050d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	4618      	mov	r0, r3
 8005040:	f000 ff9e 	bl	8005f80 <xTaskPriorityDisinherit>
 8005044:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	609a      	str	r2, [r3, #8]
 800504c:	e043      	b.n	80050d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d119      	bne.n	8005088 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6858      	ldr	r0, [r3, #4]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505c:	461a      	mov	r2, r3
 800505e:	68b9      	ldr	r1, [r7, #8]
 8005060:	f002 f816 	bl	8007090 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	441a      	add	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	429a      	cmp	r2, r3
 800507c:	d32b      	bcc.n	80050d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	e026      	b.n	80050d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	68d8      	ldr	r0, [r3, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005090:	461a      	mov	r2, r3
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	f001 fffc 	bl	8007090 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a0:	425b      	negs	r3, r3
 80050a2:	441a      	add	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d207      	bcs.n	80050c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050bc:	425b      	negs	r3, r3
 80050be:	441a      	add	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d105      	bne.n	80050d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80050de:	697b      	ldr	r3, [r7, #20]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d018      	beq.n	800512c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005102:	441a      	add	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	429a      	cmp	r2, r3
 8005112:	d303      	bcc.n	800511c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68d9      	ldr	r1, [r3, #12]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005124:	461a      	mov	r2, r3
 8005126:	6838      	ldr	r0, [r7, #0]
 8005128:	f001 ffb2 	bl	8007090 <memcpy>
	}
}
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800513c:	f001 fc6c 	bl	8006a18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005146:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005148:	e011      	b.n	800516e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514e:	2b00      	cmp	r3, #0
 8005150:	d012      	beq.n	8005178 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3324      	adds	r3, #36	@ 0x24
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fd34 	bl	8005bc4 <xTaskRemoveFromEventList>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005162:	f000 fe0d 	bl	8005d80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	3b01      	subs	r3, #1
 800516a:	b2db      	uxtb	r3, r3
 800516c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800516e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005172:	2b00      	cmp	r3, #0
 8005174:	dce9      	bgt.n	800514a <prvUnlockQueue+0x16>
 8005176:	e000      	b.n	800517a <prvUnlockQueue+0x46>
					break;
 8005178:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	22ff      	movs	r2, #255	@ 0xff
 800517e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005182:	f001 fc7b 	bl	8006a7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005186:	f001 fc47 	bl	8006a18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005190:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005192:	e011      	b.n	80051b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d012      	beq.n	80051c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3310      	adds	r3, #16
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fd0f 	bl	8005bc4 <xTaskRemoveFromEventList>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051ac:	f000 fde8 	bl	8005d80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051b0:	7bbb      	ldrb	r3, [r7, #14]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	dce9      	bgt.n	8005194 <prvUnlockQueue+0x60>
 80051c0:	e000      	b.n	80051c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	22ff      	movs	r2, #255	@ 0xff
 80051c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80051cc:	f001 fc56 	bl	8006a7c <vPortExitCritical>
}
 80051d0:	bf00      	nop
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051e0:	f001 fc1a 	bl	8006a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d102      	bne.n	80051f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051ec:	2301      	movs	r3, #1
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e001      	b.n	80051f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051f6:	f001 fc41 	bl	8006a7c <vPortExitCritical>

	return xReturn;
 80051fa:	68fb      	ldr	r3, [r7, #12]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800520c:	f001 fc04 	bl	8006a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005218:	429a      	cmp	r2, r3
 800521a:	d102      	bne.n	8005222 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800521c:	2301      	movs	r3, #1
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e001      	b.n	8005226 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005226:	f001 fc29 	bl	8006a7c <vPortExitCritical>

	return xReturn;
 800522a:	68fb      	ldr	r3, [r7, #12]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	e014      	b.n	800526e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005244:	4a0f      	ldr	r2, [pc, #60]	@ (8005284 <vQueueAddToRegistry+0x50>)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10b      	bne.n	8005268 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005250:	490c      	ldr	r1, [pc, #48]	@ (8005284 <vQueueAddToRegistry+0x50>)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800525a:	4a0a      	ldr	r2, [pc, #40]	@ (8005284 <vQueueAddToRegistry+0x50>)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	4413      	add	r3, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005266:	e006      	b.n	8005276 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3301      	adds	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b07      	cmp	r3, #7
 8005272:	d9e7      	bls.n	8005244 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	20000b8c 	.word	0x20000b8c

08005288 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005298:	f001 fbbe 	bl	8006a18 <vPortEnterCritical>
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052a2:	b25b      	sxtb	r3, r3
 80052a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a8:	d103      	bne.n	80052b2 <vQueueWaitForMessageRestricted+0x2a>
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052b8:	b25b      	sxtb	r3, r3
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052be:	d103      	bne.n	80052c8 <vQueueWaitForMessageRestricted+0x40>
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052c8:	f001 fbd8 	bl	8006a7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	3324      	adds	r3, #36	@ 0x24
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fc45 	bl	8005b6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80052e2:	6978      	ldr	r0, [r7, #20]
 80052e4:	f7ff ff26 	bl	8005134 <prvUnlockQueue>
	}
 80052e8:	bf00      	nop
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08e      	sub	sp, #56	@ 0x38
 80052f4:	af04      	add	r7, sp, #16
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10b      	bne.n	800531c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	623b      	str	r3, [r7, #32]
}
 8005316:	bf00      	nop
 8005318:	bf00      	nop
 800531a:	e7fd      	b.n	8005318 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800531c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10b      	bne.n	800533a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	61fb      	str	r3, [r7, #28]
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	e7fd      	b.n	8005336 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800533a:	235c      	movs	r3, #92	@ 0x5c
 800533c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	2b5c      	cmp	r3, #92	@ 0x5c
 8005342:	d00b      	beq.n	800535c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	61bb      	str	r3, [r7, #24]
}
 8005356:	bf00      	nop
 8005358:	bf00      	nop
 800535a:	e7fd      	b.n	8005358 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800535c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800535e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01e      	beq.n	80053a2 <xTaskCreateStatic+0xb2>
 8005364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01b      	beq.n	80053a2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800536a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005372:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005376:	2202      	movs	r2, #2
 8005378:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800537c:	2300      	movs	r3, #0
 800537e:	9303      	str	r3, [sp, #12]
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	9302      	str	r3, [sp, #8]
 8005384:	f107 0314 	add.w	r3, r7, #20
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	68b9      	ldr	r1, [r7, #8]
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 f850 	bl	800543a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800539a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800539c:	f000 f8de 	bl	800555c <prvAddNewTaskToReadyList>
 80053a0:	e001      	b.n	80053a6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053a6:	697b      	ldr	r3, [r7, #20]
	}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3728      	adds	r7, #40	@ 0x28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08c      	sub	sp, #48	@ 0x30
 80053b4:	af04      	add	r7, sp, #16
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	4613      	mov	r3, r2
 80053be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053c0:	88fb      	ldrh	r3, [r7, #6]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 fc49 	bl	8006c5c <pvPortMalloc>
 80053ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00e      	beq.n	80053f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053d2:	205c      	movs	r0, #92	@ 0x5c
 80053d4:	f001 fc42 	bl	8006c5c <pvPortMalloc>
 80053d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80053e6:	e005      	b.n	80053f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80053e8:	6978      	ldr	r0, [r7, #20]
 80053ea:	f001 fd05 	bl	8006df8 <vPortFree>
 80053ee:	e001      	b.n	80053f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d017      	beq.n	800542a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005402:	88fa      	ldrh	r2, [r7, #6]
 8005404:	2300      	movs	r3, #0
 8005406:	9303      	str	r3, [sp, #12]
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	9302      	str	r3, [sp, #8]
 800540c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f80e 	bl	800543a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800541e:	69f8      	ldr	r0, [r7, #28]
 8005420:	f000 f89c 	bl	800555c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005424:	2301      	movs	r3, #1
 8005426:	61bb      	str	r3, [r7, #24]
 8005428:	e002      	b.n	8005430 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800542a:	f04f 33ff 	mov.w	r3, #4294967295
 800542e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005430:	69bb      	ldr	r3, [r7, #24]
	}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b088      	sub	sp, #32
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
 8005446:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	461a      	mov	r2, r3
 8005452:	21a5      	movs	r1, #165	@ 0xa5
 8005454:	f001 fdf0 	bl	8007038 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005462:	3b01      	subs	r3, #1
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	f023 0307 	bic.w	r3, r3, #7
 8005470:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00b      	beq.n	8005494 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	617b      	str	r3, [r7, #20]
}
 800548e:	bf00      	nop
 8005490:	bf00      	nop
 8005492:	e7fd      	b.n	8005490 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01f      	beq.n	80054da <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	e012      	b.n	80054c6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	7819      	ldrb	r1, [r3, #0]
 80054a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	4413      	add	r3, r2
 80054ae:	3334      	adds	r3, #52	@ 0x34
 80054b0:	460a      	mov	r2, r1
 80054b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d006      	beq.n	80054ce <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	3301      	adds	r3, #1
 80054c4:	61fb      	str	r3, [r7, #28]
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	2b0f      	cmp	r3, #15
 80054ca:	d9e9      	bls.n	80054a0 <prvInitialiseNewTask+0x66>
 80054cc:	e000      	b.n	80054d0 <prvInitialiseNewTask+0x96>
			{
				break;
 80054ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054d8:	e003      	b.n	80054e2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e4:	2b37      	cmp	r3, #55	@ 0x37
 80054e6:	d901      	bls.n	80054ec <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054e8:	2337      	movs	r3, #55	@ 0x37
 80054ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054f0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054f6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	2200      	movs	r2, #0
 80054fc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005500:	3304      	adds	r3, #4
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff f966 	bl	80047d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550a:	3318      	adds	r3, #24
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff f961 	bl	80047d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005516:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005520:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005526:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552a:	2200      	movs	r2, #0
 800552c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	68f9      	ldr	r1, [r7, #12]
 800553a:	69b8      	ldr	r0, [r7, #24]
 800553c:	f001 f93e 	bl	80067bc <pxPortInitialiseStack>
 8005540:	4602      	mov	r2, r0
 8005542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005544:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800554c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005550:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005552:	bf00      	nop
 8005554:	3720      	adds	r7, #32
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005564:	f001 fa58 	bl	8006a18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005568:	4b2d      	ldr	r3, [pc, #180]	@ (8005620 <prvAddNewTaskToReadyList+0xc4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3301      	adds	r3, #1
 800556e:	4a2c      	ldr	r2, [pc, #176]	@ (8005620 <prvAddNewTaskToReadyList+0xc4>)
 8005570:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005572:	4b2c      	ldr	r3, [pc, #176]	@ (8005624 <prvAddNewTaskToReadyList+0xc8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d109      	bne.n	800558e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800557a:	4a2a      	ldr	r2, [pc, #168]	@ (8005624 <prvAddNewTaskToReadyList+0xc8>)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005580:	4b27      	ldr	r3, [pc, #156]	@ (8005620 <prvAddNewTaskToReadyList+0xc4>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d110      	bne.n	80055aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005588:	f000 fc1e 	bl	8005dc8 <prvInitialiseTaskLists>
 800558c:	e00d      	b.n	80055aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800558e:	4b26      	ldr	r3, [pc, #152]	@ (8005628 <prvAddNewTaskToReadyList+0xcc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005596:	4b23      	ldr	r3, [pc, #140]	@ (8005624 <prvAddNewTaskToReadyList+0xc8>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d802      	bhi.n	80055aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005624 <prvAddNewTaskToReadyList+0xc8>)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055aa:	4b20      	ldr	r3, [pc, #128]	@ (800562c <prvAddNewTaskToReadyList+0xd0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3301      	adds	r3, #1
 80055b0:	4a1e      	ldr	r2, [pc, #120]	@ (800562c <prvAddNewTaskToReadyList+0xd0>)
 80055b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80055b4:	4b1d      	ldr	r3, [pc, #116]	@ (800562c <prvAddNewTaskToReadyList+0xd0>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005630 <prvAddNewTaskToReadyList+0xd4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d903      	bls.n	80055d0 <prvAddNewTaskToReadyList+0x74>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	4a18      	ldr	r2, [pc, #96]	@ (8005630 <prvAddNewTaskToReadyList+0xd4>)
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4a15      	ldr	r2, [pc, #84]	@ (8005634 <prvAddNewTaskToReadyList+0xd8>)
 80055de:	441a      	add	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3304      	adds	r3, #4
 80055e4:	4619      	mov	r1, r3
 80055e6:	4610      	mov	r0, r2
 80055e8:	f7ff f901 	bl	80047ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055ec:	f001 fa46 	bl	8006a7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005628 <prvAddNewTaskToReadyList+0xcc>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00e      	beq.n	8005616 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005624 <prvAddNewTaskToReadyList+0xc8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005602:	429a      	cmp	r2, r3
 8005604:	d207      	bcs.n	8005616 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005606:	4b0c      	ldr	r3, [pc, #48]	@ (8005638 <prvAddNewTaskToReadyList+0xdc>)
 8005608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005616:	bf00      	nop
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	200010a0 	.word	0x200010a0
 8005624:	20000bcc 	.word	0x20000bcc
 8005628:	200010ac 	.word	0x200010ac
 800562c:	200010bc 	.word	0x200010bc
 8005630:	200010a8 	.word	0x200010a8
 8005634:	20000bd0 	.word	0x20000bd0
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d018      	beq.n	8005680 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800564e:	4b14      	ldr	r3, [pc, #80]	@ (80056a0 <vTaskDelay+0x64>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00b      	beq.n	800566e <vTaskDelay+0x32>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	60bb      	str	r3, [r7, #8]
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	e7fd      	b.n	800566a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800566e:	f000 f883 	bl	8005778 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005672:	2100      	movs	r1, #0
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fcf3 	bl	8006060 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800567a:	f000 f88b 	bl	8005794 <xTaskResumeAll>
 800567e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d107      	bne.n	8005696 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005686:	4b07      	ldr	r3, [pc, #28]	@ (80056a4 <vTaskDelay+0x68>)
 8005688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	200010c8 	.word	0x200010c8
 80056a4:	e000ed04 	.word	0xe000ed04

080056a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08a      	sub	sp, #40	@ 0x28
 80056ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056b6:	463a      	mov	r2, r7
 80056b8:	1d39      	adds	r1, r7, #4
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff f834 	bl	800472c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	9202      	str	r2, [sp, #8]
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	2300      	movs	r3, #0
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	2300      	movs	r3, #0
 80056d4:	460a      	mov	r2, r1
 80056d6:	4922      	ldr	r1, [pc, #136]	@ (8005760 <vTaskStartScheduler+0xb8>)
 80056d8:	4822      	ldr	r0, [pc, #136]	@ (8005764 <vTaskStartScheduler+0xbc>)
 80056da:	f7ff fe09 	bl	80052f0 <xTaskCreateStatic>
 80056de:	4603      	mov	r3, r0
 80056e0:	4a21      	ldr	r2, [pc, #132]	@ (8005768 <vTaskStartScheduler+0xc0>)
 80056e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056e4:	4b20      	ldr	r3, [pc, #128]	@ (8005768 <vTaskStartScheduler+0xc0>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056ec:	2301      	movs	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	e001      	b.n	80056f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d102      	bne.n	8005702 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056fc:	f000 fd04 	bl	8006108 <xTimerCreateTimerTask>
 8005700:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d116      	bne.n	8005736 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	613b      	str	r3, [r7, #16]
}
 800571a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800571c:	4b13      	ldr	r3, [pc, #76]	@ (800576c <vTaskStartScheduler+0xc4>)
 800571e:	f04f 32ff 	mov.w	r2, #4294967295
 8005722:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005724:	4b12      	ldr	r3, [pc, #72]	@ (8005770 <vTaskStartScheduler+0xc8>)
 8005726:	2201      	movs	r2, #1
 8005728:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800572a:	4b12      	ldr	r3, [pc, #72]	@ (8005774 <vTaskStartScheduler+0xcc>)
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005730:	f001 f8ce 	bl	80068d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005734:	e00f      	b.n	8005756 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573c:	d10b      	bne.n	8005756 <vTaskStartScheduler+0xae>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	60fb      	str	r3, [r7, #12]
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	e7fd      	b.n	8005752 <vTaskStartScheduler+0xaa>
}
 8005756:	bf00      	nop
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	080070d0 	.word	0x080070d0
 8005764:	08005d99 	.word	0x08005d99
 8005768:	200010c4 	.word	0x200010c4
 800576c:	200010c0 	.word	0x200010c0
 8005770:	200010ac 	.word	0x200010ac
 8005774:	200010a4 	.word	0x200010a4

08005778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800577c:	4b04      	ldr	r3, [pc, #16]	@ (8005790 <vTaskSuspendAll+0x18>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3301      	adds	r3, #1
 8005782:	4a03      	ldr	r2, [pc, #12]	@ (8005790 <vTaskSuspendAll+0x18>)
 8005784:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005786:	bf00      	nop
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	200010c8 	.word	0x200010c8

08005794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800579e:	2300      	movs	r3, #0
 80057a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057a2:	4b42      	ldr	r3, [pc, #264]	@ (80058ac <xTaskResumeAll+0x118>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <xTaskResumeAll+0x2e>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	603b      	str	r3, [r7, #0]
}
 80057bc:	bf00      	nop
 80057be:	bf00      	nop
 80057c0:	e7fd      	b.n	80057be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057c2:	f001 f929 	bl	8006a18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057c6:	4b39      	ldr	r3, [pc, #228]	@ (80058ac <xTaskResumeAll+0x118>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	4a37      	ldr	r2, [pc, #220]	@ (80058ac <xTaskResumeAll+0x118>)
 80057ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d0:	4b36      	ldr	r3, [pc, #216]	@ (80058ac <xTaskResumeAll+0x118>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d162      	bne.n	800589e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057d8:	4b35      	ldr	r3, [pc, #212]	@ (80058b0 <xTaskResumeAll+0x11c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d05e      	beq.n	800589e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057e0:	e02f      	b.n	8005842 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057e2:	4b34      	ldr	r3, [pc, #208]	@ (80058b4 <xTaskResumeAll+0x120>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3318      	adds	r3, #24
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff f85a 	bl	80048a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3304      	adds	r3, #4
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff f855 	bl	80048a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005802:	4b2d      	ldr	r3, [pc, #180]	@ (80058b8 <xTaskResumeAll+0x124>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d903      	bls.n	8005812 <xTaskResumeAll+0x7e>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580e:	4a2a      	ldr	r2, [pc, #168]	@ (80058b8 <xTaskResumeAll+0x124>)
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4a27      	ldr	r2, [pc, #156]	@ (80058bc <xTaskResumeAll+0x128>)
 8005820:	441a      	add	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	3304      	adds	r3, #4
 8005826:	4619      	mov	r1, r3
 8005828:	4610      	mov	r0, r2
 800582a:	f7fe ffe0 	bl	80047ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005832:	4b23      	ldr	r3, [pc, #140]	@ (80058c0 <xTaskResumeAll+0x12c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005838:	429a      	cmp	r2, r3
 800583a:	d302      	bcc.n	8005842 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800583c:	4b21      	ldr	r3, [pc, #132]	@ (80058c4 <xTaskResumeAll+0x130>)
 800583e:	2201      	movs	r2, #1
 8005840:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005842:	4b1c      	ldr	r3, [pc, #112]	@ (80058b4 <xTaskResumeAll+0x120>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1cb      	bne.n	80057e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005850:	f000 fb58 	bl	8005f04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005854:	4b1c      	ldr	r3, [pc, #112]	@ (80058c8 <xTaskResumeAll+0x134>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d010      	beq.n	8005882 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005860:	f000 f846 	bl	80058f0 <xTaskIncrementTick>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800586a:	4b16      	ldr	r3, [pc, #88]	@ (80058c4 <xTaskResumeAll+0x130>)
 800586c:	2201      	movs	r2, #1
 800586e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3b01      	subs	r3, #1
 8005874:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1f1      	bne.n	8005860 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800587c:	4b12      	ldr	r3, [pc, #72]	@ (80058c8 <xTaskResumeAll+0x134>)
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005882:	4b10      	ldr	r3, [pc, #64]	@ (80058c4 <xTaskResumeAll+0x130>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d009      	beq.n	800589e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800588a:	2301      	movs	r3, #1
 800588c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800588e:	4b0f      	ldr	r3, [pc, #60]	@ (80058cc <xTaskResumeAll+0x138>)
 8005890:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800589e:	f001 f8ed 	bl	8006a7c <vPortExitCritical>

	return xAlreadyYielded;
 80058a2:	68bb      	ldr	r3, [r7, #8]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	200010c8 	.word	0x200010c8
 80058b0:	200010a0 	.word	0x200010a0
 80058b4:	20001060 	.word	0x20001060
 80058b8:	200010a8 	.word	0x200010a8
 80058bc:	20000bd0 	.word	0x20000bd0
 80058c0:	20000bcc 	.word	0x20000bcc
 80058c4:	200010b4 	.word	0x200010b4
 80058c8:	200010b0 	.word	0x200010b0
 80058cc:	e000ed04 	.word	0xe000ed04

080058d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058d6:	4b05      	ldr	r3, [pc, #20]	@ (80058ec <xTaskGetTickCount+0x1c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058dc:	687b      	ldr	r3, [r7, #4]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	200010a4 	.word	0x200010a4

080058f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058fa:	4b4f      	ldr	r3, [pc, #316]	@ (8005a38 <xTaskIncrementTick+0x148>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f040 8090 	bne.w	8005a24 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005904:	4b4d      	ldr	r3, [pc, #308]	@ (8005a3c <xTaskIncrementTick+0x14c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3301      	adds	r3, #1
 800590a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800590c:	4a4b      	ldr	r2, [pc, #300]	@ (8005a3c <xTaskIncrementTick+0x14c>)
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d121      	bne.n	800595c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005918:	4b49      	ldr	r3, [pc, #292]	@ (8005a40 <xTaskIncrementTick+0x150>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	603b      	str	r3, [r7, #0]
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop
 8005938:	e7fd      	b.n	8005936 <xTaskIncrementTick+0x46>
 800593a:	4b41      	ldr	r3, [pc, #260]	@ (8005a40 <xTaskIncrementTick+0x150>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	4b40      	ldr	r3, [pc, #256]	@ (8005a44 <xTaskIncrementTick+0x154>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a3e      	ldr	r2, [pc, #248]	@ (8005a40 <xTaskIncrementTick+0x150>)
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	4a3e      	ldr	r2, [pc, #248]	@ (8005a44 <xTaskIncrementTick+0x154>)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a48 <xTaskIncrementTick+0x158>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3301      	adds	r3, #1
 8005954:	4a3c      	ldr	r2, [pc, #240]	@ (8005a48 <xTaskIncrementTick+0x158>)
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	f000 fad4 	bl	8005f04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800595c:	4b3b      	ldr	r3, [pc, #236]	@ (8005a4c <xTaskIncrementTick+0x15c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	429a      	cmp	r2, r3
 8005964:	d349      	bcc.n	80059fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005966:	4b36      	ldr	r3, [pc, #216]	@ (8005a40 <xTaskIncrementTick+0x150>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005970:	4b36      	ldr	r3, [pc, #216]	@ (8005a4c <xTaskIncrementTick+0x15c>)
 8005972:	f04f 32ff 	mov.w	r2, #4294967295
 8005976:	601a      	str	r2, [r3, #0]
					break;
 8005978:	e03f      	b.n	80059fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800597a:	4b31      	ldr	r3, [pc, #196]	@ (8005a40 <xTaskIncrementTick+0x150>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	429a      	cmp	r2, r3
 8005990:	d203      	bcs.n	800599a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005992:	4a2e      	ldr	r2, [pc, #184]	@ (8005a4c <xTaskIncrementTick+0x15c>)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005998:	e02f      	b.n	80059fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	3304      	adds	r3, #4
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe ff82 	bl	80048a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	3318      	adds	r3, #24
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fe ff79 	bl	80048a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ba:	4b25      	ldr	r3, [pc, #148]	@ (8005a50 <xTaskIncrementTick+0x160>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d903      	bls.n	80059ca <xTaskIncrementTick+0xda>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c6:	4a22      	ldr	r2, [pc, #136]	@ (8005a50 <xTaskIncrementTick+0x160>)
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005a54 <xTaskIncrementTick+0x164>)
 80059d8:	441a      	add	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	3304      	adds	r3, #4
 80059de:	4619      	mov	r1, r3
 80059e0:	4610      	mov	r0, r2
 80059e2:	f7fe ff04 	bl	80047ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005a58 <xTaskIncrementTick+0x168>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d3b8      	bcc.n	8005966 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80059f4:	2301      	movs	r3, #1
 80059f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059f8:	e7b5      	b.n	8005966 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059fa:	4b17      	ldr	r3, [pc, #92]	@ (8005a58 <xTaskIncrementTick+0x168>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a00:	4914      	ldr	r1, [pc, #80]	@ (8005a54 <xTaskIncrementTick+0x164>)
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d901      	bls.n	8005a16 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005a12:	2301      	movs	r3, #1
 8005a14:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a16:	4b11      	ldr	r3, [pc, #68]	@ (8005a5c <xTaskIncrementTick+0x16c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e004      	b.n	8005a2e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a24:	4b0e      	ldr	r3, [pc, #56]	@ (8005a60 <xTaskIncrementTick+0x170>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8005a60 <xTaskIncrementTick+0x170>)
 8005a2c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a2e:	697b      	ldr	r3, [r7, #20]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	200010c8 	.word	0x200010c8
 8005a3c:	200010a4 	.word	0x200010a4
 8005a40:	20001058 	.word	0x20001058
 8005a44:	2000105c 	.word	0x2000105c
 8005a48:	200010b8 	.word	0x200010b8
 8005a4c:	200010c0 	.word	0x200010c0
 8005a50:	200010a8 	.word	0x200010a8
 8005a54:	20000bd0 	.word	0x20000bd0
 8005a58:	20000bcc 	.word	0x20000bcc
 8005a5c:	200010b4 	.word	0x200010b4
 8005a60:	200010b0 	.word	0x200010b0

08005a64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a6a:	4b28      	ldr	r3, [pc, #160]	@ (8005b0c <vTaskSwitchContext+0xa8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a72:	4b27      	ldr	r3, [pc, #156]	@ (8005b10 <vTaskSwitchContext+0xac>)
 8005a74:	2201      	movs	r2, #1
 8005a76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a78:	e042      	b.n	8005b00 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005a7a:	4b25      	ldr	r3, [pc, #148]	@ (8005b10 <vTaskSwitchContext+0xac>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a80:	4b24      	ldr	r3, [pc, #144]	@ (8005b14 <vTaskSwitchContext+0xb0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	e011      	b.n	8005aac <vTaskSwitchContext+0x48>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10b      	bne.n	8005aa6 <vTaskSwitchContext+0x42>
	__asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	607b      	str	r3, [r7, #4]
}
 8005aa0:	bf00      	nop
 8005aa2:	bf00      	nop
 8005aa4:	e7fd      	b.n	8005aa2 <vTaskSwitchContext+0x3e>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	491a      	ldr	r1, [pc, #104]	@ (8005b18 <vTaskSwitchContext+0xb4>)
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0e3      	beq.n	8005a88 <vTaskSwitchContext+0x24>
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4a13      	ldr	r2, [pc, #76]	@ (8005b18 <vTaskSwitchContext+0xb4>)
 8005acc:	4413      	add	r3, r2
 8005ace:	60bb      	str	r3, [r7, #8]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d104      	bne.n	8005af0 <vTaskSwitchContext+0x8c>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	605a      	str	r2, [r3, #4]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	4a09      	ldr	r2, [pc, #36]	@ (8005b1c <vTaskSwitchContext+0xb8>)
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	4a06      	ldr	r2, [pc, #24]	@ (8005b14 <vTaskSwitchContext+0xb0>)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6013      	str	r3, [r2, #0]
}
 8005b00:	bf00      	nop
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	200010c8 	.word	0x200010c8
 8005b10:	200010b4 	.word	0x200010b4
 8005b14:	200010a8 	.word	0x200010a8
 8005b18:	20000bd0 	.word	0x20000bd0
 8005b1c:	20000bcc 	.word	0x20000bcc

08005b20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10b      	bne.n	8005b48 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	60fb      	str	r3, [r7, #12]
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	e7fd      	b.n	8005b44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b48:	4b07      	ldr	r3, [pc, #28]	@ (8005b68 <vTaskPlaceOnEventList+0x48>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3318      	adds	r3, #24
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7fe fe70 	bl	8004836 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b56:	2101      	movs	r1, #1
 8005b58:	6838      	ldr	r0, [r7, #0]
 8005b5a:	f000 fa81 	bl	8006060 <prvAddCurrentTaskToDelayedList>
}
 8005b5e:	bf00      	nop
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20000bcc 	.word	0x20000bcc

08005b6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10b      	bne.n	8005b96 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	617b      	str	r3, [r7, #20]
}
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
 8005b94:	e7fd      	b.n	8005b92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b96:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3318      	adds	r3, #24
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f7fe fe25 	bl	80047ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005baa:	f04f 33ff 	mov.w	r3, #4294967295
 8005bae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	68b8      	ldr	r0, [r7, #8]
 8005bb4:	f000 fa54 	bl	8006060 <prvAddCurrentTaskToDelayedList>
	}
 8005bb8:	bf00      	nop
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	20000bcc 	.word	0x20000bcc

08005bc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10b      	bne.n	8005bf2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	60fb      	str	r3, [r7, #12]
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	e7fd      	b.n	8005bee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	3318      	adds	r3, #24
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fe fe56 	bl	80048a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8005c74 <xTaskRemoveFromEventList+0xb0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d11d      	bne.n	8005c40 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe fe4d 	bl	80048a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c12:	4b19      	ldr	r3, [pc, #100]	@ (8005c78 <xTaskRemoveFromEventList+0xb4>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d903      	bls.n	8005c22 <xTaskRemoveFromEventList+0x5e>
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1e:	4a16      	ldr	r2, [pc, #88]	@ (8005c78 <xTaskRemoveFromEventList+0xb4>)
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4a13      	ldr	r2, [pc, #76]	@ (8005c7c <xTaskRemoveFromEventList+0xb8>)
 8005c30:	441a      	add	r2, r3
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	3304      	adds	r3, #4
 8005c36:	4619      	mov	r1, r3
 8005c38:	4610      	mov	r0, r2
 8005c3a:	f7fe fdd8 	bl	80047ee <vListInsertEnd>
 8005c3e:	e005      	b.n	8005c4c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	3318      	adds	r3, #24
 8005c44:	4619      	mov	r1, r3
 8005c46:	480e      	ldr	r0, [pc, #56]	@ (8005c80 <xTaskRemoveFromEventList+0xbc>)
 8005c48:	f7fe fdd1 	bl	80047ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c50:	4b0c      	ldr	r3, [pc, #48]	@ (8005c84 <xTaskRemoveFromEventList+0xc0>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d905      	bls.n	8005c66 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c88 <xTaskRemoveFromEventList+0xc4>)
 8005c60:	2201      	movs	r2, #1
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	e001      	b.n	8005c6a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c6a:	697b      	ldr	r3, [r7, #20]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	200010c8 	.word	0x200010c8
 8005c78:	200010a8 	.word	0x200010a8
 8005c7c:	20000bd0 	.word	0x20000bd0
 8005c80:	20001060 	.word	0x20001060
 8005c84:	20000bcc 	.word	0x20000bcc
 8005c88:	200010b4 	.word	0x200010b4

08005c8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c94:	4b06      	ldr	r3, [pc, #24]	@ (8005cb0 <vTaskInternalSetTimeOutState+0x24>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c9c:	4b05      	ldr	r3, [pc, #20]	@ (8005cb4 <vTaskInternalSetTimeOutState+0x28>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	605a      	str	r2, [r3, #4]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	200010b8 	.word	0x200010b8
 8005cb4:	200010a4 	.word	0x200010a4

08005cb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10b      	bne.n	8005ce0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	613b      	str	r3, [r7, #16]
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	e7fd      	b.n	8005cdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	60fb      	str	r3, [r7, #12]
}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	e7fd      	b.n	8005cfa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005cfe:	f000 fe8b 	bl	8006a18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d02:	4b1d      	ldr	r3, [pc, #116]	@ (8005d78 <xTaskCheckForTimeOut+0xc0>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d102      	bne.n	8005d22 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61fb      	str	r3, [r7, #28]
 8005d20:	e023      	b.n	8005d6a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	4b15      	ldr	r3, [pc, #84]	@ (8005d7c <xTaskCheckForTimeOut+0xc4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d007      	beq.n	8005d3e <xTaskCheckForTimeOut+0x86>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d302      	bcc.n	8005d3e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	61fb      	str	r3, [r7, #28]
 8005d3c:	e015      	b.n	8005d6a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d20b      	bcs.n	8005d60 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	1ad2      	subs	r2, r2, r3
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff ff99 	bl	8005c8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61fb      	str	r3, [r7, #28]
 8005d5e:	e004      	b.n	8005d6a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d66:	2301      	movs	r3, #1
 8005d68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d6a:	f000 fe87 	bl	8006a7c <vPortExitCritical>

	return xReturn;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	200010a4 	.word	0x200010a4
 8005d7c:	200010b8 	.word	0x200010b8

08005d80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d84:	4b03      	ldr	r3, [pc, #12]	@ (8005d94 <vTaskMissedYield+0x14>)
 8005d86:	2201      	movs	r2, #1
 8005d88:	601a      	str	r2, [r3, #0]
}
 8005d8a:	bf00      	nop
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	200010b4 	.word	0x200010b4

08005d98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005da0:	f000 f852 	bl	8005e48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005da4:	4b06      	ldr	r3, [pc, #24]	@ (8005dc0 <prvIdleTask+0x28>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d9f9      	bls.n	8005da0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005dac:	4b05      	ldr	r3, [pc, #20]	@ (8005dc4 <prvIdleTask+0x2c>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005dbc:	e7f0      	b.n	8005da0 <prvIdleTask+0x8>
 8005dbe:	bf00      	nop
 8005dc0:	20000bd0 	.word	0x20000bd0
 8005dc4:	e000ed04 	.word	0xe000ed04

08005dc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dce:	2300      	movs	r3, #0
 8005dd0:	607b      	str	r3, [r7, #4]
 8005dd2:	e00c      	b.n	8005dee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4a12      	ldr	r2, [pc, #72]	@ (8005e28 <prvInitialiseTaskLists+0x60>)
 8005de0:	4413      	add	r3, r2
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fe fcd6 	bl	8004794 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3301      	adds	r3, #1
 8005dec:	607b      	str	r3, [r7, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b37      	cmp	r3, #55	@ 0x37
 8005df2:	d9ef      	bls.n	8005dd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005df4:	480d      	ldr	r0, [pc, #52]	@ (8005e2c <prvInitialiseTaskLists+0x64>)
 8005df6:	f7fe fccd 	bl	8004794 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dfa:	480d      	ldr	r0, [pc, #52]	@ (8005e30 <prvInitialiseTaskLists+0x68>)
 8005dfc:	f7fe fcca 	bl	8004794 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e00:	480c      	ldr	r0, [pc, #48]	@ (8005e34 <prvInitialiseTaskLists+0x6c>)
 8005e02:	f7fe fcc7 	bl	8004794 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e06:	480c      	ldr	r0, [pc, #48]	@ (8005e38 <prvInitialiseTaskLists+0x70>)
 8005e08:	f7fe fcc4 	bl	8004794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e0c:	480b      	ldr	r0, [pc, #44]	@ (8005e3c <prvInitialiseTaskLists+0x74>)
 8005e0e:	f7fe fcc1 	bl	8004794 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e12:	4b0b      	ldr	r3, [pc, #44]	@ (8005e40 <prvInitialiseTaskLists+0x78>)
 8005e14:	4a05      	ldr	r2, [pc, #20]	@ (8005e2c <prvInitialiseTaskLists+0x64>)
 8005e16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e18:	4b0a      	ldr	r3, [pc, #40]	@ (8005e44 <prvInitialiseTaskLists+0x7c>)
 8005e1a:	4a05      	ldr	r2, [pc, #20]	@ (8005e30 <prvInitialiseTaskLists+0x68>)
 8005e1c:	601a      	str	r2, [r3, #0]
}
 8005e1e:	bf00      	nop
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000bd0 	.word	0x20000bd0
 8005e2c:	20001030 	.word	0x20001030
 8005e30:	20001044 	.word	0x20001044
 8005e34:	20001060 	.word	0x20001060
 8005e38:	20001074 	.word	0x20001074
 8005e3c:	2000108c 	.word	0x2000108c
 8005e40:	20001058 	.word	0x20001058
 8005e44:	2000105c 	.word	0x2000105c

08005e48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e4e:	e019      	b.n	8005e84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e50:	f000 fde2 	bl	8006a18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e54:	4b10      	ldr	r3, [pc, #64]	@ (8005e98 <prvCheckTasksWaitingTermination+0x50>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fe fd21 	bl	80048a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e66:	4b0d      	ldr	r3, [pc, #52]	@ (8005e9c <prvCheckTasksWaitingTermination+0x54>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8005e9c <prvCheckTasksWaitingTermination+0x54>)
 8005e6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea0 <prvCheckTasksWaitingTermination+0x58>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	4a0a      	ldr	r2, [pc, #40]	@ (8005ea0 <prvCheckTasksWaitingTermination+0x58>)
 8005e78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e7a:	f000 fdff 	bl	8006a7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f810 	bl	8005ea4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e84:	4b06      	ldr	r3, [pc, #24]	@ (8005ea0 <prvCheckTasksWaitingTermination+0x58>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1e1      	bne.n	8005e50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20001074 	.word	0x20001074
 8005e9c:	200010a0 	.word	0x200010a0
 8005ea0:	20001088 	.word	0x20001088

08005ea4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d108      	bne.n	8005ec8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 ff9c 	bl	8006df8 <vPortFree>
				vPortFree( pxTCB );
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 ff99 	bl	8006df8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ec6:	e019      	b.n	8005efc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d103      	bne.n	8005eda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 ff90 	bl	8006df8 <vPortFree>
	}
 8005ed8:	e010      	b.n	8005efc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d00b      	beq.n	8005efc <prvDeleteTCB+0x58>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	60fb      	str	r3, [r7, #12]
}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	e7fd      	b.n	8005ef8 <prvDeleteTCB+0x54>
	}
 8005efc:	bf00      	nop
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f3c <prvResetNextTaskUnblockTime+0x38>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d104      	bne.n	8005f1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f14:	4b0a      	ldr	r3, [pc, #40]	@ (8005f40 <prvResetNextTaskUnblockTime+0x3c>)
 8005f16:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f1c:	e008      	b.n	8005f30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f1e:	4b07      	ldr	r3, [pc, #28]	@ (8005f3c <prvResetNextTaskUnblockTime+0x38>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	4a04      	ldr	r2, [pc, #16]	@ (8005f40 <prvResetNextTaskUnblockTime+0x3c>)
 8005f2e:	6013      	str	r3, [r2, #0]
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	20001058 	.word	0x20001058
 8005f40:	200010c0 	.word	0x200010c0

08005f44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f78 <xTaskGetSchedulerState+0x34>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f52:	2301      	movs	r3, #1
 8005f54:	607b      	str	r3, [r7, #4]
 8005f56:	e008      	b.n	8005f6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f58:	4b08      	ldr	r3, [pc, #32]	@ (8005f7c <xTaskGetSchedulerState+0x38>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f60:	2302      	movs	r3, #2
 8005f62:	607b      	str	r3, [r7, #4]
 8005f64:	e001      	b.n	8005f6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f66:	2300      	movs	r3, #0
 8005f68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f6a:	687b      	ldr	r3, [r7, #4]
	}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	200010ac 	.word	0x200010ac
 8005f7c:	200010c8 	.word	0x200010c8

08005f80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d058      	beq.n	8006048 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f96:	4b2f      	ldr	r3, [pc, #188]	@ (8006054 <xTaskPriorityDisinherit+0xd4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d00b      	beq.n	8005fb8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	60fb      	str	r3, [r7, #12]
}
 8005fb2:	bf00      	nop
 8005fb4:	bf00      	nop
 8005fb6:	e7fd      	b.n	8005fb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10b      	bne.n	8005fd8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	60bb      	str	r3, [r7, #8]
}
 8005fd2:	bf00      	nop
 8005fd4:	bf00      	nop
 8005fd6:	e7fd      	b.n	8005fd4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fdc:	1e5a      	subs	r2, r3, #1
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d02c      	beq.n	8006048 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d128      	bne.n	8006048 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe fc54 	bl	80048a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006018:	4b0f      	ldr	r3, [pc, #60]	@ (8006058 <xTaskPriorityDisinherit+0xd8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	429a      	cmp	r2, r3
 800601e:	d903      	bls.n	8006028 <xTaskPriorityDisinherit+0xa8>
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006024:	4a0c      	ldr	r2, [pc, #48]	@ (8006058 <xTaskPriorityDisinherit+0xd8>)
 8006026:	6013      	str	r3, [r2, #0]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4a09      	ldr	r2, [pc, #36]	@ (800605c <xTaskPriorityDisinherit+0xdc>)
 8006036:	441a      	add	r2, r3
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	3304      	adds	r3, #4
 800603c:	4619      	mov	r1, r3
 800603e:	4610      	mov	r0, r2
 8006040:	f7fe fbd5 	bl	80047ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006044:	2301      	movs	r3, #1
 8006046:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006048:	697b      	ldr	r3, [r7, #20]
	}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000bcc 	.word	0x20000bcc
 8006058:	200010a8 	.word	0x200010a8
 800605c:	20000bd0 	.word	0x20000bd0

08006060 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800606a:	4b21      	ldr	r3, [pc, #132]	@ (80060f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006070:	4b20      	ldr	r3, [pc, #128]	@ (80060f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3304      	adds	r3, #4
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe fc16 	bl	80048a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006082:	d10a      	bne.n	800609a <prvAddCurrentTaskToDelayedList+0x3a>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800608a:	4b1a      	ldr	r3, [pc, #104]	@ (80060f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3304      	adds	r3, #4
 8006090:	4619      	mov	r1, r3
 8006092:	4819      	ldr	r0, [pc, #100]	@ (80060f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006094:	f7fe fbab 	bl	80047ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006098:	e026      	b.n	80060e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4413      	add	r3, r2
 80060a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060a2:	4b14      	ldr	r3, [pc, #80]	@ (80060f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d209      	bcs.n	80060c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060b2:	4b12      	ldr	r3, [pc, #72]	@ (80060fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	4b0f      	ldr	r3, [pc, #60]	@ (80060f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3304      	adds	r3, #4
 80060bc:	4619      	mov	r1, r3
 80060be:	4610      	mov	r0, r2
 80060c0:	f7fe fbb9 	bl	8004836 <vListInsert>
}
 80060c4:	e010      	b.n	80060e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006100 <prvAddCurrentTaskToDelayedList+0xa0>)
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	4b0a      	ldr	r3, [pc, #40]	@ (80060f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4619      	mov	r1, r3
 80060d2:	4610      	mov	r0, r2
 80060d4:	f7fe fbaf 	bl	8004836 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006104 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d202      	bcs.n	80060e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060e2:	4a08      	ldr	r2, [pc, #32]	@ (8006104 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6013      	str	r3, [r2, #0]
}
 80060e8:	bf00      	nop
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	200010a4 	.word	0x200010a4
 80060f4:	20000bcc 	.word	0x20000bcc
 80060f8:	2000108c 	.word	0x2000108c
 80060fc:	2000105c 	.word	0x2000105c
 8006100:	20001058 	.word	0x20001058
 8006104:	200010c0 	.word	0x200010c0

08006108 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08a      	sub	sp, #40	@ 0x28
 800610c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800610e:	2300      	movs	r3, #0
 8006110:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006112:	f000 fb13 	bl	800673c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006116:	4b1d      	ldr	r3, [pc, #116]	@ (800618c <xTimerCreateTimerTask+0x84>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d021      	beq.n	8006162 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006122:	2300      	movs	r3, #0
 8006124:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006126:	1d3a      	adds	r2, r7, #4
 8006128:	f107 0108 	add.w	r1, r7, #8
 800612c:	f107 030c 	add.w	r3, r7, #12
 8006130:	4618      	mov	r0, r3
 8006132:	f7fe fb15 	bl	8004760 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	9202      	str	r2, [sp, #8]
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	2302      	movs	r3, #2
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	460a      	mov	r2, r1
 8006148:	4911      	ldr	r1, [pc, #68]	@ (8006190 <xTimerCreateTimerTask+0x88>)
 800614a:	4812      	ldr	r0, [pc, #72]	@ (8006194 <xTimerCreateTimerTask+0x8c>)
 800614c:	f7ff f8d0 	bl	80052f0 <xTaskCreateStatic>
 8006150:	4603      	mov	r3, r0
 8006152:	4a11      	ldr	r2, [pc, #68]	@ (8006198 <xTimerCreateTimerTask+0x90>)
 8006154:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006156:	4b10      	ldr	r3, [pc, #64]	@ (8006198 <xTimerCreateTimerTask+0x90>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800615e:	2301      	movs	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10b      	bne.n	8006180 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	613b      	str	r3, [r7, #16]
}
 800617a:	bf00      	nop
 800617c:	bf00      	nop
 800617e:	e7fd      	b.n	800617c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006180:	697b      	ldr	r3, [r7, #20]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	200010fc 	.word	0x200010fc
 8006190:	080070d8 	.word	0x080070d8
 8006194:	080062d5 	.word	0x080062d5
 8006198:	20001100 	.word	0x20001100

0800619c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08a      	sub	sp, #40	@ 0x28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10b      	bne.n	80061cc <xTimerGenericCommand+0x30>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	623b      	str	r3, [r7, #32]
}
 80061c6:	bf00      	nop
 80061c8:	bf00      	nop
 80061ca:	e7fd      	b.n	80061c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061cc:	4b19      	ldr	r3, [pc, #100]	@ (8006234 <xTimerGenericCommand+0x98>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d02a      	beq.n	800622a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b05      	cmp	r3, #5
 80061e4:	dc18      	bgt.n	8006218 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061e6:	f7ff fead 	bl	8005f44 <xTaskGetSchedulerState>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d109      	bne.n	8006204 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061f0:	4b10      	ldr	r3, [pc, #64]	@ (8006234 <xTimerGenericCommand+0x98>)
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	f107 0110 	add.w	r1, r7, #16
 80061f8:	2300      	movs	r3, #0
 80061fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061fc:	f7fe fc88 	bl	8004b10 <xQueueGenericSend>
 8006200:	6278      	str	r0, [r7, #36]	@ 0x24
 8006202:	e012      	b.n	800622a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006204:	4b0b      	ldr	r3, [pc, #44]	@ (8006234 <xTimerGenericCommand+0x98>)
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	f107 0110 	add.w	r1, r7, #16
 800620c:	2300      	movs	r3, #0
 800620e:	2200      	movs	r2, #0
 8006210:	f7fe fc7e 	bl	8004b10 <xQueueGenericSend>
 8006214:	6278      	str	r0, [r7, #36]	@ 0x24
 8006216:	e008      	b.n	800622a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006218:	4b06      	ldr	r3, [pc, #24]	@ (8006234 <xTimerGenericCommand+0x98>)
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	f107 0110 	add.w	r1, r7, #16
 8006220:	2300      	movs	r3, #0
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	f7fe fd76 	bl	8004d14 <xQueueGenericSendFromISR>
 8006228:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800622c:	4618      	mov	r0, r3
 800622e:	3728      	adds	r7, #40	@ 0x28
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	200010fc 	.word	0x200010fc

08006238 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af02      	add	r7, sp, #8
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006242:	4b23      	ldr	r3, [pc, #140]	@ (80062d0 <prvProcessExpiredTimer+0x98>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	3304      	adds	r3, #4
 8006250:	4618      	mov	r0, r3
 8006252:	f7fe fb29 	bl	80048a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d023      	beq.n	80062ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	699a      	ldr	r2, [r3, #24]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	18d1      	adds	r1, r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	6978      	ldr	r0, [r7, #20]
 8006272:	f000 f8d5 	bl	8006420 <prvInsertTimerInActiveList>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d020      	beq.n	80062be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800627c:	2300      	movs	r3, #0
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	2300      	movs	r3, #0
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	2100      	movs	r1, #0
 8006286:	6978      	ldr	r0, [r7, #20]
 8006288:	f7ff ff88 	bl	800619c <xTimerGenericCommand>
 800628c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d114      	bne.n	80062be <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	60fb      	str	r3, [r7, #12]
}
 80062a6:	bf00      	nop
 80062a8:	bf00      	nop
 80062aa:	e7fd      	b.n	80062a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062b2:	f023 0301 	bic.w	r3, r3, #1
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	6978      	ldr	r0, [r7, #20]
 80062c4:	4798      	blx	r3
}
 80062c6:	bf00      	nop
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	200010f4 	.word	0x200010f4

080062d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062dc:	f107 0308 	add.w	r3, r7, #8
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 f859 	bl	8006398 <prvGetNextExpireTime>
 80062e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4619      	mov	r1, r3
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f805 	bl	80062fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062f2:	f000 f8d7 	bl	80064a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062f6:	bf00      	nop
 80062f8:	e7f0      	b.n	80062dc <prvTimerTask+0x8>
	...

080062fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006306:	f7ff fa37 	bl	8005778 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800630a:	f107 0308 	add.w	r3, r7, #8
 800630e:	4618      	mov	r0, r3
 8006310:	f000 f866 	bl	80063e0 <prvSampleTimeNow>
 8006314:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d130      	bne.n	800637e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <prvProcessTimerOrBlockTask+0x3c>
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	429a      	cmp	r2, r3
 8006328:	d806      	bhi.n	8006338 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800632a:	f7ff fa33 	bl	8005794 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800632e:	68f9      	ldr	r1, [r7, #12]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff ff81 	bl	8006238 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006336:	e024      	b.n	8006382 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d008      	beq.n	8006350 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800633e:	4b13      	ldr	r3, [pc, #76]	@ (800638c <prvProcessTimerOrBlockTask+0x90>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <prvProcessTimerOrBlockTask+0x50>
 8006348:	2301      	movs	r3, #1
 800634a:	e000      	b.n	800634e <prvProcessTimerOrBlockTask+0x52>
 800634c:	2300      	movs	r3, #0
 800634e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006350:	4b0f      	ldr	r3, [pc, #60]	@ (8006390 <prvProcessTimerOrBlockTask+0x94>)
 8006352:	6818      	ldr	r0, [r3, #0]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	4619      	mov	r1, r3
 800635e:	f7fe ff93 	bl	8005288 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006362:	f7ff fa17 	bl	8005794 <xTaskResumeAll>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800636c:	4b09      	ldr	r3, [pc, #36]	@ (8006394 <prvProcessTimerOrBlockTask+0x98>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	f3bf 8f6f 	isb	sy
}
 800637c:	e001      	b.n	8006382 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800637e:	f7ff fa09 	bl	8005794 <xTaskResumeAll>
}
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	200010f8 	.word	0x200010f8
 8006390:	200010fc 	.word	0x200010fc
 8006394:	e000ed04 	.word	0xe000ed04

08006398 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063a0:	4b0e      	ldr	r3, [pc, #56]	@ (80063dc <prvGetNextExpireTime+0x44>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <prvGetNextExpireTime+0x16>
 80063aa:	2201      	movs	r2, #1
 80063ac:	e000      	b.n	80063b0 <prvGetNextExpireTime+0x18>
 80063ae:	2200      	movs	r2, #0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063bc:	4b07      	ldr	r3, [pc, #28]	@ (80063dc <prvGetNextExpireTime+0x44>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	e001      	b.n	80063cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80063cc:	68fb      	ldr	r3, [r7, #12]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	200010f4 	.word	0x200010f4

080063e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063e8:	f7ff fa72 	bl	80058d0 <xTaskGetTickCount>
 80063ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063ee:	4b0b      	ldr	r3, [pc, #44]	@ (800641c <prvSampleTimeNow+0x3c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d205      	bcs.n	8006404 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063f8:	f000 f93a 	bl	8006670 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	e002      	b.n	800640a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800640a:	4a04      	ldr	r2, [pc, #16]	@ (800641c <prvSampleTimeNow+0x3c>)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006410:	68fb      	ldr	r3, [r7, #12]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20001104 	.word	0x20001104

08006420 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800642e:	2300      	movs	r3, #0
 8006430:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	429a      	cmp	r2, r3
 8006444:	d812      	bhi.n	800646c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	1ad2      	subs	r2, r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	429a      	cmp	r2, r3
 8006452:	d302      	bcc.n	800645a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006454:	2301      	movs	r3, #1
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	e01b      	b.n	8006492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800645a:	4b10      	ldr	r3, [pc, #64]	@ (800649c <prvInsertTimerInActiveList+0x7c>)
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	3304      	adds	r3, #4
 8006462:	4619      	mov	r1, r3
 8006464:	4610      	mov	r0, r2
 8006466:	f7fe f9e6 	bl	8004836 <vListInsert>
 800646a:	e012      	b.n	8006492 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d206      	bcs.n	8006482 <prvInsertTimerInActiveList+0x62>
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	429a      	cmp	r2, r3
 800647a:	d302      	bcc.n	8006482 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800647c:	2301      	movs	r3, #1
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	e007      	b.n	8006492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006482:	4b07      	ldr	r3, [pc, #28]	@ (80064a0 <prvInsertTimerInActiveList+0x80>)
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3304      	adds	r3, #4
 800648a:	4619      	mov	r1, r3
 800648c:	4610      	mov	r0, r2
 800648e:	f7fe f9d2 	bl	8004836 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006492:	697b      	ldr	r3, [r7, #20]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	200010f8 	.word	0x200010f8
 80064a0:	200010f4 	.word	0x200010f4

080064a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08e      	sub	sp, #56	@ 0x38
 80064a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064aa:	e0ce      	b.n	800664a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	da19      	bge.n	80064e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064b2:	1d3b      	adds	r3, r7, #4
 80064b4:	3304      	adds	r3, #4
 80064b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10b      	bne.n	80064d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	61fb      	str	r3, [r7, #28]
}
 80064d0:	bf00      	nop
 80064d2:	bf00      	nop
 80064d4:	e7fd      	b.n	80064d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064dc:	6850      	ldr	r0, [r2, #4]
 80064de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064e0:	6892      	ldr	r2, [r2, #8]
 80064e2:	4611      	mov	r1, r2
 80064e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f2c0 80ae 	blt.w	800664a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fc:	3304      	adds	r3, #4
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe f9d2 	bl	80048a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006504:	463b      	mov	r3, r7
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff ff6a 	bl	80063e0 <prvSampleTimeNow>
 800650c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b09      	cmp	r3, #9
 8006512:	f200 8097 	bhi.w	8006644 <prvProcessReceivedCommands+0x1a0>
 8006516:	a201      	add	r2, pc, #4	@ (adr r2, 800651c <prvProcessReceivedCommands+0x78>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	08006545 	.word	0x08006545
 8006520:	08006545 	.word	0x08006545
 8006524:	08006545 	.word	0x08006545
 8006528:	080065bb 	.word	0x080065bb
 800652c:	080065cf 	.word	0x080065cf
 8006530:	0800661b 	.word	0x0800661b
 8006534:	08006545 	.word	0x08006545
 8006538:	08006545 	.word	0x08006545
 800653c:	080065bb 	.word	0x080065bb
 8006540:	080065cf 	.word	0x080065cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006546:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800654a:	f043 0301 	orr.w	r3, r3, #1
 800654e:	b2da      	uxtb	r2, r3
 8006550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006552:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	18d1      	adds	r1, r2, r3
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006562:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006564:	f7ff ff5c 	bl	8006420 <prvInsertTimerInActiveList>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d06c      	beq.n	8006648 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800656e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006574:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006578:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d061      	beq.n	8006648 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	441a      	add	r2, r3
 800658c:	2300      	movs	r3, #0
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	2300      	movs	r3, #0
 8006592:	2100      	movs	r1, #0
 8006594:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006596:	f7ff fe01 	bl	800619c <xTimerGenericCommand>
 800659a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d152      	bne.n	8006648 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	61bb      	str	r3, [r7, #24]
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop
 80065b8:	e7fd      	b.n	80065b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065c0:	f023 0301 	bic.w	r3, r3, #1
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80065cc:	e03d      	b.n	800664a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065d4:	f043 0301 	orr.w	r3, r3, #1
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	617b      	str	r3, [r7, #20]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006608:	699a      	ldr	r2, [r3, #24]
 800660a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660c:	18d1      	adds	r1, r2, r3
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006612:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006614:	f7ff ff04 	bl	8006420 <prvInsertTimerInActiveList>
					break;
 8006618:	e017      	b.n	800664a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800661a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d103      	bne.n	8006630 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006628:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800662a:	f000 fbe5 	bl	8006df8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800662e:	e00c      	b.n	800664a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006632:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006636:	f023 0301 	bic.w	r3, r3, #1
 800663a:	b2da      	uxtb	r2, r3
 800663c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006642:	e002      	b.n	800664a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006644:	bf00      	nop
 8006646:	e000      	b.n	800664a <prvProcessReceivedCommands+0x1a6>
					break;
 8006648:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800664a:	4b08      	ldr	r3, [pc, #32]	@ (800666c <prvProcessReceivedCommands+0x1c8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	1d39      	adds	r1, r7, #4
 8006650:	2200      	movs	r2, #0
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe fbfc 	bl	8004e50 <xQueueReceive>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	f47f af26 	bne.w	80064ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006660:	bf00      	nop
 8006662:	bf00      	nop
 8006664:	3730      	adds	r7, #48	@ 0x30
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	200010fc 	.word	0x200010fc

08006670 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006676:	e049      	b.n	800670c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006678:	4b2e      	ldr	r3, [pc, #184]	@ (8006734 <prvSwitchTimerLists+0xc4>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006682:	4b2c      	ldr	r3, [pc, #176]	@ (8006734 <prvSwitchTimerLists+0xc4>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3304      	adds	r3, #4
 8006690:	4618      	mov	r0, r3
 8006692:	f7fe f909 	bl	80048a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d02f      	beq.n	800670c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4413      	add	r3, r2
 80066b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d90e      	bls.n	80066dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066ca:	4b1a      	ldr	r3, [pc, #104]	@ (8006734 <prvSwitchTimerLists+0xc4>)
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3304      	adds	r3, #4
 80066d2:	4619      	mov	r1, r3
 80066d4:	4610      	mov	r0, r2
 80066d6:	f7fe f8ae 	bl	8004836 <vListInsert>
 80066da:	e017      	b.n	800670c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066dc:	2300      	movs	r3, #0
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	2300      	movs	r3, #0
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	2100      	movs	r1, #0
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff fd58 	bl	800619c <xTimerGenericCommand>
 80066ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10b      	bne.n	800670c <prvSwitchTimerLists+0x9c>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	603b      	str	r3, [r7, #0]
}
 8006706:	bf00      	nop
 8006708:	bf00      	nop
 800670a:	e7fd      	b.n	8006708 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800670c:	4b09      	ldr	r3, [pc, #36]	@ (8006734 <prvSwitchTimerLists+0xc4>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1b0      	bne.n	8006678 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006716:	4b07      	ldr	r3, [pc, #28]	@ (8006734 <prvSwitchTimerLists+0xc4>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800671c:	4b06      	ldr	r3, [pc, #24]	@ (8006738 <prvSwitchTimerLists+0xc8>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a04      	ldr	r2, [pc, #16]	@ (8006734 <prvSwitchTimerLists+0xc4>)
 8006722:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006724:	4a04      	ldr	r2, [pc, #16]	@ (8006738 <prvSwitchTimerLists+0xc8>)
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	6013      	str	r3, [r2, #0]
}
 800672a:	bf00      	nop
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	200010f4 	.word	0x200010f4
 8006738:	200010f8 	.word	0x200010f8

0800673c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006742:	f000 f969 	bl	8006a18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006746:	4b15      	ldr	r3, [pc, #84]	@ (800679c <prvCheckForValidListAndQueue+0x60>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d120      	bne.n	8006790 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800674e:	4814      	ldr	r0, [pc, #80]	@ (80067a0 <prvCheckForValidListAndQueue+0x64>)
 8006750:	f7fe f820 	bl	8004794 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006754:	4813      	ldr	r0, [pc, #76]	@ (80067a4 <prvCheckForValidListAndQueue+0x68>)
 8006756:	f7fe f81d 	bl	8004794 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800675a:	4b13      	ldr	r3, [pc, #76]	@ (80067a8 <prvCheckForValidListAndQueue+0x6c>)
 800675c:	4a10      	ldr	r2, [pc, #64]	@ (80067a0 <prvCheckForValidListAndQueue+0x64>)
 800675e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006760:	4b12      	ldr	r3, [pc, #72]	@ (80067ac <prvCheckForValidListAndQueue+0x70>)
 8006762:	4a10      	ldr	r2, [pc, #64]	@ (80067a4 <prvCheckForValidListAndQueue+0x68>)
 8006764:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006766:	2300      	movs	r3, #0
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	4b11      	ldr	r3, [pc, #68]	@ (80067b0 <prvCheckForValidListAndQueue+0x74>)
 800676c:	4a11      	ldr	r2, [pc, #68]	@ (80067b4 <prvCheckForValidListAndQueue+0x78>)
 800676e:	2110      	movs	r1, #16
 8006770:	200a      	movs	r0, #10
 8006772:	f7fe f92d 	bl	80049d0 <xQueueGenericCreateStatic>
 8006776:	4603      	mov	r3, r0
 8006778:	4a08      	ldr	r2, [pc, #32]	@ (800679c <prvCheckForValidListAndQueue+0x60>)
 800677a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800677c:	4b07      	ldr	r3, [pc, #28]	@ (800679c <prvCheckForValidListAndQueue+0x60>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006784:	4b05      	ldr	r3, [pc, #20]	@ (800679c <prvCheckForValidListAndQueue+0x60>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	490b      	ldr	r1, [pc, #44]	@ (80067b8 <prvCheckForValidListAndQueue+0x7c>)
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fd52 	bl	8005234 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006790:	f000 f974 	bl	8006a7c <vPortExitCritical>
}
 8006794:	bf00      	nop
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	200010fc 	.word	0x200010fc
 80067a0:	200010cc 	.word	0x200010cc
 80067a4:	200010e0 	.word	0x200010e0
 80067a8:	200010f4 	.word	0x200010f4
 80067ac:	200010f8 	.word	0x200010f8
 80067b0:	200011a8 	.word	0x200011a8
 80067b4:	20001108 	.word	0x20001108
 80067b8:	080070e0 	.word	0x080070e0

080067bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3b04      	subs	r3, #4
 80067cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3b04      	subs	r3, #4
 80067da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f023 0201 	bic.w	r2, r3, #1
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3b04      	subs	r3, #4
 80067ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067ec:	4a0c      	ldr	r2, [pc, #48]	@ (8006820 <pxPortInitialiseStack+0x64>)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3b14      	subs	r3, #20
 80067f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	3b04      	subs	r3, #4
 8006802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f06f 0202 	mvn.w	r2, #2
 800680a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3b20      	subs	r3, #32
 8006810:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006812:	68fb      	ldr	r3, [r7, #12]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	08006825 	.word	0x08006825

08006824 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800682e:	4b13      	ldr	r3, [pc, #76]	@ (800687c <prvTaskExitError+0x58>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006836:	d00b      	beq.n	8006850 <prvTaskExitError+0x2c>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	60fb      	str	r3, [r7, #12]
}
 800684a:	bf00      	nop
 800684c:	bf00      	nop
 800684e:	e7fd      	b.n	800684c <prvTaskExitError+0x28>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	60bb      	str	r3, [r7, #8]
}
 8006862:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006864:	bf00      	nop
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0fc      	beq.n	8006866 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800686c:	bf00      	nop
 800686e:	bf00      	nop
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	2000000c 	.word	0x2000000c

08006880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006880:	4b07      	ldr	r3, [pc, #28]	@ (80068a0 <pxCurrentTCBConst2>)
 8006882:	6819      	ldr	r1, [r3, #0]
 8006884:	6808      	ldr	r0, [r1, #0]
 8006886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688a:	f380 8809 	msr	PSP, r0
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f04f 0000 	mov.w	r0, #0
 8006896:	f380 8811 	msr	BASEPRI, r0
 800689a:	4770      	bx	lr
 800689c:	f3af 8000 	nop.w

080068a0 <pxCurrentTCBConst2>:
 80068a0:	20000bcc 	.word	0x20000bcc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop

080068a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068a8:	4808      	ldr	r0, [pc, #32]	@ (80068cc <prvPortStartFirstTask+0x24>)
 80068aa:	6800      	ldr	r0, [r0, #0]
 80068ac:	6800      	ldr	r0, [r0, #0]
 80068ae:	f380 8808 	msr	MSP, r0
 80068b2:	f04f 0000 	mov.w	r0, #0
 80068b6:	f380 8814 	msr	CONTROL, r0
 80068ba:	b662      	cpsie	i
 80068bc:	b661      	cpsie	f
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	df00      	svc	0
 80068c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068ca:	bf00      	nop
 80068cc:	e000ed08 	.word	0xe000ed08

080068d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068d6:	4b47      	ldr	r3, [pc, #284]	@ (80069f4 <xPortStartScheduler+0x124>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a47      	ldr	r2, [pc, #284]	@ (80069f8 <xPortStartScheduler+0x128>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d10b      	bne.n	80068f8 <xPortStartScheduler+0x28>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	60fb      	str	r3, [r7, #12]
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	e7fd      	b.n	80068f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068f8:	4b3e      	ldr	r3, [pc, #248]	@ (80069f4 <xPortStartScheduler+0x124>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a3f      	ldr	r2, [pc, #252]	@ (80069fc <xPortStartScheduler+0x12c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d10b      	bne.n	800691a <xPortStartScheduler+0x4a>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	613b      	str	r3, [r7, #16]
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop
 8006918:	e7fd      	b.n	8006916 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800691a:	4b39      	ldr	r3, [pc, #228]	@ (8006a00 <xPortStartScheduler+0x130>)
 800691c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	22ff      	movs	r2, #255	@ 0xff
 800692a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	b2db      	uxtb	r3, r3
 8006932:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	b2db      	uxtb	r3, r3
 8006938:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800693c:	b2da      	uxtb	r2, r3
 800693e:	4b31      	ldr	r3, [pc, #196]	@ (8006a04 <xPortStartScheduler+0x134>)
 8006940:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006942:	4b31      	ldr	r3, [pc, #196]	@ (8006a08 <xPortStartScheduler+0x138>)
 8006944:	2207      	movs	r2, #7
 8006946:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006948:	e009      	b.n	800695e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800694a:	4b2f      	ldr	r3, [pc, #188]	@ (8006a08 <xPortStartScheduler+0x138>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3b01      	subs	r3, #1
 8006950:	4a2d      	ldr	r2, [pc, #180]	@ (8006a08 <xPortStartScheduler+0x138>)
 8006952:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	b2db      	uxtb	r3, r3
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	b2db      	uxtb	r3, r3
 800695c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	b2db      	uxtb	r3, r3
 8006962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006966:	2b80      	cmp	r3, #128	@ 0x80
 8006968:	d0ef      	beq.n	800694a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800696a:	4b27      	ldr	r3, [pc, #156]	@ (8006a08 <xPortStartScheduler+0x138>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f1c3 0307 	rsb	r3, r3, #7
 8006972:	2b04      	cmp	r3, #4
 8006974:	d00b      	beq.n	800698e <xPortStartScheduler+0xbe>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	60bb      	str	r3, [r7, #8]
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	e7fd      	b.n	800698a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800698e:	4b1e      	ldr	r3, [pc, #120]	@ (8006a08 <xPortStartScheduler+0x138>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	4a1c      	ldr	r2, [pc, #112]	@ (8006a08 <xPortStartScheduler+0x138>)
 8006996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006998:	4b1b      	ldr	r3, [pc, #108]	@ (8006a08 <xPortStartScheduler+0x138>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80069a0:	4a19      	ldr	r2, [pc, #100]	@ (8006a08 <xPortStartScheduler+0x138>)
 80069a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069ac:	4b17      	ldr	r3, [pc, #92]	@ (8006a0c <xPortStartScheduler+0x13c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a16      	ldr	r2, [pc, #88]	@ (8006a0c <xPortStartScheduler+0x13c>)
 80069b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80069b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069b8:	4b14      	ldr	r3, [pc, #80]	@ (8006a0c <xPortStartScheduler+0x13c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a13      	ldr	r2, [pc, #76]	@ (8006a0c <xPortStartScheduler+0x13c>)
 80069be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80069c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069c4:	f000 f8da 	bl	8006b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069c8:	4b11      	ldr	r3, [pc, #68]	@ (8006a10 <xPortStartScheduler+0x140>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069ce:	f000 f8f9 	bl	8006bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069d2:	4b10      	ldr	r3, [pc, #64]	@ (8006a14 <xPortStartScheduler+0x144>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a0f      	ldr	r2, [pc, #60]	@ (8006a14 <xPortStartScheduler+0x144>)
 80069d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80069dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069de:	f7ff ff63 	bl	80068a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069e2:	f7ff f83f 	bl	8005a64 <vTaskSwitchContext>
	prvTaskExitError();
 80069e6:	f7ff ff1d 	bl	8006824 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	e000ed00 	.word	0xe000ed00
 80069f8:	410fc271 	.word	0x410fc271
 80069fc:	410fc270 	.word	0x410fc270
 8006a00:	e000e400 	.word	0xe000e400
 8006a04:	200011f8 	.word	0x200011f8
 8006a08:	200011fc 	.word	0x200011fc
 8006a0c:	e000ed20 	.word	0xe000ed20
 8006a10:	2000000c 	.word	0x2000000c
 8006a14:	e000ef34 	.word	0xe000ef34

08006a18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	607b      	str	r3, [r7, #4]
}
 8006a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a32:	4b10      	ldr	r3, [pc, #64]	@ (8006a74 <vPortEnterCritical+0x5c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3301      	adds	r3, #1
 8006a38:	4a0e      	ldr	r2, [pc, #56]	@ (8006a74 <vPortEnterCritical+0x5c>)
 8006a3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a74 <vPortEnterCritical+0x5c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d110      	bne.n	8006a66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a44:	4b0c      	ldr	r3, [pc, #48]	@ (8006a78 <vPortEnterCritical+0x60>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00b      	beq.n	8006a66 <vPortEnterCritical+0x4e>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	603b      	str	r3, [r7, #0]
}
 8006a60:	bf00      	nop
 8006a62:	bf00      	nop
 8006a64:	e7fd      	b.n	8006a62 <vPortEnterCritical+0x4a>
	}
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	2000000c 	.word	0x2000000c
 8006a78:	e000ed04 	.word	0xe000ed04

08006a7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a82:	4b12      	ldr	r3, [pc, #72]	@ (8006acc <vPortExitCritical+0x50>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10b      	bne.n	8006aa2 <vPortExitCritical+0x26>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	607b      	str	r3, [r7, #4]
}
 8006a9c:	bf00      	nop
 8006a9e:	bf00      	nop
 8006aa0:	e7fd      	b.n	8006a9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8006acc <vPortExitCritical+0x50>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	4a08      	ldr	r2, [pc, #32]	@ (8006acc <vPortExitCritical+0x50>)
 8006aaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006aac:	4b07      	ldr	r3, [pc, #28]	@ (8006acc <vPortExitCritical+0x50>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d105      	bne.n	8006ac0 <vPortExitCritical+0x44>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	f383 8811 	msr	BASEPRI, r3
}
 8006abe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	2000000c 	.word	0x2000000c

08006ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ad0:	f3ef 8009 	mrs	r0, PSP
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	4b15      	ldr	r3, [pc, #84]	@ (8006b30 <pxCurrentTCBConst>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	f01e 0f10 	tst.w	lr, #16
 8006ae0:	bf08      	it	eq
 8006ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aea:	6010      	str	r0, [r2, #0]
 8006aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006af0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006af4:	f380 8811 	msr	BASEPRI, r0
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f7fe ffb0 	bl	8005a64 <vTaskSwitchContext>
 8006b04:	f04f 0000 	mov.w	r0, #0
 8006b08:	f380 8811 	msr	BASEPRI, r0
 8006b0c:	bc09      	pop	{r0, r3}
 8006b0e:	6819      	ldr	r1, [r3, #0]
 8006b10:	6808      	ldr	r0, [r1, #0]
 8006b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b16:	f01e 0f10 	tst.w	lr, #16
 8006b1a:	bf08      	it	eq
 8006b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b20:	f380 8809 	msr	PSP, r0
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	f3af 8000 	nop.w

08006b30 <pxCurrentTCBConst>:
 8006b30:	20000bcc 	.word	0x20000bcc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop

08006b38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	607b      	str	r3, [r7, #4]
}
 8006b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b52:	f7fe fecd 	bl	80058f0 <xTaskIncrementTick>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b5c:	4b06      	ldr	r3, [pc, #24]	@ (8006b78 <xPortSysTickHandler+0x40>)
 8006b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	2300      	movs	r3, #0
 8006b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	f383 8811 	msr	BASEPRI, r3
}
 8006b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b70:	bf00      	nop
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b80:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb0 <vPortSetupTimerInterrupt+0x34>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b86:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb4 <vPortSetupTimerInterrupt+0x38>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb8 <vPortSetupTimerInterrupt+0x3c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a0a      	ldr	r2, [pc, #40]	@ (8006bbc <vPortSetupTimerInterrupt+0x40>)
 8006b92:	fba2 2303 	umull	r2, r3, r2, r3
 8006b96:	099b      	lsrs	r3, r3, #6
 8006b98:	4a09      	ldr	r2, [pc, #36]	@ (8006bc0 <vPortSetupTimerInterrupt+0x44>)
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b9e:	4b04      	ldr	r3, [pc, #16]	@ (8006bb0 <vPortSetupTimerInterrupt+0x34>)
 8006ba0:	2207      	movs	r2, #7
 8006ba2:	601a      	str	r2, [r3, #0]
}
 8006ba4:	bf00      	nop
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	e000e010 	.word	0xe000e010
 8006bb4:	e000e018 	.word	0xe000e018
 8006bb8:	20000000 	.word	0x20000000
 8006bbc:	10624dd3 	.word	0x10624dd3
 8006bc0:	e000e014 	.word	0xe000e014

08006bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006bd4 <vPortEnableVFP+0x10>
 8006bc8:	6801      	ldr	r1, [r0, #0]
 8006bca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006bce:	6001      	str	r1, [r0, #0]
 8006bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006bd2:	bf00      	nop
 8006bd4:	e000ed88 	.word	0xe000ed88

08006bd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bde:	f3ef 8305 	mrs	r3, IPSR
 8006be2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b0f      	cmp	r3, #15
 8006be8:	d915      	bls.n	8006c16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bea:	4a18      	ldr	r2, [pc, #96]	@ (8006c4c <vPortValidateInterruptPriority+0x74>)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bf4:	4b16      	ldr	r3, [pc, #88]	@ (8006c50 <vPortValidateInterruptPriority+0x78>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	7afa      	ldrb	r2, [r7, #11]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d20b      	bcs.n	8006c16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	607b      	str	r3, [r7, #4]
}
 8006c10:	bf00      	nop
 8006c12:	bf00      	nop
 8006c14:	e7fd      	b.n	8006c12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c16:	4b0f      	ldr	r3, [pc, #60]	@ (8006c54 <vPortValidateInterruptPriority+0x7c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c58 <vPortValidateInterruptPriority+0x80>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d90b      	bls.n	8006c3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	603b      	str	r3, [r7, #0]
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	e7fd      	b.n	8006c3a <vPortValidateInterruptPriority+0x62>
	}
 8006c3e:	bf00      	nop
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	e000e3f0 	.word	0xe000e3f0
 8006c50:	200011f8 	.word	0x200011f8
 8006c54:	e000ed0c 	.word	0xe000ed0c
 8006c58:	200011fc 	.word	0x200011fc

08006c5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08a      	sub	sp, #40	@ 0x28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c64:	2300      	movs	r3, #0
 8006c66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c68:	f7fe fd86 	bl	8005778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8006de0 <pvPortMalloc+0x184>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c74:	f000 f924 	bl	8006ec0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c78:	4b5a      	ldr	r3, [pc, #360]	@ (8006de4 <pvPortMalloc+0x188>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f040 8095 	bne.w	8006db0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d01e      	beq.n	8006cca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006c8c:	2208      	movs	r2, #8
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4413      	add	r3, r2
 8006c92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d015      	beq.n	8006cca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f023 0307 	bic.w	r3, r3, #7
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f003 0307 	and.w	r3, r3, #7
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00b      	beq.n	8006cca <pvPortMalloc+0x6e>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	617b      	str	r3, [r7, #20]
}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop
 8006cc8:	e7fd      	b.n	8006cc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d06f      	beq.n	8006db0 <pvPortMalloc+0x154>
 8006cd0:	4b45      	ldr	r3, [pc, #276]	@ (8006de8 <pvPortMalloc+0x18c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d86a      	bhi.n	8006db0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cda:	4b44      	ldr	r3, [pc, #272]	@ (8006dec <pvPortMalloc+0x190>)
 8006cdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cde:	4b43      	ldr	r3, [pc, #268]	@ (8006dec <pvPortMalloc+0x190>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ce4:	e004      	b.n	8006cf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d903      	bls.n	8006d02 <pvPortMalloc+0xa6>
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1f1      	bne.n	8006ce6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d02:	4b37      	ldr	r3, [pc, #220]	@ (8006de0 <pvPortMalloc+0x184>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d051      	beq.n	8006db0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d0c:	6a3b      	ldr	r3, [r7, #32]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2208      	movs	r2, #8
 8006d12:	4413      	add	r3, r2
 8006d14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	1ad2      	subs	r2, r2, r3
 8006d26:	2308      	movs	r3, #8
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d920      	bls.n	8006d70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4413      	add	r3, r2
 8006d34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00b      	beq.n	8006d58 <pvPortMalloc+0xfc>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	613b      	str	r3, [r7, #16]
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	e7fd      	b.n	8006d54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	1ad2      	subs	r2, r2, r3
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d6a:	69b8      	ldr	r0, [r7, #24]
 8006d6c:	f000 f90a 	bl	8006f84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d70:	4b1d      	ldr	r3, [pc, #116]	@ (8006de8 <pvPortMalloc+0x18c>)
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006de8 <pvPortMalloc+0x18c>)
 8006d7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006de8 <pvPortMalloc+0x18c>)
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	4b1b      	ldr	r3, [pc, #108]	@ (8006df0 <pvPortMalloc+0x194>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d203      	bcs.n	8006d92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d8a:	4b17      	ldr	r3, [pc, #92]	@ (8006de8 <pvPortMalloc+0x18c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a18      	ldr	r2, [pc, #96]	@ (8006df0 <pvPortMalloc+0x194>)
 8006d90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	4b13      	ldr	r3, [pc, #76]	@ (8006de4 <pvPortMalloc+0x188>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006da6:	4b13      	ldr	r3, [pc, #76]	@ (8006df4 <pvPortMalloc+0x198>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	3301      	adds	r3, #1
 8006dac:	4a11      	ldr	r2, [pc, #68]	@ (8006df4 <pvPortMalloc+0x198>)
 8006dae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006db0:	f7fe fcf0 	bl	8005794 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00b      	beq.n	8006dd6 <pvPortMalloc+0x17a>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	60fb      	str	r3, [r7, #12]
}
 8006dd0:	bf00      	nop
 8006dd2:	bf00      	nop
 8006dd4:	e7fd      	b.n	8006dd2 <pvPortMalloc+0x176>
	return pvReturn;
 8006dd6:	69fb      	ldr	r3, [r7, #28]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3728      	adds	r7, #40	@ 0x28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20004e08 	.word	0x20004e08
 8006de4:	20004e1c 	.word	0x20004e1c
 8006de8:	20004e0c 	.word	0x20004e0c
 8006dec:	20004e00 	.word	0x20004e00
 8006df0:	20004e10 	.word	0x20004e10
 8006df4:	20004e14 	.word	0x20004e14

08006df8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d04f      	beq.n	8006eaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e0a:	2308      	movs	r3, #8
 8006e0c:	425b      	negs	r3, r3
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	4413      	add	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	4b25      	ldr	r3, [pc, #148]	@ (8006eb4 <vPortFree+0xbc>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4013      	ands	r3, r2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10b      	bne.n	8006e3e <vPortFree+0x46>
	__asm volatile
 8006e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	60fb      	str	r3, [r7, #12]
}
 8006e38:	bf00      	nop
 8006e3a:	bf00      	nop
 8006e3c:	e7fd      	b.n	8006e3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00b      	beq.n	8006e5e <vPortFree+0x66>
	__asm volatile
 8006e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	60bb      	str	r3, [r7, #8]
}
 8006e58:	bf00      	nop
 8006e5a:	bf00      	nop
 8006e5c:	e7fd      	b.n	8006e5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	4b14      	ldr	r3, [pc, #80]	@ (8006eb4 <vPortFree+0xbc>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4013      	ands	r3, r2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01e      	beq.n	8006eaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d11a      	bne.n	8006eaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb4 <vPortFree+0xbc>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	43db      	mvns	r3, r3
 8006e7e:	401a      	ands	r2, r3
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e84:	f7fe fc78 	bl	8005778 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb8 <vPortFree+0xc0>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4413      	add	r3, r2
 8006e92:	4a09      	ldr	r2, [pc, #36]	@ (8006eb8 <vPortFree+0xc0>)
 8006e94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e96:	6938      	ldr	r0, [r7, #16]
 8006e98:	f000 f874 	bl	8006f84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e9c:	4b07      	ldr	r3, [pc, #28]	@ (8006ebc <vPortFree+0xc4>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	4a06      	ldr	r2, [pc, #24]	@ (8006ebc <vPortFree+0xc4>)
 8006ea4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006ea6:	f7fe fc75 	bl	8005794 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006eaa:	bf00      	nop
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20004e1c 	.word	0x20004e1c
 8006eb8:	20004e0c 	.word	0x20004e0c
 8006ebc:	20004e18 	.word	0x20004e18

08006ec0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ec6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006eca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ecc:	4b27      	ldr	r3, [pc, #156]	@ (8006f6c <prvHeapInit+0xac>)
 8006ece:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f003 0307 	and.w	r3, r3, #7
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00c      	beq.n	8006ef4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3307      	adds	r3, #7
 8006ede:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0307 	bic.w	r3, r3, #7
 8006ee6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	4a1f      	ldr	r2, [pc, #124]	@ (8006f6c <prvHeapInit+0xac>)
 8006ef0:	4413      	add	r3, r2
 8006ef2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f70 <prvHeapInit+0xb0>)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006efe:	4b1c      	ldr	r3, [pc, #112]	@ (8006f70 <prvHeapInit+0xb0>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	4413      	add	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f0c:	2208      	movs	r2, #8
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	1a9b      	subs	r3, r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0307 	bic.w	r3, r3, #7
 8006f1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4a15      	ldr	r2, [pc, #84]	@ (8006f74 <prvHeapInit+0xb4>)
 8006f20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f22:	4b14      	ldr	r3, [pc, #80]	@ (8006f74 <prvHeapInit+0xb4>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2200      	movs	r2, #0
 8006f28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f2a:	4b12      	ldr	r3, [pc, #72]	@ (8006f74 <prvHeapInit+0xb4>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	1ad2      	subs	r2, r2, r3
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f40:	4b0c      	ldr	r3, [pc, #48]	@ (8006f74 <prvHeapInit+0xb4>)
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8006f78 <prvHeapInit+0xb8>)
 8006f4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	4a09      	ldr	r2, [pc, #36]	@ (8006f7c <prvHeapInit+0xbc>)
 8006f56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f58:	4b09      	ldr	r3, [pc, #36]	@ (8006f80 <prvHeapInit+0xc0>)
 8006f5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006f5e:	601a      	str	r2, [r3, #0]
}
 8006f60:	bf00      	nop
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	20001200 	.word	0x20001200
 8006f70:	20004e00 	.word	0x20004e00
 8006f74:	20004e08 	.word	0x20004e08
 8006f78:	20004e10 	.word	0x20004e10
 8006f7c:	20004e0c 	.word	0x20004e0c
 8006f80:	20004e1c 	.word	0x20004e1c

08006f84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f8c:	4b28      	ldr	r3, [pc, #160]	@ (8007030 <prvInsertBlockIntoFreeList+0xac>)
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	e002      	b.n	8006f98 <prvInsertBlockIntoFreeList+0x14>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d8f7      	bhi.n	8006f92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	4413      	add	r3, r2
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d108      	bne.n	8006fc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	441a      	add	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	441a      	add	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d118      	bne.n	800700c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	4b15      	ldr	r3, [pc, #84]	@ (8007034 <prvInsertBlockIntoFreeList+0xb0>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d00d      	beq.n	8007002 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	441a      	add	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	601a      	str	r2, [r3, #0]
 8007000:	e008      	b.n	8007014 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007002:	4b0c      	ldr	r3, [pc, #48]	@ (8007034 <prvInsertBlockIntoFreeList+0xb0>)
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	e003      	b.n	8007014 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	429a      	cmp	r2, r3
 800701a:	d002      	beq.n	8007022 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007022:	bf00      	nop
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20004e00 	.word	0x20004e00
 8007034:	20004e08 	.word	0x20004e08

08007038 <memset>:
 8007038:	4402      	add	r2, r0
 800703a:	4603      	mov	r3, r0
 800703c:	4293      	cmp	r3, r2
 800703e:	d100      	bne.n	8007042 <memset+0xa>
 8007040:	4770      	bx	lr
 8007042:	f803 1b01 	strb.w	r1, [r3], #1
 8007046:	e7f9      	b.n	800703c <memset+0x4>

08007048 <__libc_init_array>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	4d0d      	ldr	r5, [pc, #52]	@ (8007080 <__libc_init_array+0x38>)
 800704c:	4c0d      	ldr	r4, [pc, #52]	@ (8007084 <__libc_init_array+0x3c>)
 800704e:	1b64      	subs	r4, r4, r5
 8007050:	10a4      	asrs	r4, r4, #2
 8007052:	2600      	movs	r6, #0
 8007054:	42a6      	cmp	r6, r4
 8007056:	d109      	bne.n	800706c <__libc_init_array+0x24>
 8007058:	4d0b      	ldr	r5, [pc, #44]	@ (8007088 <__libc_init_array+0x40>)
 800705a:	4c0c      	ldr	r4, [pc, #48]	@ (800708c <__libc_init_array+0x44>)
 800705c:	f000 f826 	bl	80070ac <_init>
 8007060:	1b64      	subs	r4, r4, r5
 8007062:	10a4      	asrs	r4, r4, #2
 8007064:	2600      	movs	r6, #0
 8007066:	42a6      	cmp	r6, r4
 8007068:	d105      	bne.n	8007076 <__libc_init_array+0x2e>
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007070:	4798      	blx	r3
 8007072:	3601      	adds	r6, #1
 8007074:	e7ee      	b.n	8007054 <__libc_init_array+0xc>
 8007076:	f855 3b04 	ldr.w	r3, [r5], #4
 800707a:	4798      	blx	r3
 800707c:	3601      	adds	r6, #1
 800707e:	e7f2      	b.n	8007066 <__libc_init_array+0x1e>
 8007080:	08007134 	.word	0x08007134
 8007084:	08007134 	.word	0x08007134
 8007088:	08007134 	.word	0x08007134
 800708c:	08007138 	.word	0x08007138

08007090 <memcpy>:
 8007090:	440a      	add	r2, r1
 8007092:	4291      	cmp	r1, r2
 8007094:	f100 33ff 	add.w	r3, r0, #4294967295
 8007098:	d100      	bne.n	800709c <memcpy+0xc>
 800709a:	4770      	bx	lr
 800709c:	b510      	push	{r4, lr}
 800709e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070a6:	4291      	cmp	r1, r2
 80070a8:	d1f9      	bne.n	800709e <memcpy+0xe>
 80070aa:	bd10      	pop	{r4, pc}

080070ac <_init>:
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	bf00      	nop
 80070b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b2:	bc08      	pop	{r3}
 80070b4:	469e      	mov	lr, r3
 80070b6:	4770      	bx	lr

080070b8 <_fini>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	bf00      	nop
 80070bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070be:	bc08      	pop	{r3}
 80070c0:	469e      	mov	lr, r3
 80070c2:	4770      	bx	lr
