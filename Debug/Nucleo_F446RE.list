
Nucleo_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007504  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080076d4  080076d4  000086d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d4  080077d4  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080077d4  080077d4  000087d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077dc  080077dc  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077dc  080077dc  000087dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077e0  080077e0  000087e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080077e4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005354  20000010  080077f4  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005364  080077f4  00009364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020d3b  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004730  00000000  00000000  00029d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d18  00000000  00000000  0002e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016bb  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c34  00000000  00000000  00031883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000225a4  00000000  00000000  000364b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee4ca  00000000  00000000  00058a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146f25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c1c  00000000  00000000  00146f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0014eb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080076bc 	.word	0x080076bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	080076bc 	.word	0x080076bc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <LcdToggleE>:
* Toggling the LCD Enable Pin
*
************************************************/

void LcdToggleE(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	LCD_E_1();
 8000540:	2201      	movs	r2, #1
 8000542:	2180      	movs	r1, #128	@ 0x80
 8000544:	4807      	ldr	r0, [pc, #28]	@ (8000564 <LcdToggleE+0x28>)
 8000546:	f002 f987 	bl	8002858 <HAL_GPIO_WritePin>
	DELAY_MS(1);
 800054a:	2001      	movs	r0, #1
 800054c:	f001 f8a8 	bl	80016a0 <HAL_Delay>
	LCD_E_0();
 8000550:	2200      	movs	r2, #0
 8000552:	2180      	movs	r1, #128	@ 0x80
 8000554:	4803      	ldr	r0, [pc, #12]	@ (8000564 <LcdToggleE+0x28>)
 8000556:	f002 f97f 	bl	8002858 <HAL_GPIO_WritePin>
	DELAY_MS(1);
 800055a:	2001      	movs	r0, #1
 800055c:	f001 f8a0 	bl	80016a0 <HAL_Delay>
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40020800 	.word	0x40020800

08000568 <LcdWrite>:


void LcdWrite(uint8_t data, uint8_t rs)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	460a      	mov	r2, r1
 8000572:	71fb      	strb	r3, [r7, #7]
 8000574:	4613      	mov	r3, r2
 8000576:	71bb      	strb	r3, [r7, #6]
	if (rs == 1)
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d106      	bne.n	800058c <LcdWrite+0x24>
	{
		LCD_RS_1();
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000584:	4835      	ldr	r0, [pc, #212]	@ (800065c <LcdWrite+0xf4>)
 8000586:	f002 f967 	bl	8002858 <HAL_GPIO_WritePin>
 800058a:	e005      	b.n	8000598 <LcdWrite+0x30>
	}
	else
	{
		LCD_RS_0();
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000592:	4832      	ldr	r0, [pc, #200]	@ (800065c <LcdWrite+0xf4>)
 8000594:	f002 f960 	bl	8002858 <HAL_GPIO_WritePin>
	}
	/* write high nibble */
	LCD_DATA_0();
 8000598:	f000 f8be 	bl	8000718 <ClearData>
	if (data & 0x80)
 800059c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	da05      	bge.n	80005b0 <LcdWrite+0x48>
	{
		LCD_D7_1();
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005aa:	482c      	ldr	r0, [pc, #176]	@ (800065c <LcdWrite+0xf4>)
 80005ac:	f002 f954 	bl	8002858 <HAL_GPIO_WritePin>
	}
	if (data & 0x40)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d005      	beq.n	80005c6 <LcdWrite+0x5e>
	{
		LCD_D6_1();
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c0:	4827      	ldr	r0, [pc, #156]	@ (8000660 <LcdWrite+0xf8>)
 80005c2:	f002 f949 	bl	8002858 <HAL_GPIO_WritePin>
	}
	if (data & 0x20)
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 0320 	and.w	r3, r3, #32
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d004      	beq.n	80005da <LcdWrite+0x72>
	{
		LCD_D5_1();
 80005d0:	2201      	movs	r2, #1
 80005d2:	2110      	movs	r1, #16
 80005d4:	4822      	ldr	r0, [pc, #136]	@ (8000660 <LcdWrite+0xf8>)
 80005d6:	f002 f93f 	bl	8002858 <HAL_GPIO_WritePin>
	}
	if (data & 0x10)
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 0310 	and.w	r3, r3, #16
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d004      	beq.n	80005ee <LcdWrite+0x86>
	{
		LCD_D4_1();
 80005e4:	2201      	movs	r2, #1
 80005e6:	2120      	movs	r1, #32
 80005e8:	481d      	ldr	r0, [pc, #116]	@ (8000660 <LcdWrite+0xf8>)
 80005ea:	f002 f935 	bl	8002858 <HAL_GPIO_WritePin>
	}
	LcdToggleE();
 80005ee:	f7ff ffa5 	bl	800053c <LcdToggleE>

	/* write low nibble */
	LCD_DATA_0();
 80005f2:	f000 f891 	bl	8000718 <ClearData>
	if (data & 0x08)
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d005      	beq.n	800060c <LcdWrite+0xa4>
	{
		LCD_D7_1();
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000606:	4815      	ldr	r0, [pc, #84]	@ (800065c <LcdWrite+0xf4>)
 8000608:	f002 f926 	bl	8002858 <HAL_GPIO_WritePin>
	}
	if (data & 0x04)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	2b00      	cmp	r3, #0
 8000614:	d005      	beq.n	8000622 <LcdWrite+0xba>
	{
		LCD_D6_1();
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800061c:	4810      	ldr	r0, [pc, #64]	@ (8000660 <LcdWrite+0xf8>)
 800061e:	f002 f91b 	bl	8002858 <HAL_GPIO_WritePin>
	}
	if (data & 0x02)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 0302 	and.w	r3, r3, #2
 8000628:	2b00      	cmp	r3, #0
 800062a:	d004      	beq.n	8000636 <LcdWrite+0xce>
	{
		LCD_D5_1();
 800062c:	2201      	movs	r2, #1
 800062e:	2110      	movs	r1, #16
 8000630:	480b      	ldr	r0, [pc, #44]	@ (8000660 <LcdWrite+0xf8>)
 8000632:	f002 f911 	bl	8002858 <HAL_GPIO_WritePin>
	}
	if (data & 0x01)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	2b00      	cmp	r3, #0
 800063e:	d004      	beq.n	800064a <LcdWrite+0xe2>
	{
		LCD_D4_1();
 8000640:	2201      	movs	r2, #1
 8000642:	2120      	movs	r1, #32
 8000644:	4806      	ldr	r0, [pc, #24]	@ (8000660 <LcdWrite+0xf8>)
 8000646:	f002 f907 	bl	8002858 <HAL_GPIO_WritePin>
	}
	LcdToggleE();
 800064a:	f7ff ff77 	bl	800053c <LcdToggleE>
	
	/* High impedance -> inactive state ? */
	//LCD_DATA_H()
	
	DELAY_MS(1);
 800064e:	2001      	movs	r0, #1
 8000650:	f001 f826 	bl	80016a0 <HAL_Delay>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020000 	.word	0x40020000
 8000660:	40020400 	.word	0x40020400

08000664 <LcdPortInit_GPIO>:
* Returns:  none
*
***********************************************/

void LcdPortInit_GPIO(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	LCD_PORT_0();
 8000668:	f000 f82a 	bl	80006c0 <ClearPort>
	DELAY_MS(100);
 800066c:	2064      	movs	r0, #100	@ 0x64
 800066e:	f001 f817 	bl	80016a0 <HAL_Delay>
	
	LCD_D5_1();
 8000672:	2201      	movs	r2, #1
 8000674:	2110      	movs	r1, #16
 8000676:	4811      	ldr	r0, [pc, #68]	@ (80006bc <LcdPortInit_GPIO+0x58>)
 8000678:	f002 f8ee 	bl	8002858 <HAL_GPIO_WritePin>
	LCD_D4_1();
 800067c:	2201      	movs	r2, #1
 800067e:	2120      	movs	r1, #32
 8000680:	480e      	ldr	r0, [pc, #56]	@ (80006bc <LcdPortInit_GPIO+0x58>)
 8000682:	f002 f8e9 	bl	8002858 <HAL_GPIO_WritePin>
	
	LcdToggleE();
 8000686:	f7ff ff59 	bl	800053c <LcdToggleE>
	
	DELAY_MS(5);
 800068a:	2005      	movs	r0, #5
 800068c:	f001 f808 	bl	80016a0 <HAL_Delay>
	
	LcdToggleE();
 8000690:	f7ff ff54 	bl	800053c <LcdToggleE>
	
	DELAY_MS(1);
 8000694:	2001      	movs	r0, #1
 8000696:	f001 f803 	bl	80016a0 <HAL_Delay>
	
	LcdToggleE();
 800069a:	f7ff ff4f 	bl	800053c <LcdToggleE>
	
	DELAY_MS(1);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 fffe 	bl	80016a0 <HAL_Delay>
	
	LCD_D4_0();
 80006a4:	2200      	movs	r2, #0
 80006a6:	2120      	movs	r1, #32
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <LcdPortInit_GPIO+0x58>)
 80006aa:	f002 f8d5 	bl	8002858 <HAL_GPIO_WritePin>
	
	LcdToggleE();
 80006ae:	f7ff ff45 	bl	800053c <LcdToggleE>
	
	DELAY_MS(5);
 80006b2:	2005      	movs	r0, #5
 80006b4:	f000 fff4 	bl	80016a0 <HAL_Delay>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40020400 	.word	0x40020400

080006c0 <ClearPort>:

static void ClearPort(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	LCD_RS_0();
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ca:	4810      	ldr	r0, [pc, #64]	@ (800070c <ClearPort+0x4c>)
 80006cc:	f002 f8c4 	bl	8002858 <HAL_GPIO_WritePin>
	LCD_E_0();
 80006d0:	2200      	movs	r2, #0
 80006d2:	2180      	movs	r1, #128	@ 0x80
 80006d4:	480e      	ldr	r0, [pc, #56]	@ (8000710 <ClearPort+0x50>)
 80006d6:	f002 f8bf 	bl	8002858 <HAL_GPIO_WritePin>
	LCD_D7_0();
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006e0:	480a      	ldr	r0, [pc, #40]	@ (800070c <ClearPort+0x4c>)
 80006e2:	f002 f8b9 	bl	8002858 <HAL_GPIO_WritePin>
	LCD_D6_0();
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ec:	4809      	ldr	r0, [pc, #36]	@ (8000714 <ClearPort+0x54>)
 80006ee:	f002 f8b3 	bl	8002858 <HAL_GPIO_WritePin>
	LCD_D5_0();
 80006f2:	2200      	movs	r2, #0
 80006f4:	2110      	movs	r1, #16
 80006f6:	4807      	ldr	r0, [pc, #28]	@ (8000714 <ClearPort+0x54>)
 80006f8:	f002 f8ae 	bl	8002858 <HAL_GPIO_WritePin>
	LCD_D4_0();
 80006fc:	2200      	movs	r2, #0
 80006fe:	2120      	movs	r1, #32
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <ClearPort+0x54>)
 8000702:	f002 f8a9 	bl	8002858 <HAL_GPIO_WritePin>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40020000 	.word	0x40020000
 8000710:	40020800 	.word	0x40020800
 8000714:	40020400 	.word	0x40020400

08000718 <ClearData>:

static void ClearData(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	LCD_D7_0();
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000722:	480a      	ldr	r0, [pc, #40]	@ (800074c <ClearData+0x34>)
 8000724:	f002 f898 	bl	8002858 <HAL_GPIO_WritePin>
	LCD_D6_0();
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800072e:	4808      	ldr	r0, [pc, #32]	@ (8000750 <ClearData+0x38>)
 8000730:	f002 f892 	bl	8002858 <HAL_GPIO_WritePin>
	LCD_D5_0();
 8000734:	2200      	movs	r2, #0
 8000736:	2110      	movs	r1, #16
 8000738:	4805      	ldr	r0, [pc, #20]	@ (8000750 <ClearData+0x38>)
 800073a:	f002 f88d 	bl	8002858 <HAL_GPIO_WritePin>
	LCD_D4_0();
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	4803      	ldr	r0, [pc, #12]	@ (8000750 <ClearData+0x38>)
 8000744:	f002 f888 	bl	8002858 <HAL_GPIO_WritePin>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40020000 	.word	0x40020000
 8000750:	40020400 	.word	0x40020400

08000754 <LcdInit_GPIO>:
*                    LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
* Returns:  none
*
***********************************************/
void LcdInit_GPIO(uint8_t dispMode)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  LcdPortInit_GPIO();
 800075e:	f7ff ff81 	bl	8000664 <LcdPortInit_GPIO>

  LcdWrite(LCD_FUNCTION_DEFAULT, 0);
 8000762:	2100      	movs	r1, #0
 8000764:	2028      	movs	r0, #40	@ 0x28
 8000766:	f7ff feff 	bl	8000568 <LcdWrite>

  DELAY_MS(5);
 800076a:	2005      	movs	r0, #5
 800076c:	f000 ff98 	bl	80016a0 <HAL_Delay>

  LcdWrite(LCD_DISP_OFF, 0);
 8000770:	2100      	movs	r1, #0
 8000772:	2008      	movs	r0, #8
 8000774:	f7ff fef8 	bl	8000568 <LcdWrite>

  LcdClrScr();
 8000778:	f000 f83f 	bl	80007fa <LcdClrScr>

  LcdWrite(dispMode, 0);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fef1 	bl	8000568 <LcdWrite>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <LcdPuts>:
void LcdPuts(const char *s, uint8_t pos)
#else
void LcdPuts(const char *s, uint8_t line, uint8_t pos)
#endif
/* print string on lcd (no auto linefeed) */
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b084      	sub	sp, #16
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
 8000796:	460b      	mov	r3, r1
 8000798:	70fb      	strb	r3, [r7, #3]
 800079a:	4613      	mov	r3, r2
 800079c:	70bb      	strb	r3, [r7, #2]
    char c;

  /* Set starting point */
  if (pos >= LCD_DISP_LENGTH)
 800079e:	78bb      	ldrb	r3, [r7, #2]
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	d901      	bls.n	80007a8 <LcdPuts+0x1a>
  {
    /* Error handling*/
    pos = LCD_DISP_LENGTH - 1;
 80007a4:	230f      	movs	r3, #15
 80007a6:	70bb      	strb	r3, [r7, #2]
  }

  #if (LCD_LINES == 1)
  LcdWrite((1<<LCD_DDRAM) + LCD_START_LINE1 + pos,0);
  #elif ((LCD_LINES == 2) || (LCD_LINES == 4))
  if (line == 1)
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d107      	bne.n	80007be <LcdPuts+0x30>
  {
    LcdWrite((1<<LCD_DDRAM) + LCD_START_LINE1 + pos,0);
 80007ae:	78bb      	ldrb	r3, [r7, #2]
 80007b0:	3b80      	subs	r3, #128	@ 0x80
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fed6 	bl	8000568 <LcdWrite>
 80007bc:	e012      	b.n	80007e4 <LcdPuts+0x56>
  }
  else
  if (line == 2)
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d10f      	bne.n	80007e4 <LcdPuts+0x56>
  {
    LcdWrite((1<<LCD_DDRAM) + LCD_START_LINE2 + pos,0);
 80007c4:	78bb      	ldrb	r3, [r7, #2]
 80007c6:	3b40      	subs	r3, #64	@ 0x40
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fecb 	bl	8000568 <LcdWrite>
  #else
  #error: "Value of LCD_LINES is wrong"
  #endif

  /* Write out the chars */
    while ((c = *s))
 80007d2:	e007      	b.n	80007e4 <LcdPuts+0x56>
  {
        LcdWrite(c, 1);
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	2101      	movs	r1, #1
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fec5 	bl	8000568 <LcdWrite>
    s++;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3301      	adds	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
    while ((c = *s))
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	73fb      	strb	r3, [r7, #15]
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1f1      	bne.n	80007d4 <LcdPuts+0x46>
    }
}
 80007f0:	bf00      	nop
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <LcdClrScr>:
* LCD clear screen
*
***********************************************/

void LcdClrScr(void)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	af00      	add	r7, sp, #0
    LcdWrite(0x01, 0);
 80007fe:	2100      	movs	r1, #0
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff feb1 	bl	8000568 <LcdWrite>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000810:	f000 ff04 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000814:	f000 f85c 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000818:	f000 faac 	bl	8000d74 <MX_GPIO_Init>
  MX_DMA_Init();
 800081c:	f000 fa74 	bl	8000d08 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000820:	f000 fa48 	bl	8000cb4 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000824:	f000 f95e 	bl	8000ae4 <MX_DAC_Init>
  MX_ADC1_Init();
 8000828:	f000 f8c0 	bl	80009ac <MX_ADC1_Init>
  MX_I2C1_Init();
 800082c:	f000 f984 	bl	8000b38 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000830:	f000 f9e6 	bl	8000c00 <MX_TIM4_Init>
  MX_SPI1_Init();
 8000834:	f000 f9ae 	bl	8000b94 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LcdInit_GPIO(LCD_DISP_ON_CURSOR_BLINK);
 8000838:	200f      	movs	r0, #15
 800083a:	f7ff ff8b 	bl	8000754 <LcdInit_GPIO>
  LcdPuts("Hello_Nucleo446", 1, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2101      	movs	r1, #1
 8000842:	4816      	ldr	r0, [pc, #88]	@ (800089c <main+0x90>)
 8000844:	f7ff ffa3 	bl	800078e <LcdPuts>
  LcdPuts("Masodik sor", 2, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2102      	movs	r1, #2
 800084c:	4814      	ldr	r0, [pc, #80]	@ (80008a0 <main+0x94>)
 800084e:	f7ff ff9e 	bl	800078e <LcdPuts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000852:	f004 f8e3 	bl	8004a1c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task10ms */
  Task10msHandle = osThreadNew(StartTask10ms, NULL, &Task10ms_attributes);
 8000856:	4a13      	ldr	r2, [pc, #76]	@ (80008a4 <main+0x98>)
 8000858:	2100      	movs	r1, #0
 800085a:	4813      	ldr	r0, [pc, #76]	@ (80008a8 <main+0x9c>)
 800085c:	f004 f928 	bl	8004ab0 <osThreadNew>
 8000860:	4603      	mov	r3, r0
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <main+0xa0>)
 8000864:	6013      	str	r3, [r2, #0]

  /* creation of ComTask */
  ComTaskHandle = osThreadNew(StartComTask, NULL, &ComTask_attributes);
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <main+0xa4>)
 8000868:	2100      	movs	r1, #0
 800086a:	4812      	ldr	r0, [pc, #72]	@ (80008b4 <main+0xa8>)
 800086c:	f004 f920 	bl	8004ab0 <osThreadNew>
 8000870:	4603      	mov	r3, r0
 8000872:	4a11      	ldr	r2, [pc, #68]	@ (80008b8 <main+0xac>)
 8000874:	6013      	str	r3, [r2, #0]

  /* creation of Task1sec */
  Task1secHandle = osThreadNew(StartTask1sec, NULL, &Task1sec_attributes);
 8000876:	4a11      	ldr	r2, [pc, #68]	@ (80008bc <main+0xb0>)
 8000878:	2100      	movs	r1, #0
 800087a:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <main+0xb4>)
 800087c:	f004 f918 	bl	8004ab0 <osThreadNew>
 8000880:	4603      	mov	r3, r0
 8000882:	4a10      	ldr	r2, [pc, #64]	@ (80008c4 <main+0xb8>)
 8000884:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of EventComTask */
  EventComTaskHandle = osEventFlagsNew(&EventComTask_attributes);
 8000886:	4810      	ldr	r0, [pc, #64]	@ (80008c8 <main+0xbc>)
 8000888:	f004 f9bf 	bl	8004c0a <osEventFlagsNew>
 800088c:	4603      	mov	r3, r0
 800088e:	4a0f      	ldr	r2, [pc, #60]	@ (80008cc <main+0xc0>)
 8000890:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000892:	f004 f8e7 	bl	8004a64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000896:	bf00      	nop
 8000898:	e7fd      	b.n	8000896 <main+0x8a>
 800089a:	bf00      	nop
 800089c:	08007704 	.word	0x08007704
 80008a0:	08007714 	.word	0x08007714
 80008a4:	08007738 	.word	0x08007738
 80008a8:	08000ea9 	.word	0x08000ea9
 80008ac:	20000284 	.word	0x20000284
 80008b0:	0800775c 	.word	0x0800775c
 80008b4:	08000eb9 	.word	0x08000eb9
 80008b8:	200004e4 	.word	0x200004e4
 80008bc:	08007780 	.word	0x08007780
 80008c0:	08000ec9 	.word	0x08000ec9
 80008c4:	20000744 	.word	0x20000744
 80008c8:	080077a4 	.word	0x080077a4
 80008cc:	200009a4 	.word	0x200009a4

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	@ 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2234      	movs	r2, #52	@ 0x34
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f006 feb2 	bl	8007648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	4b2a      	ldr	r3, [pc, #168]	@ (80009a4 <SystemClock_Config+0xd4>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	4a29      	ldr	r2, [pc, #164]	@ (80009a4 <SystemClock_Config+0xd4>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	@ 0x40
 8000904:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <SystemClock_Config+0xd4>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000910:	2300      	movs	r3, #0
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	4b24      	ldr	r3, [pc, #144]	@ (80009a8 <SystemClock_Config+0xd8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800091c:	4a22      	ldr	r2, [pc, #136]	@ (80009a8 <SystemClock_Config+0xd8>)
 800091e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <SystemClock_Config+0xd8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000930:	2302      	movs	r3, #2
 8000932:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000934:	2301      	movs	r3, #1
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000938:	2310      	movs	r3, #16
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093c:	2302      	movs	r3, #2
 800093e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000940:	2300      	movs	r3, #0
 8000942:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000944:	2310      	movs	r3, #16
 8000946:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000948:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800094c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800094e:	2304      	movs	r3, #4
 8000950:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4618      	mov	r0, r3
 8000960:	f002 fc54 	bl	800320c <HAL_RCC_OscConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800096a:	f000 fac7 	bl	8000efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096e:	230f      	movs	r3, #15
 8000970:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000972:	2302      	movs	r3, #2
 8000974:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800097e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	2102      	movs	r1, #2
 800098a:	4618      	mov	r0, r3
 800098c:	f002 f8c2 	bl	8002b14 <HAL_RCC_ClockConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000996:	f000 fab1 	bl	8000efc <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3750      	adds	r7, #80	@ 0x50
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40007000 	.word	0x40007000

080009ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b2:	463b      	mov	r3, r7
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009be:	4b45      	ldr	r3, [pc, #276]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 80009c0:	4a45      	ldr	r2, [pc, #276]	@ (8000ad8 <MX_ADC1_Init+0x12c>)
 80009c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009c4:	4b43      	ldr	r3, [pc, #268]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 80009c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009cc:	4b41      	ldr	r3, [pc, #260]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009d2:	4b40      	ldr	r3, [pc, #256]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009d8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 80009da:	2200      	movs	r2, #0
 80009dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009de:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ec:	4b39      	ldr	r3, [pc, #228]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 80009ee:	4a3b      	ldr	r2, [pc, #236]	@ (8000adc <MX_ADC1_Init+0x130>)
 80009f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f2:	4b38      	ldr	r3, [pc, #224]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80009f8:	4b36      	ldr	r3, [pc, #216]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 80009fa:	2206      	movs	r2, #6
 80009fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009fe:	4b35      	ldr	r3, [pc, #212]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a06:	4b33      	ldr	r3, [pc, #204]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a0c:	4831      	ldr	r0, [pc, #196]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 8000a0e:	f000 fe6b 	bl	80016e8 <HAL_ADC_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a18:	f000 fa70 	bl	8000efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a20:	2301      	movs	r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000a24:	2301      	movs	r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4829      	ldr	r0, [pc, #164]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 8000a2e:	f000 fe9f 	bl	8001770 <HAL_ADC_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a38:	f000 fa60 	bl	8000efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4619      	mov	r1, r3
 8000a48:	4822      	ldr	r0, [pc, #136]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 8000a4a:	f000 fe91 	bl	8001770 <HAL_ADC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a54:	f000 fa52 	bl	8000efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a60:	463b      	mov	r3, r7
 8000a62:	4619      	mov	r1, r3
 8000a64:	481b      	ldr	r0, [pc, #108]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 8000a66:	f000 fe83 	bl	8001770 <HAL_ADC_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a70:	f000 fa44 	bl	8000efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a74:	230a      	movs	r3, #10
 8000a76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4814      	ldr	r0, [pc, #80]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 8000a82:	f000 fe75 	bl	8001770 <HAL_ADC_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a8c:	f000 fa36 	bl	8000efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000a90:	230b      	movs	r3, #11
 8000a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000a94:	2305      	movs	r3, #5
 8000a96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a98:	463b      	mov	r3, r7
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480d      	ldr	r0, [pc, #52]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 8000a9e:	f000 fe67 	bl	8001770 <HAL_ADC_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000aa8:	f000 fa28 	bl	8000efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 8000aae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000ab0:	2306      	movs	r3, #6
 8000ab2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_ADC1_Init+0x128>)
 8000abe:	f000 fe57 	bl	8001770 <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000ac8:	f000 fa18 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000002c 	.word	0x2000002c
 8000ad8:	40012000 	.word	0x40012000
 8000adc:	0f000001 	.word	0x0f000001
 8000ae0:	10000012 	.word	0x10000012

08000ae4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000aea:	463b      	mov	r3, r7
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000af2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <MX_DAC_Init+0x4c>)
 8000af4:	4a0f      	ldr	r2, [pc, #60]	@ (8000b34 <MX_DAC_Init+0x50>)
 8000af6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000af8:	480d      	ldr	r0, [pc, #52]	@ (8000b30 <MX_DAC_Init+0x4c>)
 8000afa:	f001 f949 	bl	8001d90 <HAL_DAC_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b04:	f000 f9fa 	bl	8000efc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <MX_DAC_Init+0x4c>)
 8000b18:	f001 f9bc 	bl	8001e94 <HAL_DAC_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000b22:	f000 f9eb 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	200000d4 	.word	0x200000d4
 8000b34:	40007400 	.word	0x40007400

08000b38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <MX_I2C1_Init+0x50>)
 8000b3e:	4a13      	ldr	r2, [pc, #76]	@ (8000b8c <MX_I2C1_Init+0x54>)
 8000b40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <MX_I2C1_Init+0x50>)
 8000b44:	4a12      	ldr	r2, [pc, #72]	@ (8000b90 <MX_I2C1_Init+0x58>)
 8000b46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <MX_I2C1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_I2C1_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <MX_I2C1_Init+0x50>)
 8000b56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <MX_I2C1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_I2C1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <MX_I2C1_Init+0x50>)
 8000b76:	f001 fe89 	bl	800288c <HAL_I2C_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b80:	f000 f9bc 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200000e8 	.word	0x200000e8
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	000186a0 	.word	0x000186a0

08000b94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b98:	4b17      	ldr	r3, [pc, #92]	@ (8000bf8 <MX_SPI1_Init+0x64>)
 8000b9a:	4a18      	ldr	r2, [pc, #96]	@ (8000bfc <MX_SPI1_Init+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <MX_SPI1_Init+0x64>)
 8000ba0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ba4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <MX_SPI1_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <MX_SPI1_Init+0x64>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_SPI1_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <MX_SPI1_Init+0x64>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <MX_SPI1_Init+0x64>)
 8000bc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_SPI1_Init+0x64>)
 8000bc8:	2220      	movs	r2, #32
 8000bca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <MX_SPI1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_SPI1_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <MX_SPI1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <MX_SPI1_Init+0x64>)
 8000be0:	220a      	movs	r2, #10
 8000be2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	@ (8000bf8 <MX_SPI1_Init+0x64>)
 8000be6:	f002 fdaf 	bl	8003748 <HAL_SPI_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bf0:	f000 f984 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000013c 	.word	0x2000013c
 8000bfc:	40013000 	.word	0x40013000

08000c00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	@ 0x28
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c06:	f107 0320 	add.w	r3, r7, #32
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]
 8000c1e:	615a      	str	r2, [r3, #20]
 8000c20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c22:	4b22      	ldr	r3, [pc, #136]	@ (8000cac <MX_TIM4_Init+0xac>)
 8000c24:	4a22      	ldr	r2, [pc, #136]	@ (8000cb0 <MX_TIM4_Init+0xb0>)
 8000c26:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c28:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <MX_TIM4_Init+0xac>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <MX_TIM4_Init+0xac>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <MX_TIM4_Init+0xac>)
 8000c36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <MX_TIM4_Init+0xac>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <MX_TIM4_Init+0xac>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c48:	4818      	ldr	r0, [pc, #96]	@ (8000cac <MX_TIM4_Init+0xac>)
 8000c4a:	f002 fecf 	bl	80039ec <HAL_TIM_PWM_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000c54:	f000 f952 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c60:	f107 0320 	add.w	r3, r7, #32
 8000c64:	4619      	mov	r1, r3
 8000c66:	4811      	ldr	r0, [pc, #68]	@ (8000cac <MX_TIM4_Init+0xac>)
 8000c68:	f003 fb40 	bl	80042ec <HAL_TIMEx_MasterConfigSynchronization>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000c72:	f000 f943 	bl	8000efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c76:	2360      	movs	r3, #96	@ 0x60
 8000c78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4807      	ldr	r0, [pc, #28]	@ (8000cac <MX_TIM4_Init+0xac>)
 8000c8e:	f002 ffed 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000c98:	f000 f930 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c9c:	4803      	ldr	r0, [pc, #12]	@ (8000cac <MX_TIM4_Init+0xac>)
 8000c9e:	f000 fb0d 	bl	80012bc <HAL_TIM_MspPostInit>

}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	@ 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000194 	.word	0x20000194
 8000cb0:	40000800 	.word	0x40000800

08000cb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <MX_USART2_UART_Init+0x50>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	@ (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <MX_USART2_UART_Init+0x4c>)
 8000cec:	f003 fb8e 	bl	800440c <HAL_UART_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cf6:	f000 f901 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200001dc 	.word	0x200001dc
 8000d04:	40004400 	.word	0x40004400

08000d08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <MX_DMA_Init+0x68>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a16      	ldr	r2, [pc, #88]	@ (8000d70 <MX_DMA_Init+0x68>)
 8000d18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <MX_DMA_Init+0x68>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <MX_DMA_Init+0x68>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a0f      	ldr	r2, [pc, #60]	@ (8000d70 <MX_DMA_Init+0x68>)
 8000d34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <MX_DMA_Init+0x68>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2105      	movs	r1, #5
 8000d4a:	2010      	movs	r0, #16
 8000d4c:	f000 fff6 	bl	8001d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d50:	2010      	movs	r0, #16
 8000d52:	f001 f80f 	bl	8001d74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2105      	movs	r1, #5
 8000d5a:	2038      	movs	r0, #56	@ 0x38
 8000d5c:	f000 ffee 	bl	8001d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d60:	2038      	movs	r0, #56	@ 0x38
 8000d62:	f001 f807 	bl	8001d74 <HAL_NVIC_EnableIRQ>

}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	@ 0x28
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b42      	ldr	r3, [pc, #264]	@ (8000e98 <MX_GPIO_Init+0x124>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a41      	ldr	r2, [pc, #260]	@ (8000e98 <MX_GPIO_Init+0x124>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e98 <MX_GPIO_Init+0x124>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b3b      	ldr	r3, [pc, #236]	@ (8000e98 <MX_GPIO_Init+0x124>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a3a      	ldr	r2, [pc, #232]	@ (8000e98 <MX_GPIO_Init+0x124>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b38      	ldr	r3, [pc, #224]	@ (8000e98 <MX_GPIO_Init+0x124>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4b34      	ldr	r3, [pc, #208]	@ (8000e98 <MX_GPIO_Init+0x124>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a33      	ldr	r2, [pc, #204]	@ (8000e98 <MX_GPIO_Init+0x124>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b31      	ldr	r3, [pc, #196]	@ (8000e98 <MX_GPIO_Init+0x124>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <MX_GPIO_Init+0x124>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a2c      	ldr	r2, [pc, #176]	@ (8000e98 <MX_GPIO_Init+0x124>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <MX_GPIO_Init+0x124>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 8000e00:	4826      	ldr	r0, [pc, #152]	@ (8000e9c <MX_GPIO_Init+0x128>)
 8000e02:	f001 fd29 	bl	8002858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2180      	movs	r1, #128	@ 0x80
 8000e0a:	4825      	ldr	r0, [pc, #148]	@ (8000ea0 <MX_GPIO_Init+0x12c>)
 8000e0c:	f001 fd24 	bl	8002858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000e16:	4823      	ldr	r0, [pc, #140]	@ (8000ea4 <MX_GPIO_Init+0x130>)
 8000e18:	f001 fd1e 	bl	8002858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e22:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	481b      	ldr	r0, [pc, #108]	@ (8000ea0 <MX_GPIO_Init+0x12c>)
 8000e34:	f001 fb7c 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin;
 8000e38:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4812      	ldr	r0, [pc, #72]	@ (8000e9c <MX_GPIO_Init+0x128>)
 8000e52:	f001 fb6d 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_E_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin;
 8000e56:	2380      	movs	r3, #128	@ 0x80
 8000e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_E_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <MX_GPIO_Init+0x12c>)
 8000e6e:	f001 fb5f 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_RS_Pin;
 8000e72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	@ (8000ea4 <MX_GPIO_Init+0x130>)
 8000e8c:	f001 fb50 	bl	8002530 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	@ 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <StartTask10ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask10ms */
void StartTask10ms(void *argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f003 fe8f 	bl	8004bd4 <osDelay>
 8000eb6:	e7fb      	b.n	8000eb0 <StartTask10ms+0x8>

08000eb8 <StartComTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartComTask */
void StartComTask(void *argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartComTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f003 fe87 	bl	8004bd4 <osDelay>
 8000ec6:	e7fb      	b.n	8000ec0 <StartComTask+0x8>

08000ec8 <StartTask1sec>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask1sec */
void StartTask1sec(void *argument)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask1sec */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f003 fe7f 	bl	8004bd4 <osDelay>
 8000ed6:	e7fb      	b.n	8000ed0 <StartTask1sec+0x8>

08000ed8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d101      	bne.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000eea:	f000 fbb9 	bl	8001660 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40001000 	.word	0x40001000

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <Error_Handler+0x8>

08000f08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <HAL_MspInit+0x54>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	4a11      	ldr	r2, [pc, #68]	@ (8000f5c <HAL_MspInit+0x54>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <HAL_MspInit+0x54>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <HAL_MspInit+0x54>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <HAL_MspInit+0x54>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3a:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <HAL_MspInit+0x54>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	210f      	movs	r1, #15
 8000f4a:	f06f 0001 	mvn.w	r0, #1
 8000f4e:	f000 fef5 	bl	8001d3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800

08000f60 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	@ 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a49      	ldr	r2, [pc, #292]	@ (80010a4 <HAL_ADC_MspInit+0x144>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	f040 808b 	bne.w	800109a <HAL_ADC_MspInit+0x13a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	4b47      	ldr	r3, [pc, #284]	@ (80010a8 <HAL_ADC_MspInit+0x148>)
 8000f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8c:	4a46      	ldr	r2, [pc, #280]	@ (80010a8 <HAL_ADC_MspInit+0x148>)
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f92:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f94:	4b44      	ldr	r3, [pc, #272]	@ (80010a8 <HAL_ADC_MspInit+0x148>)
 8000f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	4b40      	ldr	r3, [pc, #256]	@ (80010a8 <HAL_ADC_MspInit+0x148>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa8:	4a3f      	ldr	r2, [pc, #252]	@ (80010a8 <HAL_ADC_MspInit+0x148>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb0:	4b3d      	ldr	r3, [pc, #244]	@ (80010a8 <HAL_ADC_MspInit+0x148>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	4b39      	ldr	r3, [pc, #228]	@ (80010a8 <HAL_ADC_MspInit+0x148>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc4:	4a38      	ldr	r2, [pc, #224]	@ (80010a8 <HAL_ADC_MspInit+0x148>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fcc:	4b36      	ldr	r3, [pc, #216]	@ (80010a8 <HAL_ADC_MspInit+0x148>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4b32      	ldr	r3, [pc, #200]	@ (80010a8 <HAL_ADC_MspInit+0x148>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe0:	4a31      	ldr	r2, [pc, #196]	@ (80010a8 <HAL_ADC_MspInit+0x148>)
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	@ (80010a8 <HAL_ADC_MspInit+0x148>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4829      	ldr	r0, [pc, #164]	@ (80010ac <HAL_ADC_MspInit+0x14c>)
 8001008:	f001 fa92 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800100c:	2303      	movs	r3, #3
 800100e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001010:	2303      	movs	r3, #3
 8001012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4824      	ldr	r0, [pc, #144]	@ (80010b0 <HAL_ADC_MspInit+0x150>)
 8001020:	f001 fa86 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001024:	2301      	movs	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001028:	2303      	movs	r3, #3
 800102a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	481f      	ldr	r0, [pc, #124]	@ (80010b4 <HAL_ADC_MspInit+0x154>)
 8001038:	f001 fa7a 	bl	8002530 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800103c:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <HAL_ADC_MspInit+0x158>)
 800103e:	4a1f      	ldr	r2, [pc, #124]	@ (80010bc <HAL_ADC_MspInit+0x15c>)
 8001040:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001042:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <HAL_ADC_MspInit+0x158>)
 8001044:	2200      	movs	r2, #0
 8001046:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001048:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <HAL_ADC_MspInit+0x158>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800104e:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <HAL_ADC_MspInit+0x158>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <HAL_ADC_MspInit+0x158>)
 8001056:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800105a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <HAL_ADC_MspInit+0x158>)
 800105e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001062:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001064:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <HAL_ADC_MspInit+0x158>)
 8001066:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800106a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800106c:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_ADC_MspInit+0x158>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <HAL_ADC_MspInit+0x158>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <HAL_ADC_MspInit+0x158>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800107e:	480e      	ldr	r0, [pc, #56]	@ (80010b8 <HAL_ADC_MspInit+0x158>)
 8001080:	f000 ff6c 	bl	8001f5c <HAL_DMA_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 800108a:	f7ff ff37 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a09      	ldr	r2, [pc, #36]	@ (80010b8 <HAL_ADC_MspInit+0x158>)
 8001092:	639a      	str	r2, [r3, #56]	@ 0x38
 8001094:	4a08      	ldr	r2, [pc, #32]	@ (80010b8 <HAL_ADC_MspInit+0x158>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800109a:	bf00      	nop
 800109c:	3730      	adds	r7, #48	@ 0x30
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40012000 	.word	0x40012000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	20000074 	.word	0x20000074
 80010bc:	40026410 	.word	0x40026410

080010c0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	@ 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <HAL_DAC_MspInit+0x8c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d12f      	bne.n	8001142 <HAL_DAC_MspInit+0x82>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <HAL_DAC_MspInit+0x90>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	4a19      	ldr	r2, [pc, #100]	@ (8001150 <HAL_DAC_MspInit+0x90>)
 80010ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80010f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f2:	4b17      	ldr	r3, [pc, #92]	@ (8001150 <HAL_DAC_MspInit+0x90>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <HAL_DAC_MspInit+0x90>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a12      	ldr	r2, [pc, #72]	@ (8001150 <HAL_DAC_MspInit+0x90>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <HAL_DAC_MspInit+0x90>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800111a:	2310      	movs	r3, #16
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111e:	2303      	movs	r3, #3
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	4809      	ldr	r0, [pc, #36]	@ (8001154 <HAL_DAC_MspInit+0x94>)
 800112e:	f001 f9ff 	bl	8002530 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	210f      	movs	r1, #15
 8001136:	2036      	movs	r0, #54	@ 0x36
 8001138:	f000 fe00 	bl	8001d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800113c:	2036      	movs	r0, #54	@ 0x36
 800113e:	f000 fe19 	bl	8001d74 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	@ 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40007400 	.word	0x40007400
 8001150:	40023800 	.word	0x40023800
 8001154:	40020000 	.word	0x40020000

08001158 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a19      	ldr	r2, [pc, #100]	@ (80011dc <HAL_I2C_MspInit+0x84>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d12c      	bne.n	80011d4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <HAL_I2C_MspInit+0x88>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a17      	ldr	r2, [pc, #92]	@ (80011e0 <HAL_I2C_MspInit+0x88>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_I2C_MspInit+0x88>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001196:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119c:	2312      	movs	r3, #18
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011a8:	2304      	movs	r3, #4
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <HAL_I2C_MspInit+0x8c>)
 80011b4:	f001 f9bc 	bl	8002530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <HAL_I2C_MspInit+0x88>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c0:	4a07      	ldr	r2, [pc, #28]	@ (80011e0 <HAL_I2C_MspInit+0x88>)
 80011c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <HAL_I2C_MspInit+0x88>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	@ 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40005400 	.word	0x40005400
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020400 	.word	0x40020400

080011e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a19      	ldr	r2, [pc, #100]	@ (800126c <HAL_SPI_MspInit+0x84>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d12b      	bne.n	8001262 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <HAL_SPI_MspInit+0x88>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	4a17      	ldr	r2, [pc, #92]	@ (8001270 <HAL_SPI_MspInit+0x88>)
 8001214:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001218:	6453      	str	r3, [r2, #68]	@ 0x44
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <HAL_SPI_MspInit+0x88>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <HAL_SPI_MspInit+0x88>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a10      	ldr	r2, [pc, #64]	@ (8001270 <HAL_SPI_MspInit+0x88>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <HAL_SPI_MspInit+0x88>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001242:	23e0      	movs	r3, #224	@ 0xe0
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001252:	2305      	movs	r3, #5
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	@ (8001274 <HAL_SPI_MspInit+0x8c>)
 800125e:	f001 f967 	bl	8002530 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	@ 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40013000 	.word	0x40013000
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000

08001278 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d10d      	bne.n	80012a6 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_TIM_PWM_MspInit+0x40>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	4a09      	ldr	r2, [pc, #36]	@ (80012b8 <HAL_TIM_PWM_MspInit+0x40>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6413      	str	r3, [r2, #64]	@ 0x40
 800129a:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <HAL_TIM_PWM_MspInit+0x40>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40000800 	.word	0x40000800
 80012b8:	40023800 	.word	0x40023800

080012bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a12      	ldr	r2, [pc, #72]	@ (8001324 <HAL_TIM_MspPostInit+0x68>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d11d      	bne.n	800131a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <HAL_TIM_MspPostInit+0x6c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a10      	ldr	r2, [pc, #64]	@ (8001328 <HAL_TIM_MspPostInit+0x6c>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <HAL_TIM_MspPostInit+0x6c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012fa:	2340      	movs	r3, #64	@ 0x40
 80012fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800130a:	2302      	movs	r3, #2
 800130c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	@ (800132c <HAL_TIM_MspPostInit+0x70>)
 8001316:	f001 f90b 	bl	8002530 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3720      	adds	r7, #32
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40000800 	.word	0x40000800
 8001328:	40023800 	.word	0x40023800
 800132c:	40020400 	.word	0x40020400

08001330 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a30      	ldr	r2, [pc, #192]	@ (8001410 <HAL_UART_MspInit+0xe0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d159      	bne.n	8001406 <HAL_UART_MspInit+0xd6>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b2f      	ldr	r3, [pc, #188]	@ (8001414 <HAL_UART_MspInit+0xe4>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	4a2e      	ldr	r2, [pc, #184]	@ (8001414 <HAL_UART_MspInit+0xe4>)
 800135c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001360:	6413      	str	r3, [r2, #64]	@ 0x40
 8001362:	4b2c      	ldr	r3, [pc, #176]	@ (8001414 <HAL_UART_MspInit+0xe4>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <HAL_UART_MspInit+0xe4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a27      	ldr	r2, [pc, #156]	@ (8001414 <HAL_UART_MspInit+0xe4>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <HAL_UART_MspInit+0xe4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800138a:	230c      	movs	r3, #12
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800139a:	2307      	movs	r3, #7
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	481c      	ldr	r0, [pc, #112]	@ (8001418 <HAL_UART_MspInit+0xe8>)
 80013a6:	f001 f8c3 	bl	8002530 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <HAL_UART_MspInit+0xec>)
 80013ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001420 <HAL_UART_MspInit+0xf0>)
 80013ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <HAL_UART_MspInit+0xec>)
 80013b2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80013b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013b8:	4b18      	ldr	r3, [pc, #96]	@ (800141c <HAL_UART_MspInit+0xec>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013be:	4b17      	ldr	r3, [pc, #92]	@ (800141c <HAL_UART_MspInit+0xec>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <HAL_UART_MspInit+0xec>)
 80013c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <HAL_UART_MspInit+0xec>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013d2:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_UART_MspInit+0xec>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80013d8:	4b10      	ldr	r3, [pc, #64]	@ (800141c <HAL_UART_MspInit+0xec>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013de:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <HAL_UART_MspInit+0xec>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013e4:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <HAL_UART_MspInit+0xec>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80013ea:	480c      	ldr	r0, [pc, #48]	@ (800141c <HAL_UART_MspInit+0xec>)
 80013ec:	f000 fdb6 	bl	8001f5c <HAL_DMA_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80013f6:	f7ff fd81 	bl	8000efc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a07      	ldr	r2, [pc, #28]	@ (800141c <HAL_UART_MspInit+0xec>)
 80013fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001400:	4a06      	ldr	r2, [pc, #24]	@ (800141c <HAL_UART_MspInit+0xec>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	@ 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40004400 	.word	0x40004400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020000 	.word	0x40020000
 800141c:	20000224 	.word	0x20000224
 8001420:	40026088 	.word	0x40026088

08001424 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08e      	sub	sp, #56	@ 0x38
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	4b33      	ldr	r3, [pc, #204]	@ (8001508 <HAL_InitTick+0xe4>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143c:	4a32      	ldr	r2, [pc, #200]	@ (8001508 <HAL_InitTick+0xe4>)
 800143e:	f043 0310 	orr.w	r3, r3, #16
 8001442:	6413      	str	r3, [r2, #64]	@ 0x40
 8001444:	4b30      	ldr	r3, [pc, #192]	@ (8001508 <HAL_InitTick+0xe4>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001448:	f003 0310 	and.w	r3, r3, #16
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001450:	f107 0210 	add.w	r2, r7, #16
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fc74 	bl	8002d48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001460:	6a3b      	ldr	r3, [r7, #32]
 8001462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001466:	2b00      	cmp	r3, #0
 8001468:	d103      	bne.n	8001472 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800146a:	f001 fc45 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 800146e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001470:	e004      	b.n	800147c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001472:	f001 fc41 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 8001476:	4603      	mov	r3, r0
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800147c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800147e:	4a23      	ldr	r2, [pc, #140]	@ (800150c <HAL_InitTick+0xe8>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	0c9b      	lsrs	r3, r3, #18
 8001486:	3b01      	subs	r3, #1
 8001488:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800148a:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <HAL_InitTick+0xec>)
 800148c:	4a21      	ldr	r2, [pc, #132]	@ (8001514 <HAL_InitTick+0xf0>)
 800148e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001490:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <HAL_InitTick+0xec>)
 8001492:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001496:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001498:	4a1d      	ldr	r2, [pc, #116]	@ (8001510 <HAL_InitTick+0xec>)
 800149a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800149c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800149e:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <HAL_InitTick+0xec>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <HAL_InitTick+0xec>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <HAL_InitTick+0xec>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80014b0:	4817      	ldr	r0, [pc, #92]	@ (8001510 <HAL_InitTick+0xec>)
 80014b2:	f002 f9d2 	bl	800385a <HAL_TIM_Base_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80014bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d11b      	bne.n	80014fc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014c4:	4812      	ldr	r0, [pc, #72]	@ (8001510 <HAL_InitTick+0xec>)
 80014c6:	f002 fa21 	bl	800390c <HAL_TIM_Base_Start_IT>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80014d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d111      	bne.n	80014fc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014d8:	2036      	movs	r0, #54	@ 0x36
 80014da:	f000 fc4b 	bl	8001d74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b0f      	cmp	r3, #15
 80014e2:	d808      	bhi.n	80014f6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014e4:	2200      	movs	r2, #0
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	2036      	movs	r0, #54	@ 0x36
 80014ea:	f000 fc27 	bl	8001d3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <HAL_InitTick+0xf4>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	e002      	b.n	80014fc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001500:	4618      	mov	r0, r3
 8001502:	3738      	adds	r7, #56	@ 0x38
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	431bde83 	.word	0x431bde83
 8001510:	200009c8 	.word	0x200009c8
 8001514:	40001000 	.word	0x40001000
 8001518:	20000004 	.word	0x20000004

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <NMI_Handler+0x4>

08001524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <MemManage_Handler+0x4>

08001534 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <UsageFault_Handler+0x4>

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <DMA1_Stream5_IRQHandler+0x10>)
 800155a:	f000 fdad 	bl	80020b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000224 	.word	0x20000224

08001568 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <TIM6_DAC_IRQHandler+0x20>)
 800156e:	791b      	ldrb	r3, [r3, #4]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001576:	4804      	ldr	r0, [pc, #16]	@ (8001588 <TIM6_DAC_IRQHandler+0x20>)
 8001578:	f000 fc2c 	bl	8001dd4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800157c:	4803      	ldr	r0, [pc, #12]	@ (800158c <TIM6_DAC_IRQHandler+0x24>)
 800157e:	f002 fa84 	bl	8003a8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200000d4 	.word	0x200000d4
 800158c:	200009c8 	.word	0x200009c8

08001590 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001594:	4802      	ldr	r0, [pc, #8]	@ (80015a0 <DMA2_Stream0_IRQHandler+0x10>)
 8001596:	f000 fd8f 	bl	80020b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000074 	.word	0x20000074

080015a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <SystemInit+0x20>)
 80015aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ae:	4a05      	ldr	r2, [pc, #20]	@ (80015c4 <SystemInit+0x20>)
 80015b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001600 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015cc:	f7ff ffea 	bl	80015a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d0:	480c      	ldr	r0, [pc, #48]	@ (8001604 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015d2:	490d      	ldr	r1, [pc, #52]	@ (8001608 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d4:	4a0d      	ldr	r2, [pc, #52]	@ (800160c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001610 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001614 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015f6:	f006 f82f 	bl	8007658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fa:	f7ff f907 	bl	800080c <main>
  bx  lr    
 80015fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001600:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800160c:	080077e4 	.word	0x080077e4
  ldr r2, =_sbss
 8001610:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001614:	20005364 	.word	0x20005364

08001618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC_IRQHandler>
	...

0800161c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001620:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0d      	ldr	r2, [pc, #52]	@ (800165c <HAL_Init+0x40>)
 8001626:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800162a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800162c:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0a      	ldr	r2, [pc, #40]	@ (800165c <HAL_Init+0x40>)
 8001632:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	@ (800165c <HAL_Init+0x40>)
 800163e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f000 fb6e 	bl	8001d26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164a:	200f      	movs	r0, #15
 800164c:	f7ff feea 	bl	8001424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001650:	f7ff fc5a 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023c00 	.word	0x40023c00

08001660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <HAL_IncTick+0x20>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <HAL_IncTick+0x24>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a04      	ldr	r2, [pc, #16]	@ (8001684 <HAL_IncTick+0x24>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000008 	.word	0x20000008
 8001684:	20000a10 	.word	0x20000a10

08001688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return uwTick;
 800168c:	4b03      	ldr	r3, [pc, #12]	@ (800169c <HAL_GetTick+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000a10 	.word	0x20000a10

080016a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a8:	f7ff ffee 	bl	8001688 <HAL_GetTick>
 80016ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b8:	d005      	beq.n	80016c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ba:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <HAL_Delay+0x44>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016c6:	bf00      	nop
 80016c8:	f7ff ffde 	bl	8001688 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d8f7      	bhi.n	80016c8 <HAL_Delay+0x28>
  {
  }
}
 80016d8:	bf00      	nop
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008

080016e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e033      	b.n	8001766 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	2b00      	cmp	r3, #0
 8001704:	d109      	bne.n	800171a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fc2a 	bl	8000f60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	2b00      	cmp	r3, #0
 8001724:	d118      	bne.n	8001758 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800172e:	f023 0302 	bic.w	r3, r3, #2
 8001732:	f043 0202 	orr.w	r2, r3, #2
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f94a 	bl	80019d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f023 0303 	bic.w	r3, r3, #3
 800174e:	f043 0201 	orr.w	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	641a      	str	r2, [r3, #64]	@ 0x40
 8001756:	e001      	b.n	800175c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_ADC_ConfigChannel+0x1c>
 8001788:	2302      	movs	r3, #2
 800178a:	e113      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x244>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b09      	cmp	r3, #9
 800179a:	d925      	bls.n	80017e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68d9      	ldr	r1, [r3, #12]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	3b1e      	subs	r3, #30
 80017b2:	2207      	movs	r2, #7
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43da      	mvns	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	400a      	ands	r2, r1
 80017c0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68d9      	ldr	r1, [r3, #12]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	4603      	mov	r3, r0
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4403      	add	r3, r0
 80017da:	3b1e      	subs	r3, #30
 80017dc:	409a      	lsls	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	e022      	b.n	800182e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6919      	ldr	r1, [r3, #16]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	461a      	mov	r2, r3
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	2207      	movs	r2, #7
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	400a      	ands	r2, r1
 800180a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6919      	ldr	r1, [r3, #16]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	4603      	mov	r3, r0
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4403      	add	r3, r0
 8001824:	409a      	lsls	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b06      	cmp	r3, #6
 8001834:	d824      	bhi.n	8001880 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	3b05      	subs	r3, #5
 8001848:	221f      	movs	r2, #31
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	400a      	ands	r2, r1
 8001856:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	4618      	mov	r0, r3
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	3b05      	subs	r3, #5
 8001872:	fa00 f203 	lsl.w	r2, r0, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	635a      	str	r2, [r3, #52]	@ 0x34
 800187e:	e04c      	b.n	800191a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b0c      	cmp	r3, #12
 8001886:	d824      	bhi.n	80018d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	3b23      	subs	r3, #35	@ 0x23
 800189a:	221f      	movs	r2, #31
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43da      	mvns	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	400a      	ands	r2, r1
 80018a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	3b23      	subs	r3, #35	@ 0x23
 80018c4:	fa00 f203 	lsl.w	r2, r0, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80018d0:	e023      	b.n	800191a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	3b41      	subs	r3, #65	@ 0x41
 80018e4:	221f      	movs	r2, #31
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	400a      	ands	r2, r1
 80018f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4618      	mov	r0, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	3b41      	subs	r3, #65	@ 0x41
 800190e:	fa00 f203 	lsl.w	r2, r0, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800191a:	4b29      	ldr	r3, [pc, #164]	@ (80019c0 <HAL_ADC_ConfigChannel+0x250>)
 800191c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a28      	ldr	r2, [pc, #160]	@ (80019c4 <HAL_ADC_ConfigChannel+0x254>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d10f      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x1d8>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b12      	cmp	r3, #18
 800192e:	d10b      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <HAL_ADC_ConfigChannel+0x254>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d12b      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x23a>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1c      	ldr	r2, [pc, #112]	@ (80019c8 <HAL_ADC_ConfigChannel+0x258>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d003      	beq.n	8001964 <HAL_ADC_ConfigChannel+0x1f4>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b11      	cmp	r3, #17
 8001962:	d122      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a11      	ldr	r2, [pc, #68]	@ (80019c8 <HAL_ADC_ConfigChannel+0x258>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d111      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001986:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <HAL_ADC_ConfigChannel+0x25c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a11      	ldr	r2, [pc, #68]	@ (80019d0 <HAL_ADC_ConfigChannel+0x260>)
 800198c:	fba2 2303 	umull	r2, r3, r2, r3
 8001990:	0c9a      	lsrs	r2, r3, #18
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800199c:	e002      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f9      	bne.n	800199e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40012300 	.word	0x40012300
 80019c4:	40012000 	.word	0x40012000
 80019c8:	10000012 	.word	0x10000012
 80019cc:	20000000 	.word	0x20000000
 80019d0:	431bde83 	.word	0x431bde83

080019d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019dc:	4b79      	ldr	r3, [pc, #484]	@ (8001bc4 <ADC_Init+0x1f0>)
 80019de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	431a      	orrs	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	021a      	lsls	r2, r3, #8
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001a2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6899      	ldr	r1, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a66:	4a58      	ldr	r2, [pc, #352]	@ (8001bc8 <ADC_Init+0x1f4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d022      	beq.n	8001ab2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6899      	ldr	r1, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6899      	ldr	r1, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	e00f      	b.n	8001ad2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ac0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ad0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0202 	bic.w	r2, r2, #2
 8001ae0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6899      	ldr	r1, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7e1b      	ldrb	r3, [r3, #24]
 8001aec:	005a      	lsls	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d01b      	beq.n	8001b38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b0e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6859      	ldr	r1, [r3, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	035a      	lsls	r2, r3, #13
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	e007      	b.n	8001b48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b46:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	3b01      	subs	r3, #1
 8001b64:	051a      	lsls	r2, r3, #20
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6899      	ldr	r1, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b8a:	025a      	lsls	r2, r3, #9
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ba2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6899      	ldr	r1, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	029a      	lsls	r2, r3, #10
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	609a      	str	r2, [r3, #8]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40012300 	.word	0x40012300
 8001bc8:	0f000001 	.word	0x0f000001

08001bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfe:	4a04      	ldr	r2, [pc, #16]	@ (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b04      	ldr	r3, [pc, #16]	@ (8001c2c <__NVIC_GetPriorityGrouping+0x18>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 0307 	and.w	r3, r3, #7
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db0b      	blt.n	8001c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	f003 021f 	and.w	r2, r3, #31
 8001c48:	4907      	ldr	r1, [pc, #28]	@ (8001c68 <__NVIC_EnableIRQ+0x38>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	2001      	movs	r0, #1
 8001c52:	fa00 f202 	lsl.w	r2, r0, r2
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000e100 	.word	0xe000e100

08001c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db0a      	blt.n	8001c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	490c      	ldr	r1, [pc, #48]	@ (8001cb8 <__NVIC_SetPriority+0x4c>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	0112      	lsls	r2, r2, #4
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c94:	e00a      	b.n	8001cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4908      	ldr	r1, [pc, #32]	@ (8001cbc <__NVIC_SetPriority+0x50>)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	3b04      	subs	r3, #4
 8001ca4:	0112      	lsls	r2, r2, #4
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	440b      	add	r3, r1
 8001caa:	761a      	strb	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000e100 	.word	0xe000e100
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	@ 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f1c3 0307 	rsb	r3, r3, #7
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	bf28      	it	cs
 8001cde:	2304      	movcs	r3, #4
 8001ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d902      	bls.n	8001cf0 <NVIC_EncodePriority+0x30>
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3b03      	subs	r3, #3
 8001cee:	e000      	b.n	8001cf2 <NVIC_EncodePriority+0x32>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	401a      	ands	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d08:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	43d9      	mvns	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	4313      	orrs	r3, r2
         );
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	@ 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ff4c 	bl	8001bcc <__NVIC_SetPriorityGrouping>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4e:	f7ff ff61 	bl	8001c14 <__NVIC_GetPriorityGrouping>
 8001d52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	6978      	ldr	r0, [r7, #20]
 8001d5a:	f7ff ffb1 	bl	8001cc0 <NVIC_EncodePriority>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff80 	bl	8001c6c <__NVIC_SetPriority>
}
 8001d6c:	bf00      	nop
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ff54 	bl	8001c30 <__NVIC_EnableIRQ>
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e014      	b.n	8001dcc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	791b      	ldrb	r3, [r3, #4]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d105      	bne.n	8001db8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff f984 	bl	80010c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dea:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d01d      	beq.n	8001e32 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d018      	beq.n	8001e32 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2204      	movs	r2, #4
 8001e04:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e1a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f827 	bl	8001e80 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d01d      	beq.n	8001e78 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d018      	beq.n	8001e78 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2204      	movs	r2, #4
 8001e4a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f043 0202 	orr.w	r2, r3, #2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001e60:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001e70:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f867 	bl	8001f46 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	@ 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_DAC_ConfigChannel+0x1c>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e042      	b.n	8001f3a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	795b      	ldrb	r3, [r3, #5]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_DAC_ConfigChannel+0x2c>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e03c      	b.n	8001f3a <HAL_DAC_ConfigChannel+0xa6>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2202      	movs	r2, #2
 8001eca:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6819      	ldr	r1, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	22c0      	movs	r2, #192	@ 0xc0
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	400a      	ands	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001f38:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	@ 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f68:	f7ff fb8e 	bl	8001688 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e099      	b.n	80020ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f98:	e00f      	b.n	8001fba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f9a:	f7ff fb75 	bl	8001688 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	d908      	bls.n	8001fba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e078      	b.n	80020ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1e8      	bne.n	8001f9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	4b38      	ldr	r3, [pc, #224]	@ (80020b4 <HAL_DMA_Init+0x158>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	2b04      	cmp	r3, #4
 8002012:	d107      	bne.n	8002024 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201c:	4313      	orrs	r3, r2
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f023 0307 	bic.w	r3, r3, #7
 800203a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	4313      	orrs	r3, r2
 8002044:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204a:	2b04      	cmp	r3, #4
 800204c:	d117      	bne.n	800207e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4313      	orrs	r3, r2
 8002056:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00e      	beq.n	800207e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f9e9 	bl	8002438 <DMA_CheckFifoParam>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d008      	beq.n	800207e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2240      	movs	r2, #64	@ 0x40
 8002070:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800207a:	2301      	movs	r3, #1
 800207c:	e016      	b.n	80020ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f9a0 	bl	80023cc <DMA_CalcBaseAndBitshift>
 800208c:	4603      	mov	r3, r0
 800208e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002094:	223f      	movs	r2, #63	@ 0x3f
 8002096:	409a      	lsls	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	f010803f 	.word	0xf010803f

080020b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002300 <HAL_DMA_IRQHandler+0x248>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a8e      	ldr	r2, [pc, #568]	@ (8002304 <HAL_DMA_IRQHandler+0x24c>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	0a9b      	lsrs	r3, r3, #10
 80020d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e2:	2208      	movs	r2, #8
 80020e4:	409a      	lsls	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d01a      	beq.n	8002124 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d013      	beq.n	8002124 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0204 	bic.w	r2, r2, #4
 800210a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002110:	2208      	movs	r2, #8
 8002112:	409a      	lsls	r2, r3
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002128:	2201      	movs	r2, #1
 800212a:	409a      	lsls	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d012      	beq.n	800215a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002146:	2201      	movs	r2, #1
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002152:	f043 0202 	orr.w	r2, r3, #2
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215e:	2204      	movs	r2, #4
 8002160:	409a      	lsls	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d012      	beq.n	8002190 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00b      	beq.n	8002190 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217c:	2204      	movs	r2, #4
 800217e:	409a      	lsls	r2, r3
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002188:	f043 0204 	orr.w	r2, r3, #4
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002194:	2210      	movs	r2, #16
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d043      	beq.n	8002228 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d03c      	beq.n	8002228 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b2:	2210      	movs	r2, #16
 80021b4:	409a      	lsls	r2, r3
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d018      	beq.n	80021fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d108      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d024      	beq.n	8002228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
 80021e6:	e01f      	b.n	8002228 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01b      	beq.n	8002228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
 80021f8:	e016      	b.n	8002228 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0208 	bic.w	r2, r2, #8
 8002216:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222c:	2220      	movs	r2, #32
 800222e:	409a      	lsls	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 808f 	beq.w	8002358 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 8087 	beq.w	8002358 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224e:	2220      	movs	r2, #32
 8002250:	409a      	lsls	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b05      	cmp	r3, #5
 8002260:	d136      	bne.n	80022d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0216 	bic.w	r2, r2, #22
 8002270:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002280:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d103      	bne.n	8002292 <HAL_DMA_IRQHandler+0x1da>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0208 	bic.w	r2, r2, #8
 80022a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a6:	223f      	movs	r2, #63	@ 0x3f
 80022a8:	409a      	lsls	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d07e      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
        }
        return;
 80022ce:	e079      	b.n	80023c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d01d      	beq.n	800231a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10d      	bne.n	8002308 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d031      	beq.n	8002358 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	4798      	blx	r3
 80022fc:	e02c      	b.n	8002358 <HAL_DMA_IRQHandler+0x2a0>
 80022fe:	bf00      	nop
 8002300:	20000000 	.word	0x20000000
 8002304:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d023      	beq.n	8002358 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	4798      	blx	r3
 8002318:	e01e      	b.n	8002358 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10f      	bne.n	8002348 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0210 	bic.w	r2, r2, #16
 8002336:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235c:	2b00      	cmp	r3, #0
 800235e:	d032      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d022      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2205      	movs	r2, #5
 8002370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	3301      	adds	r3, #1
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	429a      	cmp	r2, r3
 800238e:	d307      	bcc.n	80023a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f2      	bne.n	8002384 <HAL_DMA_IRQHandler+0x2cc>
 800239e:	e000      	b.n	80023a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
 80023c2:	e000      	b.n	80023c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023c4:	bf00      	nop
    }
  }
}
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	3b10      	subs	r3, #16
 80023dc:	4a14      	ldr	r2, [pc, #80]	@ (8002430 <DMA_CalcBaseAndBitshift+0x64>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023e6:	4a13      	ldr	r2, [pc, #76]	@ (8002434 <DMA_CalcBaseAndBitshift+0x68>)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d909      	bls.n	800240e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002402:	f023 0303 	bic.w	r3, r3, #3
 8002406:	1d1a      	adds	r2, r3, #4
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	659a      	str	r2, [r3, #88]	@ 0x58
 800240c:	e007      	b.n	800241e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	aaaaaaab 	.word	0xaaaaaaab
 8002434:	080077cc 	.word	0x080077cc

08002438 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d11f      	bne.n	8002492 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d856      	bhi.n	8002506 <DMA_CheckFifoParam+0xce>
 8002458:	a201      	add	r2, pc, #4	@ (adr r2, 8002460 <DMA_CheckFifoParam+0x28>)
 800245a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245e:	bf00      	nop
 8002460:	08002471 	.word	0x08002471
 8002464:	08002483 	.word	0x08002483
 8002468:	08002471 	.word	0x08002471
 800246c:	08002507 	.word	0x08002507
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d046      	beq.n	800250a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002480:	e043      	b.n	800250a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002486:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800248a:	d140      	bne.n	800250e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002490:	e03d      	b.n	800250e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800249a:	d121      	bne.n	80024e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d837      	bhi.n	8002512 <DMA_CheckFifoParam+0xda>
 80024a2:	a201      	add	r2, pc, #4	@ (adr r2, 80024a8 <DMA_CheckFifoParam+0x70>)
 80024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a8:	080024b9 	.word	0x080024b9
 80024ac:	080024bf 	.word	0x080024bf
 80024b0:	080024b9 	.word	0x080024b9
 80024b4:	080024d1 	.word	0x080024d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
      break;
 80024bc:	e030      	b.n	8002520 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d025      	beq.n	8002516 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ce:	e022      	b.n	8002516 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024d8:	d11f      	bne.n	800251a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024de:	e01c      	b.n	800251a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d903      	bls.n	80024ee <DMA_CheckFifoParam+0xb6>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d003      	beq.n	80024f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024ec:	e018      	b.n	8002520 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
      break;
 80024f2:	e015      	b.n	8002520 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00e      	beq.n	800251e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
      break;
 8002504:	e00b      	b.n	800251e <DMA_CheckFifoParam+0xe6>
      break;
 8002506:	bf00      	nop
 8002508:	e00a      	b.n	8002520 <DMA_CheckFifoParam+0xe8>
      break;
 800250a:	bf00      	nop
 800250c:	e008      	b.n	8002520 <DMA_CheckFifoParam+0xe8>
      break;
 800250e:	bf00      	nop
 8002510:	e006      	b.n	8002520 <DMA_CheckFifoParam+0xe8>
      break;
 8002512:	bf00      	nop
 8002514:	e004      	b.n	8002520 <DMA_CheckFifoParam+0xe8>
      break;
 8002516:	bf00      	nop
 8002518:	e002      	b.n	8002520 <DMA_CheckFifoParam+0xe8>
      break;   
 800251a:	bf00      	nop
 800251c:	e000      	b.n	8002520 <DMA_CheckFifoParam+0xe8>
      break;
 800251e:	bf00      	nop
    }
  } 
  
  return status; 
 8002520:	7bfb      	ldrb	r3, [r7, #15]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop

08002530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002530:	b480      	push	{r7}
 8002532:	b089      	sub	sp, #36	@ 0x24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	e165      	b.n	8002818 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800254c:	2201      	movs	r2, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	429a      	cmp	r2, r3
 8002566:	f040 8154 	bne.w	8002812 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d005      	beq.n	8002582 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257e:	2b02      	cmp	r3, #2
 8002580:	d130      	bne.n	80025e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	2203      	movs	r2, #3
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b8:	2201      	movs	r2, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 0201 	and.w	r2, r3, #1
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d017      	beq.n	8002620 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	2203      	movs	r2, #3
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d123      	bne.n	8002674 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	08da      	lsrs	r2, r3, #3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3208      	adds	r2, #8
 8002634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	220f      	movs	r2, #15
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	08da      	lsrs	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3208      	adds	r2, #8
 800266e:	69b9      	ldr	r1, [r7, #24]
 8002670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	2203      	movs	r2, #3
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0203 	and.w	r2, r3, #3
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80ae 	beq.w	8002812 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002830 <HAL_GPIO_Init+0x300>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	4a5c      	ldr	r2, [pc, #368]	@ (8002830 <HAL_GPIO_Init+0x300>)
 80026c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002830 <HAL_GPIO_Init+0x300>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026d2:	4a58      	ldr	r2, [pc, #352]	@ (8002834 <HAL_GPIO_Init+0x304>)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	089b      	lsrs	r3, r3, #2
 80026d8:	3302      	adds	r3, #2
 80026da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	220f      	movs	r2, #15
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002838 <HAL_GPIO_Init+0x308>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d025      	beq.n	800274a <HAL_GPIO_Init+0x21a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4e      	ldr	r2, [pc, #312]	@ (800283c <HAL_GPIO_Init+0x30c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01f      	beq.n	8002746 <HAL_GPIO_Init+0x216>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4d      	ldr	r2, [pc, #308]	@ (8002840 <HAL_GPIO_Init+0x310>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d019      	beq.n	8002742 <HAL_GPIO_Init+0x212>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4c      	ldr	r2, [pc, #304]	@ (8002844 <HAL_GPIO_Init+0x314>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_GPIO_Init+0x20e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4b      	ldr	r2, [pc, #300]	@ (8002848 <HAL_GPIO_Init+0x318>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00d      	beq.n	800273a <HAL_GPIO_Init+0x20a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4a      	ldr	r2, [pc, #296]	@ (800284c <HAL_GPIO_Init+0x31c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x206>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a49      	ldr	r2, [pc, #292]	@ (8002850 <HAL_GPIO_Init+0x320>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_GPIO_Init+0x202>
 800272e:	2306      	movs	r3, #6
 8002730:	e00c      	b.n	800274c <HAL_GPIO_Init+0x21c>
 8002732:	2307      	movs	r3, #7
 8002734:	e00a      	b.n	800274c <HAL_GPIO_Init+0x21c>
 8002736:	2305      	movs	r3, #5
 8002738:	e008      	b.n	800274c <HAL_GPIO_Init+0x21c>
 800273a:	2304      	movs	r3, #4
 800273c:	e006      	b.n	800274c <HAL_GPIO_Init+0x21c>
 800273e:	2303      	movs	r3, #3
 8002740:	e004      	b.n	800274c <HAL_GPIO_Init+0x21c>
 8002742:	2302      	movs	r3, #2
 8002744:	e002      	b.n	800274c <HAL_GPIO_Init+0x21c>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_GPIO_Init+0x21c>
 800274a:	2300      	movs	r3, #0
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	f002 0203 	and.w	r2, r2, #3
 8002752:	0092      	lsls	r2, r2, #2
 8002754:	4093      	lsls	r3, r2
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800275c:	4935      	ldr	r1, [pc, #212]	@ (8002834 <HAL_GPIO_Init+0x304>)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800276a:	4b3a      	ldr	r3, [pc, #232]	@ (8002854 <HAL_GPIO_Init+0x324>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800278e:	4a31      	ldr	r2, [pc, #196]	@ (8002854 <HAL_GPIO_Init+0x324>)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002794:	4b2f      	ldr	r3, [pc, #188]	@ (8002854 <HAL_GPIO_Init+0x324>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b8:	4a26      	ldr	r2, [pc, #152]	@ (8002854 <HAL_GPIO_Init+0x324>)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027be:	4b25      	ldr	r3, [pc, #148]	@ (8002854 <HAL_GPIO_Init+0x324>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002854 <HAL_GPIO_Init+0x324>)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002854 <HAL_GPIO_Init+0x324>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800280c:	4a11      	ldr	r2, [pc, #68]	@ (8002854 <HAL_GPIO_Init+0x324>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3301      	adds	r3, #1
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	2b0f      	cmp	r3, #15
 800281c:	f67f ae96 	bls.w	800254c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3724      	adds	r7, #36	@ 0x24
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	40013800 	.word	0x40013800
 8002838:	40020000 	.word	0x40020000
 800283c:	40020400 	.word	0x40020400
 8002840:	40020800 	.word	0x40020800
 8002844:	40020c00 	.word	0x40020c00
 8002848:	40021000 	.word	0x40021000
 800284c:	40021400 	.word	0x40021400
 8002850:	40021800 	.word	0x40021800
 8002854:	40013c00 	.word	0x40013c00

08002858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
 8002864:	4613      	mov	r3, r2
 8002866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002868:	787b      	ldrb	r3, [r7, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002874:	e003      	b.n	800287e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002876:	887b      	ldrh	r3, [r7, #2]
 8002878:	041a      	lsls	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	619a      	str	r2, [r3, #24]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e12b      	b.n	8002af6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe fc50 	bl	8001158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2224      	movs	r2, #36	@ 0x24
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028f0:	f000 fa02 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 80028f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4a81      	ldr	r2, [pc, #516]	@ (8002b00 <HAL_I2C_Init+0x274>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d807      	bhi.n	8002910 <HAL_I2C_Init+0x84>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a80      	ldr	r2, [pc, #512]	@ (8002b04 <HAL_I2C_Init+0x278>)
 8002904:	4293      	cmp	r3, r2
 8002906:	bf94      	ite	ls
 8002908:	2301      	movls	r3, #1
 800290a:	2300      	movhi	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	e006      	b.n	800291e <HAL_I2C_Init+0x92>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a7d      	ldr	r2, [pc, #500]	@ (8002b08 <HAL_I2C_Init+0x27c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	bf94      	ite	ls
 8002918:	2301      	movls	r3, #1
 800291a:	2300      	movhi	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e0e7      	b.n	8002af6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4a78      	ldr	r2, [pc, #480]	@ (8002b0c <HAL_I2C_Init+0x280>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	0c9b      	lsrs	r3, r3, #18
 8002930:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a6a      	ldr	r2, [pc, #424]	@ (8002b00 <HAL_I2C_Init+0x274>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d802      	bhi.n	8002960 <HAL_I2C_Init+0xd4>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	3301      	adds	r3, #1
 800295e:	e009      	b.n	8002974 <HAL_I2C_Init+0xe8>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	4a69      	ldr	r2, [pc, #420]	@ (8002b10 <HAL_I2C_Init+0x284>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	099b      	lsrs	r3, r3, #6
 8002972:	3301      	adds	r3, #1
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	430b      	orrs	r3, r1
 800297a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002986:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	495c      	ldr	r1, [pc, #368]	@ (8002b00 <HAL_I2C_Init+0x274>)
 8002990:	428b      	cmp	r3, r1
 8002992:	d819      	bhi.n	80029c8 <HAL_I2C_Init+0x13c>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e59      	subs	r1, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	fbb1 f3f3 	udiv	r3, r1, r3
 80029a2:	1c59      	adds	r1, r3, #1
 80029a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029a8:	400b      	ands	r3, r1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_I2C_Init+0x138>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1e59      	subs	r1, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c2:	e051      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 80029c4:	2304      	movs	r3, #4
 80029c6:	e04f      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d111      	bne.n	80029f4 <HAL_I2C_Init+0x168>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1e58      	subs	r0, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	440b      	add	r3, r1
 80029de:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e012      	b.n	8002a1a <HAL_I2C_Init+0x18e>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1e58      	subs	r0, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	0099      	lsls	r1, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf0c      	ite	eq
 8002a14:	2301      	moveq	r3, #1
 8002a16:	2300      	movne	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Init+0x196>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e022      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10e      	bne.n	8002a48 <HAL_I2C_Init+0x1bc>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1e58      	subs	r0, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	460b      	mov	r3, r1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	440b      	add	r3, r1
 8002a38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a46:	e00f      	b.n	8002a68 <HAL_I2C_Init+0x1dc>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1e58      	subs	r0, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	0099      	lsls	r1, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5e:	3301      	adds	r3, #1
 8002a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	6809      	ldr	r1, [r1, #0]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69da      	ldr	r2, [r3, #28]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6911      	ldr	r1, [r2, #16]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68d2      	ldr	r2, [r2, #12]
 8002aa2:	4311      	orrs	r1, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	000186a0 	.word	0x000186a0
 8002b04:	001e847f 	.word	0x001e847f
 8002b08:	003d08ff 	.word	0x003d08ff
 8002b0c:	431bde83 	.word	0x431bde83
 8002b10:	10624dd3 	.word	0x10624dd3

08002b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0cc      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b28:	4b68      	ldr	r3, [pc, #416]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d90c      	bls.n	8002b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b65      	ldr	r3, [pc, #404]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3e:	4b63      	ldr	r3, [pc, #396]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0b8      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d020      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b68:	4b59      	ldr	r3, [pc, #356]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	4a58      	ldr	r2, [pc, #352]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b80:	4b53      	ldr	r3, [pc, #332]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a52      	ldr	r2, [pc, #328]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b8c:	4b50      	ldr	r3, [pc, #320]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	494d      	ldr	r1, [pc, #308]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d044      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d107      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	4b47      	ldr	r3, [pc, #284]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d119      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e07f      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d003      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e06f      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be2:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e067      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bf2:	4b37      	ldr	r3, [pc, #220]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f023 0203 	bic.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4934      	ldr	r1, [pc, #208]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c04:	f7fe fd40 	bl	8001688 <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0c:	f7fe fd3c 	bl	8001688 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e04f      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 020c 	and.w	r2, r3, #12
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d1eb      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c34:	4b25      	ldr	r3, [pc, #148]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d20c      	bcs.n	8002c5c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b22      	ldr	r3, [pc, #136]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e032      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c68:	4b19      	ldr	r3, [pc, #100]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4916      	ldr	r1, [pc, #88]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d009      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c86:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	490e      	ldr	r1, [pc, #56]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c9a:	f000 f887 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	490a      	ldr	r1, [pc, #40]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002cac:	5ccb      	ldrb	r3, [r1, r3]
 8002cae:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb2:	4a09      	ldr	r2, [pc, #36]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cb6:	4b09      	ldr	r3, [pc, #36]	@ (8002cdc <HAL_RCC_ClockConfig+0x1c8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fe fbb2 	bl	8001424 <HAL_InitTick>

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023c00 	.word	0x40023c00
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	080077b4 	.word	0x080077b4
 8002cd8:	20000000 	.word	0x20000000
 8002cdc:	20000004 	.word	0x20000004

08002ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce4:	4b03      	ldr	r3, [pc, #12]	@ (8002cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000000 	.word	0x20000000

08002cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cfc:	f7ff fff0 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0a9b      	lsrs	r3, r3, #10
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4903      	ldr	r1, [pc, #12]	@ (8002d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	080077c4 	.word	0x080077c4

08002d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d24:	f7ff ffdc 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	@ (8002d40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0b5b      	lsrs	r3, r3, #13
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	@ (8002d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	080077c4 	.word	0x080077c4

08002d48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	220f      	movs	r2, #15
 8002d56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d58:	4b12      	ldr	r3, [pc, #72]	@ (8002da4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0203 	and.w	r2, r3, #3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d64:	4b0f      	ldr	r3, [pc, #60]	@ (8002da4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d70:	4b0c      	ldr	r3, [pc, #48]	@ (8002da4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d7c:	4b09      	ldr	r3, [pc, #36]	@ (8002da4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	08db      	lsrs	r3, r3, #3
 8002d82:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d8a:	4b07      	ldr	r3, [pc, #28]	@ (8002da8 <HAL_RCC_GetClockConfig+0x60>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 020f 	and.w	r2, r3, #15
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	601a      	str	r2, [r3, #0]
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40023c00 	.word	0x40023c00

08002dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db0:	b0ae      	sub	sp, #184	@ 0xb8
 8002db2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dd2:	4bcb      	ldr	r3, [pc, #812]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b0c      	cmp	r3, #12
 8002ddc:	f200 8206 	bhi.w	80031ec <HAL_RCC_GetSysClockFreq+0x440>
 8002de0:	a201      	add	r2, pc, #4	@ (adr r2, 8002de8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de6:	bf00      	nop
 8002de8:	08002e1d 	.word	0x08002e1d
 8002dec:	080031ed 	.word	0x080031ed
 8002df0:	080031ed 	.word	0x080031ed
 8002df4:	080031ed 	.word	0x080031ed
 8002df8:	08002e25 	.word	0x08002e25
 8002dfc:	080031ed 	.word	0x080031ed
 8002e00:	080031ed 	.word	0x080031ed
 8002e04:	080031ed 	.word	0x080031ed
 8002e08:	08002e2d 	.word	0x08002e2d
 8002e0c:	080031ed 	.word	0x080031ed
 8002e10:	080031ed 	.word	0x080031ed
 8002e14:	080031ed 	.word	0x080031ed
 8002e18:	0800301d 	.word	0x0800301d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e1c:	4bb9      	ldr	r3, [pc, #740]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x358>)
 8002e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e22:	e1e7      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e24:	4bb8      	ldr	r3, [pc, #736]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e2a:	e1e3      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e2c:	4bb4      	ldr	r3, [pc, #720]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e38:	4bb1      	ldr	r3, [pc, #708]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d071      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e44:	4bae      	ldr	r3, [pc, #696]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e50:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002e54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e60:	2300      	movs	r3, #0
 8002e62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002e66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	462b      	mov	r3, r5
 8002e6e:	f04f 0000 	mov.w	r0, #0
 8002e72:	f04f 0100 	mov.w	r1, #0
 8002e76:	0159      	lsls	r1, r3, #5
 8002e78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e7c:	0150      	lsls	r0, r2, #5
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4621      	mov	r1, r4
 8002e84:	1a51      	subs	r1, r2, r1
 8002e86:	6439      	str	r1, [r7, #64]	@ 0x40
 8002e88:	4629      	mov	r1, r5
 8002e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002e9c:	4649      	mov	r1, r9
 8002e9e:	018b      	lsls	r3, r1, #6
 8002ea0:	4641      	mov	r1, r8
 8002ea2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ea6:	4641      	mov	r1, r8
 8002ea8:	018a      	lsls	r2, r1, #6
 8002eaa:	4641      	mov	r1, r8
 8002eac:	1a51      	subs	r1, r2, r1
 8002eae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002eb0:	4649      	mov	r1, r9
 8002eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	00cb      	lsls	r3, r1, #3
 8002ec8:	4641      	mov	r1, r8
 8002eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ece:	4641      	mov	r1, r8
 8002ed0:	00ca      	lsls	r2, r1, #3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4622      	mov	r2, r4
 8002eda:	189b      	adds	r3, r3, r2
 8002edc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ede:	462b      	mov	r3, r5
 8002ee0:	460a      	mov	r2, r1
 8002ee2:	eb42 0303 	adc.w	r3, r2, r3
 8002ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	024b      	lsls	r3, r1, #9
 8002ef8:	4621      	mov	r1, r4
 8002efa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002efe:	4621      	mov	r1, r4
 8002f00:	024a      	lsls	r2, r1, #9
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002f18:	f7fd f97a 	bl	8000210 <__aeabi_uldivmod>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4613      	mov	r3, r2
 8002f22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f26:	e067      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f28:	4b75      	ldr	r3, [pc, #468]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f34:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002f38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f42:	2300      	movs	r3, #0
 8002f44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002f46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002f4a:	4622      	mov	r2, r4
 8002f4c:	462b      	mov	r3, r5
 8002f4e:	f04f 0000 	mov.w	r0, #0
 8002f52:	f04f 0100 	mov.w	r1, #0
 8002f56:	0159      	lsls	r1, r3, #5
 8002f58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f5c:	0150      	lsls	r0, r2, #5
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4621      	mov	r1, r4
 8002f64:	1a51      	subs	r1, r2, r1
 8002f66:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002f68:	4629      	mov	r1, r5
 8002f6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002f7c:	4649      	mov	r1, r9
 8002f7e:	018b      	lsls	r3, r1, #6
 8002f80:	4641      	mov	r1, r8
 8002f82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f86:	4641      	mov	r1, r8
 8002f88:	018a      	lsls	r2, r1, #6
 8002f8a:	4641      	mov	r1, r8
 8002f8c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f90:	4649      	mov	r1, r9
 8002f92:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fa2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002faa:	4692      	mov	sl, r2
 8002fac:	469b      	mov	fp, r3
 8002fae:	4623      	mov	r3, r4
 8002fb0:	eb1a 0303 	adds.w	r3, sl, r3
 8002fb4:	623b      	str	r3, [r7, #32]
 8002fb6:	462b      	mov	r3, r5
 8002fb8:	eb4b 0303 	adc.w	r3, fp, r3
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002fca:	4629      	mov	r1, r5
 8002fcc:	028b      	lsls	r3, r1, #10
 8002fce:	4621      	mov	r1, r4
 8002fd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	028a      	lsls	r2, r1, #10
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fe4:	677a      	str	r2, [r7, #116]	@ 0x74
 8002fe6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002fea:	f7fd f911 	bl	8000210 <__aeabi_uldivmod>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ff8:	4b41      	ldr	r3, [pc, #260]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	3301      	adds	r3, #1
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800300a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800300e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003012:	fbb2 f3f3 	udiv	r3, r2, r3
 8003016:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800301a:	e0eb      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800301c:	4b38      	ldr	r3, [pc, #224]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x354>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003024:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003028:	4b35      	ldr	r3, [pc, #212]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x354>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d06b      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003034:	4b32      	ldr	r3, [pc, #200]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x354>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	099b      	lsrs	r3, r3, #6
 800303a:	2200      	movs	r2, #0
 800303c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800303e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003046:	663b      	str	r3, [r7, #96]	@ 0x60
 8003048:	2300      	movs	r3, #0
 800304a:	667b      	str	r3, [r7, #100]	@ 0x64
 800304c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003050:	4622      	mov	r2, r4
 8003052:	462b      	mov	r3, r5
 8003054:	f04f 0000 	mov.w	r0, #0
 8003058:	f04f 0100 	mov.w	r1, #0
 800305c:	0159      	lsls	r1, r3, #5
 800305e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003062:	0150      	lsls	r0, r2, #5
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4621      	mov	r1, r4
 800306a:	1a51      	subs	r1, r2, r1
 800306c:	61b9      	str	r1, [r7, #24]
 800306e:	4629      	mov	r1, r5
 8003070:	eb63 0301 	sbc.w	r3, r3, r1
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003082:	4659      	mov	r1, fp
 8003084:	018b      	lsls	r3, r1, #6
 8003086:	4651      	mov	r1, sl
 8003088:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800308c:	4651      	mov	r1, sl
 800308e:	018a      	lsls	r2, r1, #6
 8003090:	4651      	mov	r1, sl
 8003092:	ebb2 0801 	subs.w	r8, r2, r1
 8003096:	4659      	mov	r1, fp
 8003098:	eb63 0901 	sbc.w	r9, r3, r1
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030b0:	4690      	mov	r8, r2
 80030b2:	4699      	mov	r9, r3
 80030b4:	4623      	mov	r3, r4
 80030b6:	eb18 0303 	adds.w	r3, r8, r3
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	462b      	mov	r3, r5
 80030be:	eb49 0303 	adc.w	r3, r9, r3
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80030d0:	4629      	mov	r1, r5
 80030d2:	024b      	lsls	r3, r1, #9
 80030d4:	4621      	mov	r1, r4
 80030d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030da:	4621      	mov	r1, r4
 80030dc:	024a      	lsls	r2, r1, #9
 80030de:	4610      	mov	r0, r2
 80030e0:	4619      	mov	r1, r3
 80030e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030e6:	2200      	movs	r2, #0
 80030e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80030ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030f0:	f7fd f88e 	bl	8000210 <__aeabi_uldivmod>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4613      	mov	r3, r2
 80030fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030fe:	e065      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x420>
 8003100:	40023800 	.word	0x40023800
 8003104:	00f42400 	.word	0x00f42400
 8003108:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800310c:	4b3d      	ldr	r3, [pc, #244]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x458>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	2200      	movs	r2, #0
 8003114:	4618      	mov	r0, r3
 8003116:	4611      	mov	r1, r2
 8003118:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800311c:	653b      	str	r3, [r7, #80]	@ 0x50
 800311e:	2300      	movs	r3, #0
 8003120:	657b      	str	r3, [r7, #84]	@ 0x54
 8003122:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003126:	4642      	mov	r2, r8
 8003128:	464b      	mov	r3, r9
 800312a:	f04f 0000 	mov.w	r0, #0
 800312e:	f04f 0100 	mov.w	r1, #0
 8003132:	0159      	lsls	r1, r3, #5
 8003134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003138:	0150      	lsls	r0, r2, #5
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4641      	mov	r1, r8
 8003140:	1a51      	subs	r1, r2, r1
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	4649      	mov	r1, r9
 8003146:	eb63 0301 	sbc.w	r3, r3, r1
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003158:	4659      	mov	r1, fp
 800315a:	018b      	lsls	r3, r1, #6
 800315c:	4651      	mov	r1, sl
 800315e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003162:	4651      	mov	r1, sl
 8003164:	018a      	lsls	r2, r1, #6
 8003166:	4651      	mov	r1, sl
 8003168:	1a54      	subs	r4, r2, r1
 800316a:	4659      	mov	r1, fp
 800316c:	eb63 0501 	sbc.w	r5, r3, r1
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	00eb      	lsls	r3, r5, #3
 800317a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800317e:	00e2      	lsls	r2, r4, #3
 8003180:	4614      	mov	r4, r2
 8003182:	461d      	mov	r5, r3
 8003184:	4643      	mov	r3, r8
 8003186:	18e3      	adds	r3, r4, r3
 8003188:	603b      	str	r3, [r7, #0]
 800318a:	464b      	mov	r3, r9
 800318c:	eb45 0303 	adc.w	r3, r5, r3
 8003190:	607b      	str	r3, [r7, #4]
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800319e:	4629      	mov	r1, r5
 80031a0:	028b      	lsls	r3, r1, #10
 80031a2:	4621      	mov	r1, r4
 80031a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031a8:	4621      	mov	r1, r4
 80031aa:	028a      	lsls	r2, r1, #10
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031b4:	2200      	movs	r2, #0
 80031b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80031ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031be:	f7fd f827 	bl	8000210 <__aeabi_uldivmod>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4613      	mov	r3, r2
 80031c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x458>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	0f1b      	lsrs	r3, r3, #28
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80031da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80031de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031ea:	e003      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031ec:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <HAL_RCC_GetSysClockFreq+0x45c>)
 80031ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	37b8      	adds	r7, #184	@ 0xb8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
 8003208:	00f42400 	.word	0x00f42400

0800320c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e28d      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 8083 	beq.w	8003332 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800322c:	4b94      	ldr	r3, [pc, #592]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 030c 	and.w	r3, r3, #12
 8003234:	2b04      	cmp	r3, #4
 8003236:	d019      	beq.n	800326c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003238:	4b91      	ldr	r3, [pc, #580]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003240:	2b08      	cmp	r3, #8
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003244:	4b8e      	ldr	r3, [pc, #568]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800324c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003250:	d00c      	beq.n	800326c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003252:	4b8b      	ldr	r3, [pc, #556]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800325a:	2b0c      	cmp	r3, #12
 800325c:	d112      	bne.n	8003284 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325e:	4b88      	ldr	r3, [pc, #544]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003266:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800326a:	d10b      	bne.n	8003284 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800326c:	4b84      	ldr	r3, [pc, #528]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d05b      	beq.n	8003330 <HAL_RCC_OscConfig+0x124>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d157      	bne.n	8003330 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e25a      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800328c:	d106      	bne.n	800329c <HAL_RCC_OscConfig+0x90>
 800328e:	4b7c      	ldr	r3, [pc, #496]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7b      	ldr	r2, [pc, #492]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e01d      	b.n	80032d8 <HAL_RCC_OscConfig+0xcc>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0xb4>
 80032a6:	4b76      	ldr	r3, [pc, #472]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a75      	ldr	r2, [pc, #468]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 80032ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	4b73      	ldr	r3, [pc, #460]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a72      	ldr	r2, [pc, #456]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_OscConfig+0xcc>
 80032c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 80032c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 80032d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d013      	beq.n	8003308 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe f9d2 	bl	8001688 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fe f9ce 	bl	8001688 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	@ 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e21f      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b61      	ldr	r3, [pc, #388]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0xdc>
 8003306:	e014      	b.n	8003332 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe f9be 	bl	8001688 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003310:	f7fe f9ba 	bl	8001688 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	@ 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e20b      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003322:	4b57      	ldr	r3, [pc, #348]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x104>
 800332e:	e000      	b.n	8003332 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d06f      	beq.n	800341e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800333e:	4b50      	ldr	r3, [pc, #320]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b00      	cmp	r3, #0
 8003348:	d017      	beq.n	800337a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800334a:	4b4d      	ldr	r3, [pc, #308]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003352:	2b08      	cmp	r3, #8
 8003354:	d105      	bne.n	8003362 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003356:	4b4a      	ldr	r3, [pc, #296]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003362:	4b47      	ldr	r3, [pc, #284]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800336a:	2b0c      	cmp	r3, #12
 800336c:	d11c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800336e:	4b44      	ldr	r3, [pc, #272]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d116      	bne.n	80033a8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337a:	4b41      	ldr	r3, [pc, #260]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <HAL_RCC_OscConfig+0x186>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d001      	beq.n	8003392 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e1d3      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003392:	4b3b      	ldr	r3, [pc, #236]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4937      	ldr	r1, [pc, #220]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a6:	e03a      	b.n	800341e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d020      	beq.n	80033f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b0:	4b34      	ldr	r3, [pc, #208]	@ (8003484 <HAL_RCC_OscConfig+0x278>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b6:	f7fe f967 	bl	8001688 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033be:	f7fe f963 	bl	8001688 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e1b4      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033dc:	4b28      	ldr	r3, [pc, #160]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4925      	ldr	r1, [pc, #148]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	600b      	str	r3, [r1, #0]
 80033f0:	e015      	b.n	800341e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f2:	4b24      	ldr	r3, [pc, #144]	@ (8003484 <HAL_RCC_OscConfig+0x278>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe f946 	bl	8001688 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003400:	f7fe f942 	bl	8001688 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e193      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003412:	4b1b      	ldr	r3, [pc, #108]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d036      	beq.n	8003498 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d016      	beq.n	8003460 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003432:	4b15      	ldr	r3, [pc, #84]	@ (8003488 <HAL_RCC_OscConfig+0x27c>)
 8003434:	2201      	movs	r2, #1
 8003436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003438:	f7fe f926 	bl	8001688 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003440:	f7fe f922 	bl	8001688 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e173      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003452:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <HAL_RCC_OscConfig+0x274>)
 8003454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0x234>
 800345e:	e01b      	b.n	8003498 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003460:	4b09      	ldr	r3, [pc, #36]	@ (8003488 <HAL_RCC_OscConfig+0x27c>)
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003466:	f7fe f90f 	bl	8001688 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800346c:	e00e      	b.n	800348c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346e:	f7fe f90b 	bl	8001688 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d907      	bls.n	800348c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e15c      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
 8003480:	40023800 	.word	0x40023800
 8003484:	42470000 	.word	0x42470000
 8003488:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348c:	4b8a      	ldr	r3, [pc, #552]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 800348e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1ea      	bne.n	800346e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8097 	beq.w	80035d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a6:	2300      	movs	r3, #0
 80034a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034aa:	4b83      	ldr	r3, [pc, #524]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10f      	bne.n	80034d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	4b7f      	ldr	r3, [pc, #508]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	4a7e      	ldr	r2, [pc, #504]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 80034c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80034c6:	4b7c      	ldr	r3, [pc, #496]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d2:	2301      	movs	r3, #1
 80034d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d6:	4b79      	ldr	r3, [pc, #484]	@ (80036bc <HAL_RCC_OscConfig+0x4b0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d118      	bne.n	8003514 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034e2:	4b76      	ldr	r3, [pc, #472]	@ (80036bc <HAL_RCC_OscConfig+0x4b0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a75      	ldr	r2, [pc, #468]	@ (80036bc <HAL_RCC_OscConfig+0x4b0>)
 80034e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ee:	f7fe f8cb 	bl	8001688 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f6:	f7fe f8c7 	bl	8001688 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e118      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003508:	4b6c      	ldr	r3, [pc, #432]	@ (80036bc <HAL_RCC_OscConfig+0x4b0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d106      	bne.n	800352a <HAL_RCC_OscConfig+0x31e>
 800351c:	4b66      	ldr	r3, [pc, #408]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003520:	4a65      	ldr	r2, [pc, #404]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	6713      	str	r3, [r2, #112]	@ 0x70
 8003528:	e01c      	b.n	8003564 <HAL_RCC_OscConfig+0x358>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b05      	cmp	r3, #5
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0x340>
 8003532:	4b61      	ldr	r3, [pc, #388]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003536:	4a60      	ldr	r2, [pc, #384]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 8003538:	f043 0304 	orr.w	r3, r3, #4
 800353c:	6713      	str	r3, [r2, #112]	@ 0x70
 800353e:	4b5e      	ldr	r3, [pc, #376]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003542:	4a5d      	ldr	r2, [pc, #372]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	6713      	str	r3, [r2, #112]	@ 0x70
 800354a:	e00b      	b.n	8003564 <HAL_RCC_OscConfig+0x358>
 800354c:	4b5a      	ldr	r3, [pc, #360]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003550:	4a59      	ldr	r2, [pc, #356]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 8003552:	f023 0301 	bic.w	r3, r3, #1
 8003556:	6713      	str	r3, [r2, #112]	@ 0x70
 8003558:	4b57      	ldr	r3, [pc, #348]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 800355a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355c:	4a56      	ldr	r2, [pc, #344]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 800355e:	f023 0304 	bic.w	r3, r3, #4
 8003562:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d015      	beq.n	8003598 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fe f88c 	bl	8001688 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003572:	e00a      	b.n	800358a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003574:	f7fe f888 	bl	8001688 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e0d7      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358a:	4b4b      	ldr	r3, [pc, #300]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0ee      	beq.n	8003574 <HAL_RCC_OscConfig+0x368>
 8003596:	e014      	b.n	80035c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003598:	f7fe f876 	bl	8001688 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359e:	e00a      	b.n	80035b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a0:	f7fe f872 	bl	8001688 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e0c1      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b6:	4b40      	ldr	r3, [pc, #256]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 80035b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1ee      	bne.n	80035a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d105      	bne.n	80035d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c8:	4b3b      	ldr	r3, [pc, #236]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 80035ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035cc:	4a3a      	ldr	r2, [pc, #232]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 80035ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80ad 	beq.w	8003738 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035de:	4b36      	ldr	r3, [pc, #216]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d060      	beq.n	80036ac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d145      	bne.n	800367e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f2:	4b33      	ldr	r3, [pc, #204]	@ (80036c0 <HAL_RCC_OscConfig+0x4b4>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fe f846 	bl	8001688 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003600:	f7fe f842 	bl	8001688 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e093      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003612:	4b29      	ldr	r3, [pc, #164]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69da      	ldr	r2, [r3, #28]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	019b      	lsls	r3, r3, #6
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003634:	085b      	lsrs	r3, r3, #1
 8003636:	3b01      	subs	r3, #1
 8003638:	041b      	lsls	r3, r3, #16
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003640:	061b      	lsls	r3, r3, #24
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003648:	071b      	lsls	r3, r3, #28
 800364a:	491b      	ldr	r1, [pc, #108]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003650:	4b1b      	ldr	r3, [pc, #108]	@ (80036c0 <HAL_RCC_OscConfig+0x4b4>)
 8003652:	2201      	movs	r2, #1
 8003654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003656:	f7fe f817 	bl	8001688 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365e:	f7fe f813 	bl	8001688 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e064      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003670:	4b11      	ldr	r3, [pc, #68]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x452>
 800367c:	e05c      	b.n	8003738 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367e:	4b10      	ldr	r3, [pc, #64]	@ (80036c0 <HAL_RCC_OscConfig+0x4b4>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fe f800 	bl	8001688 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368c:	f7fd fffc 	bl	8001688 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e04d      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369e:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <HAL_RCC_OscConfig+0x4ac>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x480>
 80036aa:	e045      	b.n	8003738 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d107      	bne.n	80036c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e040      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40007000 	.word	0x40007000
 80036c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003744 <HAL_RCC_OscConfig+0x538>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d030      	beq.n	8003734 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d129      	bne.n	8003734 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d122      	bne.n	8003734 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036f4:	4013      	ands	r3, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d119      	bne.n	8003734 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	3b01      	subs	r3, #1
 800370e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003710:	429a      	cmp	r2, r3
 8003712:	d10f      	bne.n	8003734 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d107      	bne.n	8003734 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800

08003748 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e07b      	b.n	8003852 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800376a:	d009      	beq.n	8003780 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	61da      	str	r2, [r3, #28]
 8003772:	e005      	b.n	8003780 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd fd24 	bl	80011e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003804:	ea42 0103 	orr.w	r1, r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	f003 0104 	and.w	r1, r3, #4
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	f003 0210 	and.w	r2, r3, #16
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003840:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e041      	b.n	80038f0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f839 	bl	80038f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2202      	movs	r2, #2
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3304      	adds	r3, #4
 8003896:	4619      	mov	r1, r3
 8003898:	4610      	mov	r0, r2
 800389a:	f000 fad1 	bl	8003e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d001      	beq.n	8003924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e04e      	b.n	80039c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a23      	ldr	r2, [pc, #140]	@ (80039d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d022      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800394e:	d01d      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1f      	ldr	r2, [pc, #124]	@ (80039d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d018      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1e      	ldr	r2, [pc, #120]	@ (80039d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d013      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1c      	ldr	r2, [pc, #112]	@ (80039dc <HAL_TIM_Base_Start_IT+0xd0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00e      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1b      	ldr	r2, [pc, #108]	@ (80039e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d009      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a19      	ldr	r2, [pc, #100]	@ (80039e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d004      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x80>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a18      	ldr	r2, [pc, #96]	@ (80039e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d111      	bne.n	80039b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b06      	cmp	r3, #6
 800399c:	d010      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0201 	orr.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ae:	e007      	b.n	80039c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40010000 	.word	0x40010000
 80039d4:	40000400 	.word	0x40000400
 80039d8:	40000800 	.word	0x40000800
 80039dc:	40000c00 	.word	0x40000c00
 80039e0:	40010400 	.word	0x40010400
 80039e4:	40014000 	.word	0x40014000
 80039e8:	40001800 	.word	0x40001800

080039ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e041      	b.n	8003a82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fd fc30 	bl	8001278 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f000 fa08 	bl	8003e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d020      	beq.n	8003aee <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01b      	beq.n	8003aee <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f06f 0202 	mvn.w	r2, #2
 8003abe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f995 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003ada:	e005      	b.n	8003ae8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f987 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f998 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d020      	beq.n	8003b3a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d01b      	beq.n	8003b3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f06f 0204 	mvn.w	r2, #4
 8003b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f96f 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003b26:	e005      	b.n	8003b34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f961 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f972 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01b      	beq.n	8003b86 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f06f 0208 	mvn.w	r2, #8
 8003b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f949 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003b72:	e005      	b.n	8003b80 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f93b 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f94c 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d020      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01b      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f06f 0210 	mvn.w	r2, #16
 8003ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f923 	bl	8003e04 <HAL_TIM_IC_CaptureCallback>
 8003bbe:	e005      	b.n	8003bcc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f915 	bl	8003df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f926 	bl	8003e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00c      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d007      	beq.n	8003bf6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f06f 0201 	mvn.w	r2, #1
 8003bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fd f971 	bl	8000ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00c      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d007      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fbef 	bl	80043f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00c      	beq.n	8003c3e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d007      	beq.n	8003c3e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f8f7 	bl	8003e2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00c      	beq.n	8003c62 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f06f 0220 	mvn.w	r2, #32
 8003c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fbc1 	bl	80043e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c62:	bf00      	nop
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e0ae      	b.n	8003de8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b0c      	cmp	r3, #12
 8003c96:	f200 809f 	bhi.w	8003dd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cd5 	.word	0x08003cd5
 8003ca4:	08003dd9 	.word	0x08003dd9
 8003ca8:	08003dd9 	.word	0x08003dd9
 8003cac:	08003dd9 	.word	0x08003dd9
 8003cb0:	08003d15 	.word	0x08003d15
 8003cb4:	08003dd9 	.word	0x08003dd9
 8003cb8:	08003dd9 	.word	0x08003dd9
 8003cbc:	08003dd9 	.word	0x08003dd9
 8003cc0:	08003d57 	.word	0x08003d57
 8003cc4:	08003dd9 	.word	0x08003dd9
 8003cc8:	08003dd9 	.word	0x08003dd9
 8003ccc:	08003dd9 	.word	0x08003dd9
 8003cd0:	08003d97 	.word	0x08003d97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f956 	bl	8003f8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0208 	orr.w	r2, r2, #8
 8003cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6999      	ldr	r1, [r3, #24]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	619a      	str	r2, [r3, #24]
      break;
 8003d12:	e064      	b.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f9a6 	bl	800406c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6999      	ldr	r1, [r3, #24]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	021a      	lsls	r2, r3, #8
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	619a      	str	r2, [r3, #24]
      break;
 8003d54:	e043      	b.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68b9      	ldr	r1, [r7, #8]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 f9fb 	bl	8004158 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0208 	orr.w	r2, r2, #8
 8003d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0204 	bic.w	r2, r2, #4
 8003d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69d9      	ldr	r1, [r3, #28]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	61da      	str	r2, [r3, #28]
      break;
 8003d94:	e023      	b.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fa4f 	bl	8004240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69da      	ldr	r2, [r3, #28]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69d9      	ldr	r1, [r3, #28]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	021a      	lsls	r2, r3, #8
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	61da      	str	r2, [r3, #28]
      break;
 8003dd6:	e002      	b.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	75fb      	strb	r3, [r7, #23]
      break;
 8003ddc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a43      	ldr	r2, [pc, #268]	@ (8003f60 <TIM_Base_SetConfig+0x120>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d013      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5e:	d00f      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a40      	ldr	r2, [pc, #256]	@ (8003f64 <TIM_Base_SetConfig+0x124>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d00b      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a3f      	ldr	r2, [pc, #252]	@ (8003f68 <TIM_Base_SetConfig+0x128>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d007      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a3e      	ldr	r2, [pc, #248]	@ (8003f6c <TIM_Base_SetConfig+0x12c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_Base_SetConfig+0x40>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a3d      	ldr	r2, [pc, #244]	@ (8003f70 <TIM_Base_SetConfig+0x130>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d108      	bne.n	8003e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a32      	ldr	r2, [pc, #200]	@ (8003f60 <TIM_Base_SetConfig+0x120>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d02b      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea0:	d027      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a2f      	ldr	r2, [pc, #188]	@ (8003f64 <TIM_Base_SetConfig+0x124>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d023      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a2e      	ldr	r2, [pc, #184]	@ (8003f68 <TIM_Base_SetConfig+0x128>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01f      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f6c <TIM_Base_SetConfig+0x12c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01b      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8003f70 <TIM_Base_SetConfig+0x130>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d017      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8003f74 <TIM_Base_SetConfig+0x134>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a2a      	ldr	r2, [pc, #168]	@ (8003f78 <TIM_Base_SetConfig+0x138>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00f      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a29      	ldr	r2, [pc, #164]	@ (8003f7c <TIM_Base_SetConfig+0x13c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00b      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a28      	ldr	r2, [pc, #160]	@ (8003f80 <TIM_Base_SetConfig+0x140>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d007      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a27      	ldr	r2, [pc, #156]	@ (8003f84 <TIM_Base_SetConfig+0x144>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d003      	beq.n	8003ef2 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a26      	ldr	r2, [pc, #152]	@ (8003f88 <TIM_Base_SetConfig+0x148>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a0e      	ldr	r2, [pc, #56]	@ (8003f60 <TIM_Base_SetConfig+0x120>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d003      	beq.n	8003f32 <TIM_Base_SetConfig+0xf2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a10      	ldr	r2, [pc, #64]	@ (8003f70 <TIM_Base_SetConfig+0x130>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d103      	bne.n	8003f3a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f043 0204 	orr.w	r2, r3, #4
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	601a      	str	r2, [r3, #0]
}
 8003f52:	bf00      	nop
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40010000 	.word	0x40010000
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40000c00 	.word	0x40000c00
 8003f70:	40010400 	.word	0x40010400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800
 8003f80:	40001800 	.word	0x40001800
 8003f84:	40001c00 	.word	0x40001c00
 8003f88:	40002000 	.word	0x40002000

08003f8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f023 0201 	bic.w	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0303 	bic.w	r3, r3, #3
 8003fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 0302 	bic.w	r3, r3, #2
 8003fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a20      	ldr	r2, [pc, #128]	@ (8004064 <TIM_OC1_SetConfig+0xd8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_OC1_SetConfig+0x64>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a1f      	ldr	r2, [pc, #124]	@ (8004068 <TIM_OC1_SetConfig+0xdc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d10c      	bne.n	800400a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0308 	bic.w	r3, r3, #8
 8003ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f023 0304 	bic.w	r3, r3, #4
 8004008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a15      	ldr	r2, [pc, #84]	@ (8004064 <TIM_OC1_SetConfig+0xd8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d003      	beq.n	800401a <TIM_OC1_SetConfig+0x8e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a14      	ldr	r2, [pc, #80]	@ (8004068 <TIM_OC1_SetConfig+0xdc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d111      	bne.n	800403e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	621a      	str	r2, [r3, #32]
}
 8004058:	bf00      	nop
 800405a:	371c      	adds	r7, #28
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	40010000 	.word	0x40010000
 8004068:	40010400 	.word	0x40010400

0800406c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f023 0210 	bic.w	r2, r3, #16
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800409a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f023 0320 	bic.w	r3, r3, #32
 80040b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a22      	ldr	r2, [pc, #136]	@ (8004150 <TIM_OC2_SetConfig+0xe4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d003      	beq.n	80040d4 <TIM_OC2_SetConfig+0x68>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a21      	ldr	r2, [pc, #132]	@ (8004154 <TIM_OC2_SetConfig+0xe8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d10d      	bne.n	80040f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a17      	ldr	r2, [pc, #92]	@ (8004150 <TIM_OC2_SetConfig+0xe4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d003      	beq.n	8004100 <TIM_OC2_SetConfig+0x94>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a16      	ldr	r2, [pc, #88]	@ (8004154 <TIM_OC2_SetConfig+0xe8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d113      	bne.n	8004128 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800410e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40010000 	.word	0x40010000
 8004154:	40010400 	.word	0x40010400

08004158 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0303 	bic.w	r3, r3, #3
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a21      	ldr	r2, [pc, #132]	@ (8004238 <TIM_OC3_SetConfig+0xe0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_OC3_SetConfig+0x66>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a20      	ldr	r2, [pc, #128]	@ (800423c <TIM_OC3_SetConfig+0xe4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d10d      	bne.n	80041da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a16      	ldr	r2, [pc, #88]	@ (8004238 <TIM_OC3_SetConfig+0xe0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <TIM_OC3_SetConfig+0x92>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a15      	ldr	r2, [pc, #84]	@ (800423c <TIM_OC3_SetConfig+0xe4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d113      	bne.n	8004212 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	621a      	str	r2, [r3, #32]
}
 800422c:	bf00      	nop
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	40010000 	.word	0x40010000
 800423c:	40010400 	.word	0x40010400

08004240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800426e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800428a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	031b      	lsls	r3, r3, #12
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a12      	ldr	r2, [pc, #72]	@ (80042e4 <TIM_OC4_SetConfig+0xa4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_OC4_SetConfig+0x68>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a11      	ldr	r2, [pc, #68]	@ (80042e8 <TIM_OC4_SetConfig+0xa8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d109      	bne.n	80042bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	019b      	lsls	r3, r3, #6
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40010000 	.word	0x40010000
 80042e8:	40010400 	.word	0x40010400

080042ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004300:	2302      	movs	r3, #2
 8004302:	e05a      	b.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800432a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a21      	ldr	r2, [pc, #132]	@ (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d022      	beq.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004350:	d01d      	beq.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1d      	ldr	r2, [pc, #116]	@ (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d018      	beq.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1b      	ldr	r2, [pc, #108]	@ (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d013      	beq.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1a      	ldr	r2, [pc, #104]	@ (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00e      	beq.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a18      	ldr	r2, [pc, #96]	@ (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d009      	beq.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a17      	ldr	r2, [pc, #92]	@ (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d004      	beq.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a15      	ldr	r2, [pc, #84]	@ (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d10c      	bne.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4313      	orrs	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40010000 	.word	0x40010000
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800
 80043d4:	40000c00 	.word	0x40000c00
 80043d8:	40010400 	.word	0x40010400
 80043dc:	40014000 	.word	0x40014000
 80043e0:	40001800 	.word	0x40001800

080043e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e042      	b.n	80044a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc ff7c 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2224      	movs	r2, #36	@ 0x24
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800444e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f82b 	bl	80044ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695a      	ldr	r2, [r3, #20]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044b0:	b0c0      	sub	sp, #256	@ 0x100
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c8:	68d9      	ldr	r1, [r3, #12]
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	ea40 0301 	orr.w	r3, r0, r1
 80044d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004504:	f021 010c 	bic.w	r1, r1, #12
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004512:	430b      	orrs	r3, r1
 8004514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004526:	6999      	ldr	r1, [r3, #24]
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	ea40 0301 	orr.w	r3, r0, r1
 8004532:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4b8f      	ldr	r3, [pc, #572]	@ (8004778 <UART_SetConfig+0x2cc>)
 800453c:	429a      	cmp	r2, r3
 800453e:	d005      	beq.n	800454c <UART_SetConfig+0xa0>
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4b8d      	ldr	r3, [pc, #564]	@ (800477c <UART_SetConfig+0x2d0>)
 8004548:	429a      	cmp	r2, r3
 800454a:	d104      	bne.n	8004556 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800454c:	f7fe fbe8 	bl	8002d20 <HAL_RCC_GetPCLK2Freq>
 8004550:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004554:	e003      	b.n	800455e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004556:	f7fe fbcf 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 800455a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800455e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004568:	f040 810c 	bne.w	8004784 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800456c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004570:	2200      	movs	r2, #0
 8004572:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004576:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800457a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800457e:	4622      	mov	r2, r4
 8004580:	462b      	mov	r3, r5
 8004582:	1891      	adds	r1, r2, r2
 8004584:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004586:	415b      	adcs	r3, r3
 8004588:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800458a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800458e:	4621      	mov	r1, r4
 8004590:	eb12 0801 	adds.w	r8, r2, r1
 8004594:	4629      	mov	r1, r5
 8004596:	eb43 0901 	adc.w	r9, r3, r1
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ae:	4690      	mov	r8, r2
 80045b0:	4699      	mov	r9, r3
 80045b2:	4623      	mov	r3, r4
 80045b4:	eb18 0303 	adds.w	r3, r8, r3
 80045b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045bc:	462b      	mov	r3, r5
 80045be:	eb49 0303 	adc.w	r3, r9, r3
 80045c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045da:	460b      	mov	r3, r1
 80045dc:	18db      	adds	r3, r3, r3
 80045de:	653b      	str	r3, [r7, #80]	@ 0x50
 80045e0:	4613      	mov	r3, r2
 80045e2:	eb42 0303 	adc.w	r3, r2, r3
 80045e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80045e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045f0:	f7fb fe0e 	bl	8000210 <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4b61      	ldr	r3, [pc, #388]	@ (8004780 <UART_SetConfig+0x2d4>)
 80045fa:	fba3 2302 	umull	r2, r3, r3, r2
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	011c      	lsls	r4, r3, #4
 8004602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004606:	2200      	movs	r2, #0
 8004608:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800460c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004610:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004614:	4642      	mov	r2, r8
 8004616:	464b      	mov	r3, r9
 8004618:	1891      	adds	r1, r2, r2
 800461a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800461c:	415b      	adcs	r3, r3
 800461e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004620:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004624:	4641      	mov	r1, r8
 8004626:	eb12 0a01 	adds.w	sl, r2, r1
 800462a:	4649      	mov	r1, r9
 800462c:	eb43 0b01 	adc.w	fp, r3, r1
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800463c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004640:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004644:	4692      	mov	sl, r2
 8004646:	469b      	mov	fp, r3
 8004648:	4643      	mov	r3, r8
 800464a:	eb1a 0303 	adds.w	r3, sl, r3
 800464e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004652:	464b      	mov	r3, r9
 8004654:	eb4b 0303 	adc.w	r3, fp, r3
 8004658:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004668:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800466c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004670:	460b      	mov	r3, r1
 8004672:	18db      	adds	r3, r3, r3
 8004674:	643b      	str	r3, [r7, #64]	@ 0x40
 8004676:	4613      	mov	r3, r2
 8004678:	eb42 0303 	adc.w	r3, r2, r3
 800467c:	647b      	str	r3, [r7, #68]	@ 0x44
 800467e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004682:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004686:	f7fb fdc3 	bl	8000210 <__aeabi_uldivmod>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4611      	mov	r1, r2
 8004690:	4b3b      	ldr	r3, [pc, #236]	@ (8004780 <UART_SetConfig+0x2d4>)
 8004692:	fba3 2301 	umull	r2, r3, r3, r1
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	2264      	movs	r2, #100	@ 0x64
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	1acb      	subs	r3, r1, r3
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046a6:	4b36      	ldr	r3, [pc, #216]	@ (8004780 <UART_SetConfig+0x2d4>)
 80046a8:	fba3 2302 	umull	r2, r3, r3, r2
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046b4:	441c      	add	r4, r3
 80046b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046d0:	415b      	adcs	r3, r3
 80046d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80046d8:	4641      	mov	r1, r8
 80046da:	1851      	adds	r1, r2, r1
 80046dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80046de:	4649      	mov	r1, r9
 80046e0:	414b      	adcs	r3, r1
 80046e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80046f0:	4659      	mov	r1, fp
 80046f2:	00cb      	lsls	r3, r1, #3
 80046f4:	4651      	mov	r1, sl
 80046f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046fa:	4651      	mov	r1, sl
 80046fc:	00ca      	lsls	r2, r1, #3
 80046fe:	4610      	mov	r0, r2
 8004700:	4619      	mov	r1, r3
 8004702:	4603      	mov	r3, r0
 8004704:	4642      	mov	r2, r8
 8004706:	189b      	adds	r3, r3, r2
 8004708:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800470c:	464b      	mov	r3, r9
 800470e:	460a      	mov	r2, r1
 8004710:	eb42 0303 	adc.w	r3, r2, r3
 8004714:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004724:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004728:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800472c:	460b      	mov	r3, r1
 800472e:	18db      	adds	r3, r3, r3
 8004730:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004732:	4613      	mov	r3, r2
 8004734:	eb42 0303 	adc.w	r3, r2, r3
 8004738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800473a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800473e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004742:	f7fb fd65 	bl	8000210 <__aeabi_uldivmod>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4b0d      	ldr	r3, [pc, #52]	@ (8004780 <UART_SetConfig+0x2d4>)
 800474c:	fba3 1302 	umull	r1, r3, r3, r2
 8004750:	095b      	lsrs	r3, r3, #5
 8004752:	2164      	movs	r1, #100	@ 0x64
 8004754:	fb01 f303 	mul.w	r3, r1, r3
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	3332      	adds	r3, #50	@ 0x32
 800475e:	4a08      	ldr	r2, [pc, #32]	@ (8004780 <UART_SetConfig+0x2d4>)
 8004760:	fba2 2303 	umull	r2, r3, r2, r3
 8004764:	095b      	lsrs	r3, r3, #5
 8004766:	f003 0207 	and.w	r2, r3, #7
 800476a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4422      	add	r2, r4
 8004772:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004774:	e106      	b.n	8004984 <UART_SetConfig+0x4d8>
 8004776:	bf00      	nop
 8004778:	40011000 	.word	0x40011000
 800477c:	40011400 	.word	0x40011400
 8004780:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004788:	2200      	movs	r2, #0
 800478a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800478e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004792:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004796:	4642      	mov	r2, r8
 8004798:	464b      	mov	r3, r9
 800479a:	1891      	adds	r1, r2, r2
 800479c:	6239      	str	r1, [r7, #32]
 800479e:	415b      	adcs	r3, r3
 80047a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047a6:	4641      	mov	r1, r8
 80047a8:	1854      	adds	r4, r2, r1
 80047aa:	4649      	mov	r1, r9
 80047ac:	eb43 0501 	adc.w	r5, r3, r1
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	00eb      	lsls	r3, r5, #3
 80047ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047be:	00e2      	lsls	r2, r4, #3
 80047c0:	4614      	mov	r4, r2
 80047c2:	461d      	mov	r5, r3
 80047c4:	4643      	mov	r3, r8
 80047c6:	18e3      	adds	r3, r4, r3
 80047c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047cc:	464b      	mov	r3, r9
 80047ce:	eb45 0303 	adc.w	r3, r5, r3
 80047d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047f2:	4629      	mov	r1, r5
 80047f4:	008b      	lsls	r3, r1, #2
 80047f6:	4621      	mov	r1, r4
 80047f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047fc:	4621      	mov	r1, r4
 80047fe:	008a      	lsls	r2, r1, #2
 8004800:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004804:	f7fb fd04 	bl	8000210 <__aeabi_uldivmod>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4b60      	ldr	r3, [pc, #384]	@ (8004990 <UART_SetConfig+0x4e4>)
 800480e:	fba3 2302 	umull	r2, r3, r3, r2
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	011c      	lsls	r4, r3, #4
 8004816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800481a:	2200      	movs	r2, #0
 800481c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004820:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004824:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004828:	4642      	mov	r2, r8
 800482a:	464b      	mov	r3, r9
 800482c:	1891      	adds	r1, r2, r2
 800482e:	61b9      	str	r1, [r7, #24]
 8004830:	415b      	adcs	r3, r3
 8004832:	61fb      	str	r3, [r7, #28]
 8004834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004838:	4641      	mov	r1, r8
 800483a:	1851      	adds	r1, r2, r1
 800483c:	6139      	str	r1, [r7, #16]
 800483e:	4649      	mov	r1, r9
 8004840:	414b      	adcs	r3, r1
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004850:	4659      	mov	r1, fp
 8004852:	00cb      	lsls	r3, r1, #3
 8004854:	4651      	mov	r1, sl
 8004856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800485a:	4651      	mov	r1, sl
 800485c:	00ca      	lsls	r2, r1, #3
 800485e:	4610      	mov	r0, r2
 8004860:	4619      	mov	r1, r3
 8004862:	4603      	mov	r3, r0
 8004864:	4642      	mov	r2, r8
 8004866:	189b      	adds	r3, r3, r2
 8004868:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800486c:	464b      	mov	r3, r9
 800486e:	460a      	mov	r2, r1
 8004870:	eb42 0303 	adc.w	r3, r2, r3
 8004874:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004882:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004890:	4649      	mov	r1, r9
 8004892:	008b      	lsls	r3, r1, #2
 8004894:	4641      	mov	r1, r8
 8004896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800489a:	4641      	mov	r1, r8
 800489c:	008a      	lsls	r2, r1, #2
 800489e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048a2:	f7fb fcb5 	bl	8000210 <__aeabi_uldivmod>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4611      	mov	r1, r2
 80048ac:	4b38      	ldr	r3, [pc, #224]	@ (8004990 <UART_SetConfig+0x4e4>)
 80048ae:	fba3 2301 	umull	r2, r3, r3, r1
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	2264      	movs	r2, #100	@ 0x64
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	1acb      	subs	r3, r1, r3
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	3332      	adds	r3, #50	@ 0x32
 80048c0:	4a33      	ldr	r2, [pc, #204]	@ (8004990 <UART_SetConfig+0x4e4>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048cc:	441c      	add	r4, r3
 80048ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048d2:	2200      	movs	r2, #0
 80048d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80048d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80048d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80048dc:	4642      	mov	r2, r8
 80048de:	464b      	mov	r3, r9
 80048e0:	1891      	adds	r1, r2, r2
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	415b      	adcs	r3, r3
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048ec:	4641      	mov	r1, r8
 80048ee:	1851      	adds	r1, r2, r1
 80048f0:	6039      	str	r1, [r7, #0]
 80048f2:	4649      	mov	r1, r9
 80048f4:	414b      	adcs	r3, r1
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004904:	4659      	mov	r1, fp
 8004906:	00cb      	lsls	r3, r1, #3
 8004908:	4651      	mov	r1, sl
 800490a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800490e:	4651      	mov	r1, sl
 8004910:	00ca      	lsls	r2, r1, #3
 8004912:	4610      	mov	r0, r2
 8004914:	4619      	mov	r1, r3
 8004916:	4603      	mov	r3, r0
 8004918:	4642      	mov	r2, r8
 800491a:	189b      	adds	r3, r3, r2
 800491c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800491e:	464b      	mov	r3, r9
 8004920:	460a      	mov	r2, r1
 8004922:	eb42 0303 	adc.w	r3, r2, r3
 8004926:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	663b      	str	r3, [r7, #96]	@ 0x60
 8004932:	667a      	str	r2, [r7, #100]	@ 0x64
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004940:	4649      	mov	r1, r9
 8004942:	008b      	lsls	r3, r1, #2
 8004944:	4641      	mov	r1, r8
 8004946:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800494a:	4641      	mov	r1, r8
 800494c:	008a      	lsls	r2, r1, #2
 800494e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004952:	f7fb fc5d 	bl	8000210 <__aeabi_uldivmod>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4b0d      	ldr	r3, [pc, #52]	@ (8004990 <UART_SetConfig+0x4e4>)
 800495c:	fba3 1302 	umull	r1, r3, r3, r2
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	2164      	movs	r1, #100	@ 0x64
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	011b      	lsls	r3, r3, #4
 800496c:	3332      	adds	r3, #50	@ 0x32
 800496e:	4a08      	ldr	r2, [pc, #32]	@ (8004990 <UART_SetConfig+0x4e4>)
 8004970:	fba2 2303 	umull	r2, r3, r2, r3
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	f003 020f 	and.w	r2, r3, #15
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4422      	add	r2, r4
 8004982:	609a      	str	r2, [r3, #8]
}
 8004984:	bf00      	nop
 8004986:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800498a:	46bd      	mov	sp, r7
 800498c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004990:	51eb851f 	.word	0x51eb851f

08004994 <__NVIC_SetPriority>:
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	4603      	mov	r3, r0
 800499c:	6039      	str	r1, [r7, #0]
 800499e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	db0a      	blt.n	80049be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	490c      	ldr	r1, [pc, #48]	@ (80049e0 <__NVIC_SetPriority+0x4c>)
 80049ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b2:	0112      	lsls	r2, r2, #4
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	440b      	add	r3, r1
 80049b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80049bc:	e00a      	b.n	80049d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	4908      	ldr	r1, [pc, #32]	@ (80049e4 <__NVIC_SetPriority+0x50>)
 80049c4:	79fb      	ldrb	r3, [r7, #7]
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	3b04      	subs	r3, #4
 80049cc:	0112      	lsls	r2, r2, #4
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	440b      	add	r3, r1
 80049d2:	761a      	strb	r2, [r3, #24]
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000e100 	.word	0xe000e100
 80049e4:	e000ed00 	.word	0xe000ed00

080049e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80049ec:	4b05      	ldr	r3, [pc, #20]	@ (8004a04 <SysTick_Handler+0x1c>)
 80049ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80049f0:	f001 fdaa 	bl	8006548 <xTaskGetSchedulerState>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d001      	beq.n	80049fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80049fa:	f002 fba5 	bl	8007148 <xPortSysTickHandler>
  }
}
 80049fe:	bf00      	nop
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	e000e010 	.word	0xe000e010

08004a08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	f06f 0004 	mvn.w	r0, #4
 8004a12:	f7ff ffbf 	bl	8004994 <__NVIC_SetPriority>
#endif
}
 8004a16:	bf00      	nop
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a22:	f3ef 8305 	mrs	r3, IPSR
 8004a26:	603b      	str	r3, [r7, #0]
  return(result);
 8004a28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004a2e:	f06f 0305 	mvn.w	r3, #5
 8004a32:	607b      	str	r3, [r7, #4]
 8004a34:	e00c      	b.n	8004a50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a36:	4b0a      	ldr	r3, [pc, #40]	@ (8004a60 <osKernelInitialize+0x44>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d105      	bne.n	8004a4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a3e:	4b08      	ldr	r3, [pc, #32]	@ (8004a60 <osKernelInitialize+0x44>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	607b      	str	r3, [r7, #4]
 8004a48:	e002      	b.n	8004a50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a50:	687b      	ldr	r3, [r7, #4]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20000a14 	.word	0x20000a14

08004a64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a6a:	f3ef 8305 	mrs	r3, IPSR
 8004a6e:	603b      	str	r3, [r7, #0]
  return(result);
 8004a70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004a76:	f06f 0305 	mvn.w	r3, #5
 8004a7a:	607b      	str	r3, [r7, #4]
 8004a7c:	e010      	b.n	8004aa0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004aac <osKernelStart+0x48>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d109      	bne.n	8004a9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004a86:	f7ff ffbf 	bl	8004a08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004a8a:	4b08      	ldr	r3, [pc, #32]	@ (8004aac <osKernelStart+0x48>)
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004a90:	f001 f90c 	bl	8005cac <vTaskStartScheduler>
      stat = osOK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	607b      	str	r3, [r7, #4]
 8004a98:	e002      	b.n	8004aa0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004aa0:	687b      	ldr	r3, [r7, #4]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3708      	adds	r7, #8
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	20000a14 	.word	0x20000a14

08004ab0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08e      	sub	sp, #56	@ 0x38
 8004ab4:	af04      	add	r7, sp, #16
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ac0:	f3ef 8305 	mrs	r3, IPSR
 8004ac4:	617b      	str	r3, [r7, #20]
  return(result);
 8004ac6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d17e      	bne.n	8004bca <osThreadNew+0x11a>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d07b      	beq.n	8004bca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004ad2:	2380      	movs	r3, #128	@ 0x80
 8004ad4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004ad6:	2318      	movs	r3, #24
 8004ad8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004ade:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d045      	beq.n	8004b76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <osThreadNew+0x48>
        name = attr->name;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <osThreadNew+0x6e>
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	2b38      	cmp	r3, #56	@ 0x38
 8004b10:	d805      	bhi.n	8004b1e <osThreadNew+0x6e>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <osThreadNew+0x72>
        return (NULL);
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e054      	b.n	8004bcc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	089b      	lsrs	r3, r3, #2
 8004b30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00e      	beq.n	8004b58 <osThreadNew+0xa8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2b5b      	cmp	r3, #91	@ 0x5b
 8004b40:	d90a      	bls.n	8004b58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d006      	beq.n	8004b58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <osThreadNew+0xa8>
        mem = 1;
 8004b52:	2301      	movs	r3, #1
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	e010      	b.n	8004b7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10c      	bne.n	8004b7a <osThreadNew+0xca>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d108      	bne.n	8004b7a <osThreadNew+0xca>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <osThreadNew+0xca>
          mem = 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61bb      	str	r3, [r7, #24]
 8004b74:	e001      	b.n	8004b7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d110      	bne.n	8004ba2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b88:	9202      	str	r2, [sp, #8]
 8004b8a:	9301      	str	r3, [sp, #4]
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6a3a      	ldr	r2, [r7, #32]
 8004b94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 feac 	bl	80058f4 <xTaskCreateStatic>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	e013      	b.n	8004bca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d110      	bne.n	8004bca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	f107 0310 	add.w	r3, r7, #16
 8004bb0:	9301      	str	r3, [sp, #4]
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 fefa 	bl	80059b4 <xTaskCreate>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d001      	beq.n	8004bca <osThreadNew+0x11a>
            hTask = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004bca:	693b      	ldr	r3, [r7, #16]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3728      	adds	r7, #40	@ 0x28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bdc:	f3ef 8305 	mrs	r3, IPSR
 8004be0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004be2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <osDelay+0x1c>
    stat = osErrorISR;
 8004be8:	f06f 0305 	mvn.w	r3, #5
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e007      	b.n	8004c00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f001 f820 	bl	8005c40 <vTaskDelay>
    }
  }

  return (stat);
 8004c00:	68fb      	ldr	r3, [r7, #12]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b086      	sub	sp, #24
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c16:	f3ef 8305 	mrs	r3, IPSR
 8004c1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c1c:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d12d      	bne.n	8004c7e <osEventFlagsNew+0x74>
    mem = -1;
 8004c22:	f04f 33ff 	mov.w	r3, #4294967295
 8004c26:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d015      	beq.n	8004c5a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d006      	beq.n	8004c44 <osEventFlagsNew+0x3a>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	2b1f      	cmp	r3, #31
 8004c3c:	d902      	bls.n	8004c44 <osEventFlagsNew+0x3a>
        mem = 1;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	e00c      	b.n	8004c5e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d108      	bne.n	8004c5e <osEventFlagsNew+0x54>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d104      	bne.n	8004c5e <osEventFlagsNew+0x54>
          mem = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	e001      	b.n	8004c5e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d106      	bne.n	8004c72 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 f841 	bl	8004cf0 <xEventGroupCreateStatic>
 8004c6e:	6178      	str	r0, [r7, #20]
 8004c70:	e005      	b.n	8004c7e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d102      	bne.n	8004c7e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004c78:	f000 f873 	bl	8004d62 <xEventGroupCreate>
 8004c7c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004c7e:	697b      	ldr	r3, [r7, #20]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a07      	ldr	r2, [pc, #28]	@ (8004cb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4a06      	ldr	r2, [pc, #24]	@ (8004cb8 <vApplicationGetIdleTaskMemory+0x30>)
 8004c9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2280      	movs	r2, #128	@ 0x80
 8004ca4:	601a      	str	r2, [r3, #0]
}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20000a18 	.word	0x20000a18
 8004cb8:	20000a74 	.word	0x20000a74

08004cbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4a07      	ldr	r2, [pc, #28]	@ (8004ce8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ccc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4a06      	ldr	r2, [pc, #24]	@ (8004cec <vApplicationGetTimerTaskMemory+0x30>)
 8004cd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cda:	601a      	str	r2, [r3, #0]
}
 8004cdc:	bf00      	nop
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	20000c74 	.word	0x20000c74
 8004cec:	20000cd0 	.word	0x20000cd0

08004cf0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10b      	bne.n	8004d16 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	e7fd      	b.n	8004d12 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8004d16:	2320      	movs	r3, #32
 8004d18:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d00b      	beq.n	8004d38 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	60fb      	str	r3, [r7, #12]
}
 8004d32:	bf00      	nop
 8004d34:	bf00      	nop
 8004d36:	e7fd      	b.n	8004d34 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 f822 	bl	8004d96 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2201      	movs	r2, #1
 8004d56:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8004d58:	697b      	ldr	r3, [r7, #20]
	}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004d68:	2020      	movs	r0, #32
 8004d6a:	f002 fa7f 	bl	800726c <pvPortMalloc>
 8004d6e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 f808 	bl	8004d96 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8004d8c:	687b      	ldr	r3, [r7, #4]
	}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f103 0208 	add.w	r2, r3, #8
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f04f 32ff 	mov.w	r2, #4294967295
 8004dae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f103 0208 	add.w	r2, r3, #8
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f103 0208 	add.w	r2, r3, #8
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	601a      	str	r2, [r3, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4e:	d103      	bne.n	8004e58 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	e00c      	b.n	8004e72 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3308      	adds	r3, #8
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	e002      	b.n	8004e66 <vListInsert+0x2e>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d2f6      	bcs.n	8004e60 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b085      	sub	sp, #20
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6892      	ldr	r2, [r2, #8]
 8004ec0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6852      	ldr	r2, [r2, #4]
 8004eca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d103      	bne.n	8004ede <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	1e5a      	subs	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
	...

08004f00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10b      	bne.n	8004f2c <xQueueGenericReset+0x2c>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	60bb      	str	r3, [r7, #8]
}
 8004f26:	bf00      	nop
 8004f28:	bf00      	nop
 8004f2a:	e7fd      	b.n	8004f28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004f2c:	f002 f87c 	bl	8007028 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f38:	68f9      	ldr	r1, [r7, #12]
 8004f3a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	441a      	add	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f62:	fb01 f303 	mul.w	r3, r1, r3
 8004f66:	441a      	add	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	22ff      	movs	r2, #255	@ 0xff
 8004f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	22ff      	movs	r2, #255	@ 0xff
 8004f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d114      	bne.n	8004fac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d01a      	beq.n	8004fc0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3310      	adds	r3, #16
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f001 f91a 	bl	80061c8 <xTaskRemoveFromEventList>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d012      	beq.n	8004fc0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd0 <xQueueGenericReset+0xd0>)
 8004f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	e009      	b.n	8004fc0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3310      	adds	r3, #16
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff fef0 	bl	8004d96 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	3324      	adds	r3, #36	@ 0x24
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff feeb 	bl	8004d96 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004fc0:	f002 f864 	bl	800708c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004fc4:	2301      	movs	r3, #1
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	e000ed04 	.word	0xe000ed04

08004fd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08e      	sub	sp, #56	@ 0x38
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10b      	bne.n	8005000 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ffa:	bf00      	nop
 8004ffc:	bf00      	nop
 8004ffe:	e7fd      	b.n	8004ffc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10b      	bne.n	800501e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005018:	bf00      	nop
 800501a:	bf00      	nop
 800501c:	e7fd      	b.n	800501a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <xQueueGenericCreateStatic+0x56>
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <xQueueGenericCreateStatic+0x5a>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <xQueueGenericCreateStatic+0x5c>
 800502e:	2300      	movs	r3, #0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10b      	bne.n	800504c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	623b      	str	r3, [r7, #32]
}
 8005046:	bf00      	nop
 8005048:	bf00      	nop
 800504a:	e7fd      	b.n	8005048 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <xQueueGenericCreateStatic+0x84>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <xQueueGenericCreateStatic+0x88>
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <xQueueGenericCreateStatic+0x8a>
 800505c:	2300      	movs	r3, #0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10b      	bne.n	800507a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	61fb      	str	r3, [r7, #28]
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop
 8005078:	e7fd      	b.n	8005076 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800507a:	2350      	movs	r3, #80	@ 0x50
 800507c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b50      	cmp	r3, #80	@ 0x50
 8005082:	d00b      	beq.n	800509c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	61bb      	str	r3, [r7, #24]
}
 8005096:	bf00      	nop
 8005098:	bf00      	nop
 800509a:	e7fd      	b.n	8005098 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800509c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80050a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00d      	beq.n	80050c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80050b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	4613      	mov	r3, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f805 	bl	80050ce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3730      	adds	r7, #48	@ 0x30
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d103      	bne.n	80050ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	e002      	b.n	80050f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050fc:	2101      	movs	r1, #1
 80050fe:	69b8      	ldr	r0, [r7, #24]
 8005100:	f7ff fefe 	bl	8004f00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	78fa      	ldrb	r2, [r7, #3]
 8005108:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b08e      	sub	sp, #56	@ 0x38
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005122:	2300      	movs	r3, #0
 8005124:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <xQueueGenericSend+0x34>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005142:	bf00      	nop
 8005144:	bf00      	nop
 8005146:	e7fd      	b.n	8005144 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d103      	bne.n	8005156 <xQueueGenericSend+0x42>
 800514e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <xQueueGenericSend+0x46>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <xQueueGenericSend+0x48>
 800515a:	2300      	movs	r3, #0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10b      	bne.n	8005178 <xQueueGenericSend+0x64>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005172:	bf00      	nop
 8005174:	bf00      	nop
 8005176:	e7fd      	b.n	8005174 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d103      	bne.n	8005186 <xQueueGenericSend+0x72>
 800517e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <xQueueGenericSend+0x76>
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <xQueueGenericSend+0x78>
 800518a:	2300      	movs	r3, #0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <xQueueGenericSend+0x94>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	623b      	str	r3, [r7, #32]
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051a8:	f001 f9ce 	bl	8006548 <xTaskGetSchedulerState>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d102      	bne.n	80051b8 <xQueueGenericSend+0xa4>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <xQueueGenericSend+0xa8>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <xQueueGenericSend+0xaa>
 80051bc:	2300      	movs	r3, #0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10b      	bne.n	80051da <xQueueGenericSend+0xc6>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	61fb      	str	r3, [r7, #28]
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	e7fd      	b.n	80051d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051da:	f001 ff25 	bl	8007028 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d302      	bcc.n	80051f0 <xQueueGenericSend+0xdc>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d129      	bne.n	8005244 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	68b9      	ldr	r1, [r7, #8]
 80051f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051f6:	f000 fa0f 	bl	8005618 <prvCopyDataToQueue>
 80051fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005200:	2b00      	cmp	r3, #0
 8005202:	d010      	beq.n	8005226 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005206:	3324      	adds	r3, #36	@ 0x24
 8005208:	4618      	mov	r0, r3
 800520a:	f000 ffdd 	bl	80061c8 <xTaskRemoveFromEventList>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d013      	beq.n	800523c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005214:	4b3f      	ldr	r3, [pc, #252]	@ (8005314 <xQueueGenericSend+0x200>)
 8005216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	e00a      	b.n	800523c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800522c:	4b39      	ldr	r3, [pc, #228]	@ (8005314 <xQueueGenericSend+0x200>)
 800522e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800523c:	f001 ff26 	bl	800708c <vPortExitCritical>
				return pdPASS;
 8005240:	2301      	movs	r3, #1
 8005242:	e063      	b.n	800530c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d103      	bne.n	8005252 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800524a:	f001 ff1f 	bl	800708c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800524e:	2300      	movs	r3, #0
 8005250:	e05c      	b.n	800530c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005258:	f107 0314 	add.w	r3, r7, #20
 800525c:	4618      	mov	r0, r3
 800525e:	f001 f817 	bl	8006290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005262:	2301      	movs	r3, #1
 8005264:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005266:	f001 ff11 	bl	800708c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800526a:	f000 fd87 	bl	8005d7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800526e:	f001 fedb 	bl	8007028 <vPortEnterCritical>
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005278:	b25b      	sxtb	r3, r3
 800527a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527e:	d103      	bne.n	8005288 <xQueueGenericSend+0x174>
 8005280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800528e:	b25b      	sxtb	r3, r3
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d103      	bne.n	800529e <xQueueGenericSend+0x18a>
 8005296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800529e:	f001 fef5 	bl	800708c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052a2:	1d3a      	adds	r2, r7, #4
 80052a4:	f107 0314 	add.w	r3, r7, #20
 80052a8:	4611      	mov	r1, r2
 80052aa:	4618      	mov	r0, r3
 80052ac:	f001 f806 	bl	80062bc <xTaskCheckForTimeOut>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d124      	bne.n	8005300 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80052b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052b8:	f000 faa6 	bl	8005808 <prvIsQueueFull>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d018      	beq.n	80052f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80052c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c4:	3310      	adds	r3, #16
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	4611      	mov	r1, r2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 ff2a 	bl	8006124 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80052d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052d2:	f000 fa31 	bl	8005738 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80052d6:	f000 fd5f 	bl	8005d98 <xTaskResumeAll>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f47f af7c 	bne.w	80051da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80052e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005314 <xQueueGenericSend+0x200>)
 80052e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	e772      	b.n	80051da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80052f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052f6:	f000 fa1f 	bl	8005738 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052fa:	f000 fd4d 	bl	8005d98 <xTaskResumeAll>
 80052fe:	e76c      	b.n	80051da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005302:	f000 fa19 	bl	8005738 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005306:	f000 fd47 	bl	8005d98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800530a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800530c:	4618      	mov	r0, r3
 800530e:	3738      	adds	r7, #56	@ 0x38
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	e000ed04 	.word	0xe000ed04

08005318 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b090      	sub	sp, #64	@ 0x40
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800532a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10b      	bne.n	8005348 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005342:	bf00      	nop
 8005344:	bf00      	nop
 8005346:	e7fd      	b.n	8005344 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d103      	bne.n	8005356 <xQueueGenericSendFromISR+0x3e>
 800534e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <xQueueGenericSendFromISR+0x42>
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <xQueueGenericSendFromISR+0x44>
 800535a:	2300      	movs	r3, #0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10b      	bne.n	8005378 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005372:	bf00      	nop
 8005374:	bf00      	nop
 8005376:	e7fd      	b.n	8005374 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d103      	bne.n	8005386 <xQueueGenericSendFromISR+0x6e>
 800537e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <xQueueGenericSendFromISR+0x72>
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <xQueueGenericSendFromISR+0x74>
 800538a:	2300      	movs	r3, #0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10b      	bne.n	80053a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	623b      	str	r3, [r7, #32]
}
 80053a2:	bf00      	nop
 80053a4:	bf00      	nop
 80053a6:	e7fd      	b.n	80053a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053a8:	f001 ff1e 	bl	80071e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80053ac:	f3ef 8211 	mrs	r2, BASEPRI
 80053b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	61fa      	str	r2, [r7, #28]
 80053c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80053c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d302      	bcc.n	80053da <xQueueGenericSendFromISR+0xc2>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d12f      	bne.n	800543a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	68b9      	ldr	r1, [r7, #8]
 80053ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80053f0:	f000 f912 	bl	8005618 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fc:	d112      	bne.n	8005424 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005402:	2b00      	cmp	r3, #0
 8005404:	d016      	beq.n	8005434 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005408:	3324      	adds	r3, #36	@ 0x24
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fedc 	bl	80061c8 <xTaskRemoveFromEventList>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00e      	beq.n	8005434 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e007      	b.n	8005434 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005424:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005428:	3301      	adds	r3, #1
 800542a:	b2db      	uxtb	r3, r3
 800542c:	b25a      	sxtb	r2, r3
 800542e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005434:	2301      	movs	r3, #1
 8005436:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005438:	e001      	b.n	800543e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800543a:	2300      	movs	r3, #0
 800543c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800543e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005440:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005448:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800544a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800544c:	4618      	mov	r0, r3
 800544e:	3740      	adds	r7, #64	@ 0x40
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08c      	sub	sp, #48	@ 0x30
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005460:	2300      	movs	r3, #0
 8005462:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10b      	bne.n	8005486 <xQueueReceive+0x32>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	623b      	str	r3, [r7, #32]
}
 8005480:	bf00      	nop
 8005482:	bf00      	nop
 8005484:	e7fd      	b.n	8005482 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d103      	bne.n	8005494 <xQueueReceive+0x40>
 800548c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <xQueueReceive+0x44>
 8005494:	2301      	movs	r3, #1
 8005496:	e000      	b.n	800549a <xQueueReceive+0x46>
 8005498:	2300      	movs	r3, #0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10b      	bne.n	80054b6 <xQueueReceive+0x62>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	61fb      	str	r3, [r7, #28]
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	e7fd      	b.n	80054b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054b6:	f001 f847 	bl	8006548 <xTaskGetSchedulerState>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d102      	bne.n	80054c6 <xQueueReceive+0x72>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <xQueueReceive+0x76>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <xQueueReceive+0x78>
 80054ca:	2300      	movs	r3, #0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10b      	bne.n	80054e8 <xQueueReceive+0x94>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	61bb      	str	r3, [r7, #24]
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	e7fd      	b.n	80054e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054e8:	f001 fd9e 	bl	8007028 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01f      	beq.n	8005538 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054fc:	f000 f8f6 	bl	80056ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	1e5a      	subs	r2, r3, #1
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00f      	beq.n	8005530 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005512:	3310      	adds	r3, #16
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fe57 	bl	80061c8 <xTaskRemoveFromEventList>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d007      	beq.n	8005530 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005520:	4b3c      	ldr	r3, [pc, #240]	@ (8005614 <xQueueReceive+0x1c0>)
 8005522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005530:	f001 fdac 	bl	800708c <vPortExitCritical>
				return pdPASS;
 8005534:	2301      	movs	r3, #1
 8005536:	e069      	b.n	800560c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800553e:	f001 fda5 	bl	800708c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005542:	2300      	movs	r3, #0
 8005544:	e062      	b.n	800560c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005548:	2b00      	cmp	r3, #0
 800554a:	d106      	bne.n	800555a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800554c:	f107 0310 	add.w	r3, r7, #16
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fe9d 	bl	8006290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005556:	2301      	movs	r3, #1
 8005558:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800555a:	f001 fd97 	bl	800708c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800555e:	f000 fc0d 	bl	8005d7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005562:	f001 fd61 	bl	8007028 <vPortEnterCritical>
 8005566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800556c:	b25b      	sxtb	r3, r3
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005572:	d103      	bne.n	800557c <xQueueReceive+0x128>
 8005574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800557c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005582:	b25b      	sxtb	r3, r3
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d103      	bne.n	8005592 <xQueueReceive+0x13e>
 800558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005592:	f001 fd7b 	bl	800708c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005596:	1d3a      	adds	r2, r7, #4
 8005598:	f107 0310 	add.w	r3, r7, #16
 800559c:	4611      	mov	r1, r2
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fe8c 	bl	80062bc <xTaskCheckForTimeOut>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d123      	bne.n	80055f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055ac:	f000 f916 	bl	80057dc <prvIsQueueEmpty>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d017      	beq.n	80055e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b8:	3324      	adds	r3, #36	@ 0x24
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	4611      	mov	r1, r2
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fdb0 	bl	8006124 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80055c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055c6:	f000 f8b7 	bl	8005738 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055ca:	f000 fbe5 	bl	8005d98 <xTaskResumeAll>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d189      	bne.n	80054e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80055d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005614 <xQueueReceive+0x1c0>)
 80055d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	e780      	b.n	80054e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80055e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055e8:	f000 f8a6 	bl	8005738 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055ec:	f000 fbd4 	bl	8005d98 <xTaskResumeAll>
 80055f0:	e77a      	b.n	80054e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80055f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055f4:	f000 f8a0 	bl	8005738 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055f8:	f000 fbce 	bl	8005d98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055fe:	f000 f8ed 	bl	80057dc <prvIsQueueEmpty>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	f43f af6f 	beq.w	80054e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800560a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800560c:	4618      	mov	r0, r3
 800560e:	3730      	adds	r7, #48	@ 0x30
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005624:	2300      	movs	r3, #0
 8005626:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10d      	bne.n	8005652 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d14d      	bne.n	80056da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	4618      	mov	r0, r3
 8005644:	f000 ff9e 	bl	8006584 <xTaskPriorityDisinherit>
 8005648:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	609a      	str	r2, [r3, #8]
 8005650:	e043      	b.n	80056da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d119      	bne.n	800568c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6858      	ldr	r0, [r3, #4]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005660:	461a      	mov	r2, r3
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	f002 f81c 	bl	80076a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005670:	441a      	add	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	429a      	cmp	r2, r3
 8005680:	d32b      	bcc.n	80056da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	605a      	str	r2, [r3, #4]
 800568a:	e026      	b.n	80056da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	68d8      	ldr	r0, [r3, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005694:	461a      	mov	r2, r3
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	f002 f802 	bl	80076a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a4:	425b      	negs	r3, r3
 80056a6:	441a      	add	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d207      	bcs.n	80056c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c0:	425b      	negs	r3, r3
 80056c2:	441a      	add	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d105      	bne.n	80056da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80056e2:	697b      	ldr	r3, [r7, #20]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3718      	adds	r7, #24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d018      	beq.n	8005730 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	441a      	add	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	429a      	cmp	r2, r3
 8005716:	d303      	bcc.n	8005720 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68d9      	ldr	r1, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005728:	461a      	mov	r2, r3
 800572a:	6838      	ldr	r0, [r7, #0]
 800572c:	f001 ffb8 	bl	80076a0 <memcpy>
	}
}
 8005730:	bf00      	nop
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005740:	f001 fc72 	bl	8007028 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800574a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800574c:	e011      	b.n	8005772 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005752:	2b00      	cmp	r3, #0
 8005754:	d012      	beq.n	800577c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3324      	adds	r3, #36	@ 0x24
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fd34 	bl	80061c8 <xTaskRemoveFromEventList>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005766:	f000 fe0d 	bl	8006384 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	3b01      	subs	r3, #1
 800576e:	b2db      	uxtb	r3, r3
 8005770:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005776:	2b00      	cmp	r3, #0
 8005778:	dce9      	bgt.n	800574e <prvUnlockQueue+0x16>
 800577a:	e000      	b.n	800577e <prvUnlockQueue+0x46>
					break;
 800577c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	22ff      	movs	r2, #255	@ 0xff
 8005782:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005786:	f001 fc81 	bl	800708c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800578a:	f001 fc4d 	bl	8007028 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005794:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005796:	e011      	b.n	80057bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d012      	beq.n	80057c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3310      	adds	r3, #16
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fd0f 	bl	80061c8 <xTaskRemoveFromEventList>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80057b0:	f000 fde8 	bl	8006384 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80057b4:	7bbb      	ldrb	r3, [r7, #14]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	dce9      	bgt.n	8005798 <prvUnlockQueue+0x60>
 80057c4:	e000      	b.n	80057c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80057c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	22ff      	movs	r2, #255	@ 0xff
 80057cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80057d0:	f001 fc5c 	bl	800708c <vPortExitCritical>
}
 80057d4:	bf00      	nop
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057e4:	f001 fc20 	bl	8007028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d102      	bne.n	80057f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80057f0:	2301      	movs	r3, #1
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	e001      	b.n	80057fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057fa:	f001 fc47 	bl	800708c <vPortExitCritical>

	return xReturn;
 80057fe:	68fb      	ldr	r3, [r7, #12]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005810:	f001 fc0a 	bl	8007028 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800581c:	429a      	cmp	r2, r3
 800581e:	d102      	bne.n	8005826 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005820:	2301      	movs	r3, #1
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	e001      	b.n	800582a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800582a:	f001 fc2f 	bl	800708c <vPortExitCritical>

	return xReturn;
 800582e:	68fb      	ldr	r3, [r7, #12]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	e014      	b.n	8005872 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005848:	4a0f      	ldr	r2, [pc, #60]	@ (8005888 <vQueueAddToRegistry+0x50>)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10b      	bne.n	800586c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005854:	490c      	ldr	r1, [pc, #48]	@ (8005888 <vQueueAddToRegistry+0x50>)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800585e:	4a0a      	ldr	r2, [pc, #40]	@ (8005888 <vQueueAddToRegistry+0x50>)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4413      	add	r3, r2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800586a:	e006      	b.n	800587a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3301      	adds	r3, #1
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b07      	cmp	r3, #7
 8005876:	d9e7      	bls.n	8005848 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	200010d0 	.word	0x200010d0

0800588c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800589c:	f001 fbc4 	bl	8007028 <vPortEnterCritical>
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058a6:	b25b      	sxtb	r3, r3
 80058a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ac:	d103      	bne.n	80058b6 <vQueueWaitForMessageRestricted+0x2a>
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058bc:	b25b      	sxtb	r3, r3
 80058be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c2:	d103      	bne.n	80058cc <vQueueWaitForMessageRestricted+0x40>
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058cc:	f001 fbde 	bl	800708c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d106      	bne.n	80058e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	3324      	adds	r3, #36	@ 0x24
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fc45 	bl	8006170 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80058e6:	6978      	ldr	r0, [r7, #20]
 80058e8:	f7ff ff26 	bl	8005738 <prvUnlockQueue>
	}
 80058ec:	bf00      	nop
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08e      	sub	sp, #56	@ 0x38
 80058f8:	af04      	add	r7, sp, #16
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10b      	bne.n	8005920 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	623b      	str	r3, [r7, #32]
}
 800591a:	bf00      	nop
 800591c:	bf00      	nop
 800591e:	e7fd      	b.n	800591c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10b      	bne.n	800593e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	61fb      	str	r3, [r7, #28]
}
 8005938:	bf00      	nop
 800593a:	bf00      	nop
 800593c:	e7fd      	b.n	800593a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800593e:	235c      	movs	r3, #92	@ 0x5c
 8005940:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b5c      	cmp	r3, #92	@ 0x5c
 8005946:	d00b      	beq.n	8005960 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	61bb      	str	r3, [r7, #24]
}
 800595a:	bf00      	nop
 800595c:	bf00      	nop
 800595e:	e7fd      	b.n	800595c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005960:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01e      	beq.n	80059a6 <xTaskCreateStatic+0xb2>
 8005968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01b      	beq.n	80059a6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800596e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005974:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005976:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597a:	2202      	movs	r2, #2
 800597c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005980:	2300      	movs	r3, #0
 8005982:	9303      	str	r3, [sp, #12]
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	9302      	str	r3, [sp, #8]
 8005988:	f107 0314 	add.w	r3, r7, #20
 800598c:	9301      	str	r3, [sp, #4]
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f850 	bl	8005a3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800599e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80059a0:	f000 f8de 	bl	8005b60 <prvAddNewTaskToReadyList>
 80059a4:	e001      	b.n	80059aa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80059aa:	697b      	ldr	r3, [r7, #20]
	}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3728      	adds	r7, #40	@ 0x28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08c      	sub	sp, #48	@ 0x30
 80059b8:	af04      	add	r7, sp, #16
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	4613      	mov	r3, r2
 80059c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059c4:	88fb      	ldrh	r3, [r7, #6]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4618      	mov	r0, r3
 80059ca:	f001 fc4f 	bl	800726c <pvPortMalloc>
 80059ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00e      	beq.n	80059f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80059d6:	205c      	movs	r0, #92	@ 0x5c
 80059d8:	f001 fc48 	bl	800726c <pvPortMalloc>
 80059dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80059ea:	e005      	b.n	80059f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059ec:	6978      	ldr	r0, [r7, #20]
 80059ee:	f001 fd0b 	bl	8007408 <vPortFree>
 80059f2:	e001      	b.n	80059f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d017      	beq.n	8005a2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a06:	88fa      	ldrh	r2, [r7, #6]
 8005a08:	2300      	movs	r3, #0
 8005a0a:	9303      	str	r3, [sp, #12]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	9302      	str	r3, [sp, #8]
 8005a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	68b9      	ldr	r1, [r7, #8]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f80e 	bl	8005a3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a22:	69f8      	ldr	r0, [r7, #28]
 8005a24:	f000 f89c 	bl	8005b60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	61bb      	str	r3, [r7, #24]
 8005a2c:	e002      	b.n	8005a34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a34:	69bb      	ldr	r3, [r7, #24]
	}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b088      	sub	sp, #32
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	461a      	mov	r2, r3
 8005a56:	21a5      	movs	r1, #165	@ 0xa5
 8005a58:	f001 fdf6 	bl	8007648 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a66:	3b01      	subs	r3, #1
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	f023 0307 	bic.w	r3, r3, #7
 8005a74:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00b      	beq.n	8005a98 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	617b      	str	r3, [r7, #20]
}
 8005a92:	bf00      	nop
 8005a94:	bf00      	nop
 8005a96:	e7fd      	b.n	8005a94 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01f      	beq.n	8005ade <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
 8005aa2:	e012      	b.n	8005aca <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	7819      	ldrb	r1, [r3, #0]
 8005aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	3334      	adds	r3, #52	@ 0x34
 8005ab4:	460a      	mov	r2, r1
 8005ab6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	4413      	add	r3, r2
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d006      	beq.n	8005ad2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	61fb      	str	r3, [r7, #28]
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	2b0f      	cmp	r3, #15
 8005ace:	d9e9      	bls.n	8005aa4 <prvInitialiseNewTask+0x66>
 8005ad0:	e000      	b.n	8005ad4 <prvInitialiseNewTask+0x96>
			{
				break;
 8005ad2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005adc:	e003      	b.n	8005ae6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae8:	2b37      	cmp	r3, #55	@ 0x37
 8005aea:	d901      	bls.n	8005af0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005aec:	2337      	movs	r3, #55	@ 0x37
 8005aee:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005af4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005afa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afe:	2200      	movs	r2, #0
 8005b00:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b04:	3304      	adds	r3, #4
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff f965 	bl	8004dd6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0e:	3318      	adds	r3, #24
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff f960 	bl	8004dd6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b2a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2e:	2200      	movs	r2, #0
 8005b30:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	68f9      	ldr	r1, [r7, #12]
 8005b3e:	69b8      	ldr	r0, [r7, #24]
 8005b40:	f001 f93e 	bl	8006dc0 <pxPortInitialiseStack>
 8005b44:	4602      	mov	r2, r0
 8005b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b56:	bf00      	nop
 8005b58:	3720      	adds	r7, #32
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b68:	f001 fa5e 	bl	8007028 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b6c:	4b2d      	ldr	r3, [pc, #180]	@ (8005c24 <prvAddNewTaskToReadyList+0xc4>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	4a2c      	ldr	r2, [pc, #176]	@ (8005c24 <prvAddNewTaskToReadyList+0xc4>)
 8005b74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b76:	4b2c      	ldr	r3, [pc, #176]	@ (8005c28 <prvAddNewTaskToReadyList+0xc8>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d109      	bne.n	8005b92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8005c28 <prvAddNewTaskToReadyList+0xc8>)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b84:	4b27      	ldr	r3, [pc, #156]	@ (8005c24 <prvAddNewTaskToReadyList+0xc4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d110      	bne.n	8005bae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b8c:	f000 fc1e 	bl	80063cc <prvInitialiseTaskLists>
 8005b90:	e00d      	b.n	8005bae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b92:	4b26      	ldr	r3, [pc, #152]	@ (8005c2c <prvAddNewTaskToReadyList+0xcc>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b9a:	4b23      	ldr	r3, [pc, #140]	@ (8005c28 <prvAddNewTaskToReadyList+0xc8>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d802      	bhi.n	8005bae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8005c28 <prvAddNewTaskToReadyList+0xc8>)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005bae:	4b20      	ldr	r3, [pc, #128]	@ (8005c30 <prvAddNewTaskToReadyList+0xd0>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8005c30 <prvAddNewTaskToReadyList+0xd0>)
 8005bb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8005c30 <prvAddNewTaskToReadyList+0xd0>)
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005c34 <prvAddNewTaskToReadyList+0xd4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d903      	bls.n	8005bd4 <prvAddNewTaskToReadyList+0x74>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	4a18      	ldr	r2, [pc, #96]	@ (8005c34 <prvAddNewTaskToReadyList+0xd4>)
 8005bd2:	6013      	str	r3, [r2, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4a15      	ldr	r2, [pc, #84]	@ (8005c38 <prvAddNewTaskToReadyList+0xd8>)
 8005be2:	441a      	add	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4619      	mov	r1, r3
 8005bea:	4610      	mov	r0, r2
 8005bec:	f7ff f900 	bl	8004df0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005bf0:	f001 fa4c 	bl	800708c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8005c2c <prvAddNewTaskToReadyList+0xcc>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00e      	beq.n	8005c1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005c28 <prvAddNewTaskToReadyList+0xc8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d207      	bcs.n	8005c1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c3c <prvAddNewTaskToReadyList+0xdc>)
 8005c0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c1a:	bf00      	nop
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	200015e4 	.word	0x200015e4
 8005c28:	20001110 	.word	0x20001110
 8005c2c:	200015f0 	.word	0x200015f0
 8005c30:	20001600 	.word	0x20001600
 8005c34:	200015ec 	.word	0x200015ec
 8005c38:	20001114 	.word	0x20001114
 8005c3c:	e000ed04 	.word	0xe000ed04

08005c40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d018      	beq.n	8005c84 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c52:	4b14      	ldr	r3, [pc, #80]	@ (8005ca4 <vTaskDelay+0x64>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <vTaskDelay+0x32>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	60bb      	str	r3, [r7, #8]
}
 8005c6c:	bf00      	nop
 8005c6e:	bf00      	nop
 8005c70:	e7fd      	b.n	8005c6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c72:	f000 f883 	bl	8005d7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c76:	2100      	movs	r1, #0
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fcf3 	bl	8006664 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c7e:	f000 f88b 	bl	8005d98 <xTaskResumeAll>
 8005c82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d107      	bne.n	8005c9a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005c8a:	4b07      	ldr	r3, [pc, #28]	@ (8005ca8 <vTaskDelay+0x68>)
 8005c8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c9a:	bf00      	nop
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	2000160c 	.word	0x2000160c
 8005ca8:	e000ed04 	.word	0xe000ed04

08005cac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08a      	sub	sp, #40	@ 0x28
 8005cb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005cba:	463a      	mov	r2, r7
 8005cbc:	1d39      	adds	r1, r7, #4
 8005cbe:	f107 0308 	add.w	r3, r7, #8
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fe ffe0 	bl	8004c88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005cc8:	6839      	ldr	r1, [r7, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	9202      	str	r2, [sp, #8]
 8005cd0:	9301      	str	r3, [sp, #4]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	460a      	mov	r2, r1
 8005cda:	4922      	ldr	r1, [pc, #136]	@ (8005d64 <vTaskStartScheduler+0xb8>)
 8005cdc:	4822      	ldr	r0, [pc, #136]	@ (8005d68 <vTaskStartScheduler+0xbc>)
 8005cde:	f7ff fe09 	bl	80058f4 <xTaskCreateStatic>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	4a21      	ldr	r2, [pc, #132]	@ (8005d6c <vTaskStartScheduler+0xc0>)
 8005ce6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ce8:	4b20      	ldr	r3, [pc, #128]	@ (8005d6c <vTaskStartScheduler+0xc0>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	e001      	b.n	8005cfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d102      	bne.n	8005d06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d00:	f000 fd04 	bl	800670c <xTimerCreateTimerTask>
 8005d04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d116      	bne.n	8005d3a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	613b      	str	r3, [r7, #16]
}
 8005d1e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d20:	4b13      	ldr	r3, [pc, #76]	@ (8005d70 <vTaskStartScheduler+0xc4>)
 8005d22:	f04f 32ff 	mov.w	r2, #4294967295
 8005d26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d28:	4b12      	ldr	r3, [pc, #72]	@ (8005d74 <vTaskStartScheduler+0xc8>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d2e:	4b12      	ldr	r3, [pc, #72]	@ (8005d78 <vTaskStartScheduler+0xcc>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d34:	f001 f8d4 	bl	8006ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d38:	e00f      	b.n	8005d5a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d40:	d10b      	bne.n	8005d5a <vTaskStartScheduler+0xae>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	60fb      	str	r3, [r7, #12]
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop
 8005d58:	e7fd      	b.n	8005d56 <vTaskStartScheduler+0xaa>
}
 8005d5a:	bf00      	nop
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	08007720 	.word	0x08007720
 8005d68:	0800639d 	.word	0x0800639d
 8005d6c:	20001608 	.word	0x20001608
 8005d70:	20001604 	.word	0x20001604
 8005d74:	200015f0 	.word	0x200015f0
 8005d78:	200015e8 	.word	0x200015e8

08005d7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d80:	4b04      	ldr	r3, [pc, #16]	@ (8005d94 <vTaskSuspendAll+0x18>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3301      	adds	r3, #1
 8005d86:	4a03      	ldr	r2, [pc, #12]	@ (8005d94 <vTaskSuspendAll+0x18>)
 8005d88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d8a:	bf00      	nop
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	2000160c 	.word	0x2000160c

08005d98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005da2:	2300      	movs	r3, #0
 8005da4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005da6:	4b42      	ldr	r3, [pc, #264]	@ (8005eb0 <xTaskResumeAll+0x118>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10b      	bne.n	8005dc6 <xTaskResumeAll+0x2e>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	603b      	str	r3, [r7, #0]
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	e7fd      	b.n	8005dc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005dc6:	f001 f92f 	bl	8007028 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005dca:	4b39      	ldr	r3, [pc, #228]	@ (8005eb0 <xTaskResumeAll+0x118>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	4a37      	ldr	r2, [pc, #220]	@ (8005eb0 <xTaskResumeAll+0x118>)
 8005dd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dd4:	4b36      	ldr	r3, [pc, #216]	@ (8005eb0 <xTaskResumeAll+0x118>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d162      	bne.n	8005ea2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ddc:	4b35      	ldr	r3, [pc, #212]	@ (8005eb4 <xTaskResumeAll+0x11c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d05e      	beq.n	8005ea2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005de4:	e02f      	b.n	8005e46 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005de6:	4b34      	ldr	r3, [pc, #208]	@ (8005eb8 <xTaskResumeAll+0x120>)
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3318      	adds	r3, #24
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff f859 	bl	8004eaa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff f854 	bl	8004eaa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e06:	4b2d      	ldr	r3, [pc, #180]	@ (8005ebc <xTaskResumeAll+0x124>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d903      	bls.n	8005e16 <xTaskResumeAll+0x7e>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e12:	4a2a      	ldr	r2, [pc, #168]	@ (8005ebc <xTaskResumeAll+0x124>)
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4a27      	ldr	r2, [pc, #156]	@ (8005ec0 <xTaskResumeAll+0x128>)
 8005e24:	441a      	add	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3304      	adds	r3, #4
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	f7fe ffdf 	bl	8004df0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e36:	4b23      	ldr	r3, [pc, #140]	@ (8005ec4 <xTaskResumeAll+0x12c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d302      	bcc.n	8005e46 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005e40:	4b21      	ldr	r3, [pc, #132]	@ (8005ec8 <xTaskResumeAll+0x130>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e46:	4b1c      	ldr	r3, [pc, #112]	@ (8005eb8 <xTaskResumeAll+0x120>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1cb      	bne.n	8005de6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e54:	f000 fb58 	bl	8006508 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e58:	4b1c      	ldr	r3, [pc, #112]	@ (8005ecc <xTaskResumeAll+0x134>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d010      	beq.n	8005e86 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e64:	f000 f846 	bl	8005ef4 <xTaskIncrementTick>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005e6e:	4b16      	ldr	r3, [pc, #88]	@ (8005ec8 <xTaskResumeAll+0x130>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1f1      	bne.n	8005e64 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005e80:	4b12      	ldr	r3, [pc, #72]	@ (8005ecc <xTaskResumeAll+0x134>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e86:	4b10      	ldr	r3, [pc, #64]	@ (8005ec8 <xTaskResumeAll+0x130>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d009      	beq.n	8005ea2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e92:	4b0f      	ldr	r3, [pc, #60]	@ (8005ed0 <xTaskResumeAll+0x138>)
 8005e94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ea2:	f001 f8f3 	bl	800708c <vPortExitCritical>

	return xAlreadyYielded;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	2000160c 	.word	0x2000160c
 8005eb4:	200015e4 	.word	0x200015e4
 8005eb8:	200015a4 	.word	0x200015a4
 8005ebc:	200015ec 	.word	0x200015ec
 8005ec0:	20001114 	.word	0x20001114
 8005ec4:	20001110 	.word	0x20001110
 8005ec8:	200015f8 	.word	0x200015f8
 8005ecc:	200015f4 	.word	0x200015f4
 8005ed0:	e000ed04 	.word	0xe000ed04

08005ed4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005eda:	4b05      	ldr	r3, [pc, #20]	@ (8005ef0 <xTaskGetTickCount+0x1c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ee0:	687b      	ldr	r3, [r7, #4]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	200015e8 	.word	0x200015e8

08005ef4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005efe:	4b4f      	ldr	r3, [pc, #316]	@ (800603c <xTaskIncrementTick+0x148>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f040 8090 	bne.w	8006028 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f08:	4b4d      	ldr	r3, [pc, #308]	@ (8006040 <xTaskIncrementTick+0x14c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f10:	4a4b      	ldr	r2, [pc, #300]	@ (8006040 <xTaskIncrementTick+0x14c>)
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d121      	bne.n	8005f60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f1c:	4b49      	ldr	r3, [pc, #292]	@ (8006044 <xTaskIncrementTick+0x150>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00b      	beq.n	8005f3e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	603b      	str	r3, [r7, #0]
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	e7fd      	b.n	8005f3a <xTaskIncrementTick+0x46>
 8005f3e:	4b41      	ldr	r3, [pc, #260]	@ (8006044 <xTaskIncrementTick+0x150>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	4b40      	ldr	r3, [pc, #256]	@ (8006048 <xTaskIncrementTick+0x154>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a3e      	ldr	r2, [pc, #248]	@ (8006044 <xTaskIncrementTick+0x150>)
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	4a3e      	ldr	r2, [pc, #248]	@ (8006048 <xTaskIncrementTick+0x154>)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	4b3e      	ldr	r3, [pc, #248]	@ (800604c <xTaskIncrementTick+0x158>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3301      	adds	r3, #1
 8005f58:	4a3c      	ldr	r2, [pc, #240]	@ (800604c <xTaskIncrementTick+0x158>)
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	f000 fad4 	bl	8006508 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f60:	4b3b      	ldr	r3, [pc, #236]	@ (8006050 <xTaskIncrementTick+0x15c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d349      	bcc.n	8005ffe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f6a:	4b36      	ldr	r3, [pc, #216]	@ (8006044 <xTaskIncrementTick+0x150>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d104      	bne.n	8005f7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f74:	4b36      	ldr	r3, [pc, #216]	@ (8006050 <xTaskIncrementTick+0x15c>)
 8005f76:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7a:	601a      	str	r2, [r3, #0]
					break;
 8005f7c:	e03f      	b.n	8005ffe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f7e:	4b31      	ldr	r3, [pc, #196]	@ (8006044 <xTaskIncrementTick+0x150>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d203      	bcs.n	8005f9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f96:	4a2e      	ldr	r2, [pc, #184]	@ (8006050 <xTaskIncrementTick+0x15c>)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f9c:	e02f      	b.n	8005ffe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fe ff81 	bl	8004eaa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d004      	beq.n	8005fba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	3318      	adds	r3, #24
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fe ff78 	bl	8004eaa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fbe:	4b25      	ldr	r3, [pc, #148]	@ (8006054 <xTaskIncrementTick+0x160>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d903      	bls.n	8005fce <xTaskIncrementTick+0xda>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fca:	4a22      	ldr	r2, [pc, #136]	@ (8006054 <xTaskIncrementTick+0x160>)
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4a1f      	ldr	r2, [pc, #124]	@ (8006058 <xTaskIncrementTick+0x164>)
 8005fdc:	441a      	add	r2, r3
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	f7fe ff03 	bl	8004df0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fee:	4b1b      	ldr	r3, [pc, #108]	@ (800605c <xTaskIncrementTick+0x168>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d3b8      	bcc.n	8005f6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ffc:	e7b5      	b.n	8005f6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ffe:	4b17      	ldr	r3, [pc, #92]	@ (800605c <xTaskIncrementTick+0x168>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006004:	4914      	ldr	r1, [pc, #80]	@ (8006058 <xTaskIncrementTick+0x164>)
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d901      	bls.n	800601a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006016:	2301      	movs	r3, #1
 8006018:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800601a:	4b11      	ldr	r3, [pc, #68]	@ (8006060 <xTaskIncrementTick+0x16c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d007      	beq.n	8006032 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006022:	2301      	movs	r3, #1
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	e004      	b.n	8006032 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006028:	4b0e      	ldr	r3, [pc, #56]	@ (8006064 <xTaskIncrementTick+0x170>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3301      	adds	r3, #1
 800602e:	4a0d      	ldr	r2, [pc, #52]	@ (8006064 <xTaskIncrementTick+0x170>)
 8006030:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006032:	697b      	ldr	r3, [r7, #20]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	2000160c 	.word	0x2000160c
 8006040:	200015e8 	.word	0x200015e8
 8006044:	2000159c 	.word	0x2000159c
 8006048:	200015a0 	.word	0x200015a0
 800604c:	200015fc 	.word	0x200015fc
 8006050:	20001604 	.word	0x20001604
 8006054:	200015ec 	.word	0x200015ec
 8006058:	20001114 	.word	0x20001114
 800605c:	20001110 	.word	0x20001110
 8006060:	200015f8 	.word	0x200015f8
 8006064:	200015f4 	.word	0x200015f4

08006068 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800606e:	4b28      	ldr	r3, [pc, #160]	@ (8006110 <vTaskSwitchContext+0xa8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006076:	4b27      	ldr	r3, [pc, #156]	@ (8006114 <vTaskSwitchContext+0xac>)
 8006078:	2201      	movs	r2, #1
 800607a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800607c:	e042      	b.n	8006104 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800607e:	4b25      	ldr	r3, [pc, #148]	@ (8006114 <vTaskSwitchContext+0xac>)
 8006080:	2200      	movs	r2, #0
 8006082:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006084:	4b24      	ldr	r3, [pc, #144]	@ (8006118 <vTaskSwitchContext+0xb0>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	e011      	b.n	80060b0 <vTaskSwitchContext+0x48>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10b      	bne.n	80060aa <vTaskSwitchContext+0x42>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	607b      	str	r3, [r7, #4]
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop
 80060a8:	e7fd      	b.n	80060a6 <vTaskSwitchContext+0x3e>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	491a      	ldr	r1, [pc, #104]	@ (800611c <vTaskSwitchContext+0xb4>)
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	440b      	add	r3, r1
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0e3      	beq.n	800608c <vTaskSwitchContext+0x24>
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4613      	mov	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4a13      	ldr	r2, [pc, #76]	@ (800611c <vTaskSwitchContext+0xb4>)
 80060d0:	4413      	add	r3, r2
 80060d2:	60bb      	str	r3, [r7, #8]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	605a      	str	r2, [r3, #4]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	3308      	adds	r3, #8
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d104      	bne.n	80060f4 <vTaskSwitchContext+0x8c>
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	605a      	str	r2, [r3, #4]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	4a09      	ldr	r2, [pc, #36]	@ (8006120 <vTaskSwitchContext+0xb8>)
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	4a06      	ldr	r2, [pc, #24]	@ (8006118 <vTaskSwitchContext+0xb0>)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6013      	str	r3, [r2, #0]
}
 8006104:	bf00      	nop
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	2000160c 	.word	0x2000160c
 8006114:	200015f8 	.word	0x200015f8
 8006118:	200015ec 	.word	0x200015ec
 800611c:	20001114 	.word	0x20001114
 8006120:	20001110 	.word	0x20001110

08006124 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10b      	bne.n	800614c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	60fb      	str	r3, [r7, #12]
}
 8006146:	bf00      	nop
 8006148:	bf00      	nop
 800614a:	e7fd      	b.n	8006148 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800614c:	4b07      	ldr	r3, [pc, #28]	@ (800616c <vTaskPlaceOnEventList+0x48>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3318      	adds	r3, #24
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7fe fe6f 	bl	8004e38 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800615a:	2101      	movs	r1, #1
 800615c:	6838      	ldr	r0, [r7, #0]
 800615e:	f000 fa81 	bl	8006664 <prvAddCurrentTaskToDelayedList>
}
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20001110 	.word	0x20001110

08006170 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10b      	bne.n	800619a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	617b      	str	r3, [r7, #20]
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop
 8006198:	e7fd      	b.n	8006196 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800619a:	4b0a      	ldr	r3, [pc, #40]	@ (80061c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3318      	adds	r3, #24
 80061a0:	4619      	mov	r1, r3
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7fe fe24 	bl	8004df0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80061ae:	f04f 33ff 	mov.w	r3, #4294967295
 80061b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	68b8      	ldr	r0, [r7, #8]
 80061b8:	f000 fa54 	bl	8006664 <prvAddCurrentTaskToDelayedList>
	}
 80061bc:	bf00      	nop
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20001110 	.word	0x20001110

080061c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10b      	bne.n	80061f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	60fb      	str	r3, [r7, #12]
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	e7fd      	b.n	80061f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	3318      	adds	r3, #24
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fe fe55 	bl	8004eaa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006200:	4b1d      	ldr	r3, [pc, #116]	@ (8006278 <xTaskRemoveFromEventList+0xb0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d11d      	bne.n	8006244 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	3304      	adds	r3, #4
 800620c:	4618      	mov	r0, r3
 800620e:	f7fe fe4c 	bl	8004eaa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006216:	4b19      	ldr	r3, [pc, #100]	@ (800627c <xTaskRemoveFromEventList+0xb4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d903      	bls.n	8006226 <xTaskRemoveFromEventList+0x5e>
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006222:	4a16      	ldr	r2, [pc, #88]	@ (800627c <xTaskRemoveFromEventList+0xb4>)
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4a13      	ldr	r2, [pc, #76]	@ (8006280 <xTaskRemoveFromEventList+0xb8>)
 8006234:	441a      	add	r2, r3
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	3304      	adds	r3, #4
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f7fe fdd7 	bl	8004df0 <vListInsertEnd>
 8006242:	e005      	b.n	8006250 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	3318      	adds	r3, #24
 8006248:	4619      	mov	r1, r3
 800624a:	480e      	ldr	r0, [pc, #56]	@ (8006284 <xTaskRemoveFromEventList+0xbc>)
 800624c:	f7fe fdd0 	bl	8004df0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006254:	4b0c      	ldr	r3, [pc, #48]	@ (8006288 <xTaskRemoveFromEventList+0xc0>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	429a      	cmp	r2, r3
 800625c:	d905      	bls.n	800626a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800625e:	2301      	movs	r3, #1
 8006260:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006262:	4b0a      	ldr	r3, [pc, #40]	@ (800628c <xTaskRemoveFromEventList+0xc4>)
 8006264:	2201      	movs	r2, #1
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	e001      	b.n	800626e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800626e:	697b      	ldr	r3, [r7, #20]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	2000160c 	.word	0x2000160c
 800627c:	200015ec 	.word	0x200015ec
 8006280:	20001114 	.word	0x20001114
 8006284:	200015a4 	.word	0x200015a4
 8006288:	20001110 	.word	0x20001110
 800628c:	200015f8 	.word	0x200015f8

08006290 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006298:	4b06      	ldr	r3, [pc, #24]	@ (80062b4 <vTaskInternalSetTimeOutState+0x24>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062a0:	4b05      	ldr	r3, [pc, #20]	@ (80062b8 <vTaskInternalSetTimeOutState+0x28>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	605a      	str	r2, [r3, #4]
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	200015fc 	.word	0x200015fc
 80062b8:	200015e8 	.word	0x200015e8

080062bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10b      	bne.n	80062e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	613b      	str	r3, [r7, #16]
}
 80062de:	bf00      	nop
 80062e0:	bf00      	nop
 80062e2:	e7fd      	b.n	80062e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10b      	bne.n	8006302 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	60fb      	str	r3, [r7, #12]
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	e7fd      	b.n	80062fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006302:	f000 fe91 	bl	8007028 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006306:	4b1d      	ldr	r3, [pc, #116]	@ (800637c <xTaskCheckForTimeOut+0xc0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631e:	d102      	bne.n	8006326 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006320:	2300      	movs	r3, #0
 8006322:	61fb      	str	r3, [r7, #28]
 8006324:	e023      	b.n	800636e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	4b15      	ldr	r3, [pc, #84]	@ (8006380 <xTaskCheckForTimeOut+0xc4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	429a      	cmp	r2, r3
 8006330:	d007      	beq.n	8006342 <xTaskCheckForTimeOut+0x86>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	429a      	cmp	r2, r3
 800633a:	d302      	bcc.n	8006342 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800633c:	2301      	movs	r3, #1
 800633e:	61fb      	str	r3, [r7, #28]
 8006340:	e015      	b.n	800636e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	429a      	cmp	r2, r3
 800634a:	d20b      	bcs.n	8006364 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	1ad2      	subs	r2, r2, r3
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff ff99 	bl	8006290 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800635e:	2300      	movs	r3, #0
 8006360:	61fb      	str	r3, [r7, #28]
 8006362:	e004      	b.n	800636e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2200      	movs	r2, #0
 8006368:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800636a:	2301      	movs	r3, #1
 800636c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800636e:	f000 fe8d 	bl	800708c <vPortExitCritical>

	return xReturn;
 8006372:	69fb      	ldr	r3, [r7, #28]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3720      	adds	r7, #32
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	200015e8 	.word	0x200015e8
 8006380:	200015fc 	.word	0x200015fc

08006384 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006388:	4b03      	ldr	r3, [pc, #12]	@ (8006398 <vTaskMissedYield+0x14>)
 800638a:	2201      	movs	r2, #1
 800638c:	601a      	str	r2, [r3, #0]
}
 800638e:	bf00      	nop
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	200015f8 	.word	0x200015f8

0800639c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063a4:	f000 f852 	bl	800644c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063a8:	4b06      	ldr	r3, [pc, #24]	@ (80063c4 <prvIdleTask+0x28>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d9f9      	bls.n	80063a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80063b0:	4b05      	ldr	r3, [pc, #20]	@ (80063c8 <prvIdleTask+0x2c>)
 80063b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80063c0:	e7f0      	b.n	80063a4 <prvIdleTask+0x8>
 80063c2:	bf00      	nop
 80063c4:	20001114 	.word	0x20001114
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063d2:	2300      	movs	r3, #0
 80063d4:	607b      	str	r3, [r7, #4]
 80063d6:	e00c      	b.n	80063f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4a12      	ldr	r2, [pc, #72]	@ (800642c <prvInitialiseTaskLists+0x60>)
 80063e4:	4413      	add	r3, r2
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fe fcd5 	bl	8004d96 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3301      	adds	r3, #1
 80063f0:	607b      	str	r3, [r7, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b37      	cmp	r3, #55	@ 0x37
 80063f6:	d9ef      	bls.n	80063d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063f8:	480d      	ldr	r0, [pc, #52]	@ (8006430 <prvInitialiseTaskLists+0x64>)
 80063fa:	f7fe fccc 	bl	8004d96 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063fe:	480d      	ldr	r0, [pc, #52]	@ (8006434 <prvInitialiseTaskLists+0x68>)
 8006400:	f7fe fcc9 	bl	8004d96 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006404:	480c      	ldr	r0, [pc, #48]	@ (8006438 <prvInitialiseTaskLists+0x6c>)
 8006406:	f7fe fcc6 	bl	8004d96 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800640a:	480c      	ldr	r0, [pc, #48]	@ (800643c <prvInitialiseTaskLists+0x70>)
 800640c:	f7fe fcc3 	bl	8004d96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006410:	480b      	ldr	r0, [pc, #44]	@ (8006440 <prvInitialiseTaskLists+0x74>)
 8006412:	f7fe fcc0 	bl	8004d96 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006416:	4b0b      	ldr	r3, [pc, #44]	@ (8006444 <prvInitialiseTaskLists+0x78>)
 8006418:	4a05      	ldr	r2, [pc, #20]	@ (8006430 <prvInitialiseTaskLists+0x64>)
 800641a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800641c:	4b0a      	ldr	r3, [pc, #40]	@ (8006448 <prvInitialiseTaskLists+0x7c>)
 800641e:	4a05      	ldr	r2, [pc, #20]	@ (8006434 <prvInitialiseTaskLists+0x68>)
 8006420:	601a      	str	r2, [r3, #0]
}
 8006422:	bf00      	nop
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20001114 	.word	0x20001114
 8006430:	20001574 	.word	0x20001574
 8006434:	20001588 	.word	0x20001588
 8006438:	200015a4 	.word	0x200015a4
 800643c:	200015b8 	.word	0x200015b8
 8006440:	200015d0 	.word	0x200015d0
 8006444:	2000159c 	.word	0x2000159c
 8006448:	200015a0 	.word	0x200015a0

0800644c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006452:	e019      	b.n	8006488 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006454:	f000 fde8 	bl	8007028 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006458:	4b10      	ldr	r3, [pc, #64]	@ (800649c <prvCheckTasksWaitingTermination+0x50>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3304      	adds	r3, #4
 8006464:	4618      	mov	r0, r3
 8006466:	f7fe fd20 	bl	8004eaa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800646a:	4b0d      	ldr	r3, [pc, #52]	@ (80064a0 <prvCheckTasksWaitingTermination+0x54>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3b01      	subs	r3, #1
 8006470:	4a0b      	ldr	r2, [pc, #44]	@ (80064a0 <prvCheckTasksWaitingTermination+0x54>)
 8006472:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006474:	4b0b      	ldr	r3, [pc, #44]	@ (80064a4 <prvCheckTasksWaitingTermination+0x58>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3b01      	subs	r3, #1
 800647a:	4a0a      	ldr	r2, [pc, #40]	@ (80064a4 <prvCheckTasksWaitingTermination+0x58>)
 800647c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800647e:	f000 fe05 	bl	800708c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f810 	bl	80064a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006488:	4b06      	ldr	r3, [pc, #24]	@ (80064a4 <prvCheckTasksWaitingTermination+0x58>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e1      	bne.n	8006454 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006490:	bf00      	nop
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	200015b8 	.word	0x200015b8
 80064a0:	200015e4 	.word	0x200015e4
 80064a4:	200015cc 	.word	0x200015cc

080064a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d108      	bne.n	80064cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 ffa2 	bl	8007408 <vPortFree>
				vPortFree( pxTCB );
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 ff9f 	bl	8007408 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064ca:	e019      	b.n	8006500 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d103      	bne.n	80064de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 ff96 	bl	8007408 <vPortFree>
	}
 80064dc:	e010      	b.n	8006500 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d00b      	beq.n	8006500 <prvDeleteTCB+0x58>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	60fb      	str	r3, [r7, #12]
}
 80064fa:	bf00      	nop
 80064fc:	bf00      	nop
 80064fe:	e7fd      	b.n	80064fc <prvDeleteTCB+0x54>
	}
 8006500:	bf00      	nop
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800650e:	4b0c      	ldr	r3, [pc, #48]	@ (8006540 <prvResetNextTaskUnblockTime+0x38>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d104      	bne.n	8006522 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006518:	4b0a      	ldr	r3, [pc, #40]	@ (8006544 <prvResetNextTaskUnblockTime+0x3c>)
 800651a:	f04f 32ff 	mov.w	r2, #4294967295
 800651e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006520:	e008      	b.n	8006534 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006522:	4b07      	ldr	r3, [pc, #28]	@ (8006540 <prvResetNextTaskUnblockTime+0x38>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	4a04      	ldr	r2, [pc, #16]	@ (8006544 <prvResetNextTaskUnblockTime+0x3c>)
 8006532:	6013      	str	r3, [r2, #0]
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	2000159c 	.word	0x2000159c
 8006544:	20001604 	.word	0x20001604

08006548 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800654e:	4b0b      	ldr	r3, [pc, #44]	@ (800657c <xTaskGetSchedulerState+0x34>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d102      	bne.n	800655c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006556:	2301      	movs	r3, #1
 8006558:	607b      	str	r3, [r7, #4]
 800655a:	e008      	b.n	800656e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800655c:	4b08      	ldr	r3, [pc, #32]	@ (8006580 <xTaskGetSchedulerState+0x38>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006564:	2302      	movs	r3, #2
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	e001      	b.n	800656e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800656a:	2300      	movs	r3, #0
 800656c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800656e:	687b      	ldr	r3, [r7, #4]
	}
 8006570:	4618      	mov	r0, r3
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	200015f0 	.word	0x200015f0
 8006580:	2000160c 	.word	0x2000160c

08006584 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d058      	beq.n	800664c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800659a:	4b2f      	ldr	r3, [pc, #188]	@ (8006658 <xTaskPriorityDisinherit+0xd4>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d00b      	beq.n	80065bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80065a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a8:	f383 8811 	msr	BASEPRI, r3
 80065ac:	f3bf 8f6f 	isb	sy
 80065b0:	f3bf 8f4f 	dsb	sy
 80065b4:	60fb      	str	r3, [r7, #12]
}
 80065b6:	bf00      	nop
 80065b8:	bf00      	nop
 80065ba:	e7fd      	b.n	80065b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10b      	bne.n	80065dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	60bb      	str	r3, [r7, #8]
}
 80065d6:	bf00      	nop
 80065d8:	bf00      	nop
 80065da:	e7fd      	b.n	80065d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e0:	1e5a      	subs	r2, r3, #1
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d02c      	beq.n	800664c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d128      	bne.n	800664c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	3304      	adds	r3, #4
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fe fc53 	bl	8004eaa <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006610:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800661c:	4b0f      	ldr	r3, [pc, #60]	@ (800665c <xTaskPriorityDisinherit+0xd8>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d903      	bls.n	800662c <xTaskPriorityDisinherit+0xa8>
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006628:	4a0c      	ldr	r2, [pc, #48]	@ (800665c <xTaskPriorityDisinherit+0xd8>)
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4a09      	ldr	r2, [pc, #36]	@ (8006660 <xTaskPriorityDisinherit+0xdc>)
 800663a:	441a      	add	r2, r3
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	3304      	adds	r3, #4
 8006640:	4619      	mov	r1, r3
 8006642:	4610      	mov	r0, r2
 8006644:	f7fe fbd4 	bl	8004df0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006648:	2301      	movs	r3, #1
 800664a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800664c:	697b      	ldr	r3, [r7, #20]
	}
 800664e:	4618      	mov	r0, r3
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20001110 	.word	0x20001110
 800665c:	200015ec 	.word	0x200015ec
 8006660:	20001114 	.word	0x20001114

08006664 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800666e:	4b21      	ldr	r3, [pc, #132]	@ (80066f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006674:	4b20      	ldr	r3, [pc, #128]	@ (80066f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3304      	adds	r3, #4
 800667a:	4618      	mov	r0, r3
 800667c:	f7fe fc15 	bl	8004eaa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006686:	d10a      	bne.n	800669e <prvAddCurrentTaskToDelayedList+0x3a>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d007      	beq.n	800669e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800668e:	4b1a      	ldr	r3, [pc, #104]	@ (80066f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3304      	adds	r3, #4
 8006694:	4619      	mov	r1, r3
 8006696:	4819      	ldr	r0, [pc, #100]	@ (80066fc <prvAddCurrentTaskToDelayedList+0x98>)
 8006698:	f7fe fbaa 	bl	8004df0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800669c:	e026      	b.n	80066ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4413      	add	r3, r2
 80066a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066a6:	4b14      	ldr	r3, [pc, #80]	@ (80066f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d209      	bcs.n	80066ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066b6:	4b12      	ldr	r3, [pc, #72]	@ (8006700 <prvAddCurrentTaskToDelayedList+0x9c>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	4b0f      	ldr	r3, [pc, #60]	@ (80066f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3304      	adds	r3, #4
 80066c0:	4619      	mov	r1, r3
 80066c2:	4610      	mov	r0, r2
 80066c4:	f7fe fbb8 	bl	8004e38 <vListInsert>
}
 80066c8:	e010      	b.n	80066ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006704 <prvAddCurrentTaskToDelayedList+0xa0>)
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4b0a      	ldr	r3, [pc, #40]	@ (80066f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3304      	adds	r3, #4
 80066d4:	4619      	mov	r1, r3
 80066d6:	4610      	mov	r0, r2
 80066d8:	f7fe fbae 	bl	8004e38 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006708 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d202      	bcs.n	80066ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80066e6:	4a08      	ldr	r2, [pc, #32]	@ (8006708 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	6013      	str	r3, [r2, #0]
}
 80066ec:	bf00      	nop
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	200015e8 	.word	0x200015e8
 80066f8:	20001110 	.word	0x20001110
 80066fc:	200015d0 	.word	0x200015d0
 8006700:	200015a0 	.word	0x200015a0
 8006704:	2000159c 	.word	0x2000159c
 8006708:	20001604 	.word	0x20001604

0800670c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08a      	sub	sp, #40	@ 0x28
 8006710:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006716:	f000 fb13 	bl	8006d40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800671a:	4b1d      	ldr	r3, [pc, #116]	@ (8006790 <xTimerCreateTimerTask+0x84>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d021      	beq.n	8006766 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800672a:	1d3a      	adds	r2, r7, #4
 800672c:	f107 0108 	add.w	r1, r7, #8
 8006730:	f107 030c 	add.w	r3, r7, #12
 8006734:	4618      	mov	r0, r3
 8006736:	f7fe fac1 	bl	8004cbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800673a:	6879      	ldr	r1, [r7, #4]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	9202      	str	r2, [sp, #8]
 8006742:	9301      	str	r3, [sp, #4]
 8006744:	2302      	movs	r3, #2
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	2300      	movs	r3, #0
 800674a:	460a      	mov	r2, r1
 800674c:	4911      	ldr	r1, [pc, #68]	@ (8006794 <xTimerCreateTimerTask+0x88>)
 800674e:	4812      	ldr	r0, [pc, #72]	@ (8006798 <xTimerCreateTimerTask+0x8c>)
 8006750:	f7ff f8d0 	bl	80058f4 <xTaskCreateStatic>
 8006754:	4603      	mov	r3, r0
 8006756:	4a11      	ldr	r2, [pc, #68]	@ (800679c <xTimerCreateTimerTask+0x90>)
 8006758:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800675a:	4b10      	ldr	r3, [pc, #64]	@ (800679c <xTimerCreateTimerTask+0x90>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006762:	2301      	movs	r3, #1
 8006764:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10b      	bne.n	8006784 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	613b      	str	r3, [r7, #16]
}
 800677e:	bf00      	nop
 8006780:	bf00      	nop
 8006782:	e7fd      	b.n	8006780 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006784:	697b      	ldr	r3, [r7, #20]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20001640 	.word	0x20001640
 8006794:	08007728 	.word	0x08007728
 8006798:	080068d9 	.word	0x080068d9
 800679c:	20001644 	.word	0x20001644

080067a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08a      	sub	sp, #40	@ 0x28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10b      	bne.n	80067d0 <xTimerGenericCommand+0x30>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	623b      	str	r3, [r7, #32]
}
 80067ca:	bf00      	nop
 80067cc:	bf00      	nop
 80067ce:	e7fd      	b.n	80067cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80067d0:	4b19      	ldr	r3, [pc, #100]	@ (8006838 <xTimerGenericCommand+0x98>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d02a      	beq.n	800682e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b05      	cmp	r3, #5
 80067e8:	dc18      	bgt.n	800681c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067ea:	f7ff fead 	bl	8006548 <xTaskGetSchedulerState>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d109      	bne.n	8006808 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067f4:	4b10      	ldr	r3, [pc, #64]	@ (8006838 <xTimerGenericCommand+0x98>)
 80067f6:	6818      	ldr	r0, [r3, #0]
 80067f8:	f107 0110 	add.w	r1, r7, #16
 80067fc:	2300      	movs	r3, #0
 80067fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006800:	f7fe fc88 	bl	8005114 <xQueueGenericSend>
 8006804:	6278      	str	r0, [r7, #36]	@ 0x24
 8006806:	e012      	b.n	800682e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006808:	4b0b      	ldr	r3, [pc, #44]	@ (8006838 <xTimerGenericCommand+0x98>)
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	f107 0110 	add.w	r1, r7, #16
 8006810:	2300      	movs	r3, #0
 8006812:	2200      	movs	r2, #0
 8006814:	f7fe fc7e 	bl	8005114 <xQueueGenericSend>
 8006818:	6278      	str	r0, [r7, #36]	@ 0x24
 800681a:	e008      	b.n	800682e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800681c:	4b06      	ldr	r3, [pc, #24]	@ (8006838 <xTimerGenericCommand+0x98>)
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	f107 0110 	add.w	r1, r7, #16
 8006824:	2300      	movs	r3, #0
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	f7fe fd76 	bl	8005318 <xQueueGenericSendFromISR>
 800682c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006830:	4618      	mov	r0, r3
 8006832:	3728      	adds	r7, #40	@ 0x28
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	20001640 	.word	0x20001640

0800683c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b088      	sub	sp, #32
 8006840:	af02      	add	r7, sp, #8
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006846:	4b23      	ldr	r3, [pc, #140]	@ (80068d4 <prvProcessExpiredTimer+0x98>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	3304      	adds	r3, #4
 8006854:	4618      	mov	r0, r3
 8006856:	f7fe fb28 	bl	8004eaa <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d023      	beq.n	80068b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	699a      	ldr	r2, [r3, #24]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	18d1      	adds	r1, r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	6978      	ldr	r0, [r7, #20]
 8006876:	f000 f8d5 	bl	8006a24 <prvInsertTimerInActiveList>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d020      	beq.n	80068c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006880:	2300      	movs	r3, #0
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	2300      	movs	r3, #0
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	2100      	movs	r1, #0
 800688a:	6978      	ldr	r0, [r7, #20]
 800688c:	f7ff ff88 	bl	80067a0 <xTimerGenericCommand>
 8006890:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d114      	bne.n	80068c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	60fb      	str	r3, [r7, #12]
}
 80068aa:	bf00      	nop
 80068ac:	bf00      	nop
 80068ae:	e7fd      	b.n	80068ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068b6:	f023 0301 	bic.w	r3, r3, #1
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	6978      	ldr	r0, [r7, #20]
 80068c8:	4798      	blx	r3
}
 80068ca:	bf00      	nop
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20001638 	.word	0x20001638

080068d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068e0:	f107 0308 	add.w	r3, r7, #8
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 f859 	bl	800699c <prvGetNextExpireTime>
 80068ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4619      	mov	r1, r3
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 f805 	bl	8006900 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80068f6:	f000 f8d7 	bl	8006aa8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068fa:	bf00      	nop
 80068fc:	e7f0      	b.n	80068e0 <prvTimerTask+0x8>
	...

08006900 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800690a:	f7ff fa37 	bl	8005d7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800690e:	f107 0308 	add.w	r3, r7, #8
 8006912:	4618      	mov	r0, r3
 8006914:	f000 f866 	bl	80069e4 <prvSampleTimeNow>
 8006918:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d130      	bne.n	8006982 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10a      	bne.n	800693c <prvProcessTimerOrBlockTask+0x3c>
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	429a      	cmp	r2, r3
 800692c:	d806      	bhi.n	800693c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800692e:	f7ff fa33 	bl	8005d98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006932:	68f9      	ldr	r1, [r7, #12]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff ff81 	bl	800683c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800693a:	e024      	b.n	8006986 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d008      	beq.n	8006954 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006942:	4b13      	ldr	r3, [pc, #76]	@ (8006990 <prvProcessTimerOrBlockTask+0x90>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <prvProcessTimerOrBlockTask+0x50>
 800694c:	2301      	movs	r3, #1
 800694e:	e000      	b.n	8006952 <prvProcessTimerOrBlockTask+0x52>
 8006950:	2300      	movs	r3, #0
 8006952:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006954:	4b0f      	ldr	r3, [pc, #60]	@ (8006994 <prvProcessTimerOrBlockTask+0x94>)
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	4619      	mov	r1, r3
 8006962:	f7fe ff93 	bl	800588c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006966:	f7ff fa17 	bl	8005d98 <xTaskResumeAll>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006970:	4b09      	ldr	r3, [pc, #36]	@ (8006998 <prvProcessTimerOrBlockTask+0x98>)
 8006972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006976:	601a      	str	r2, [r3, #0]
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	f3bf 8f6f 	isb	sy
}
 8006980:	e001      	b.n	8006986 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006982:	f7ff fa09 	bl	8005d98 <xTaskResumeAll>
}
 8006986:	bf00      	nop
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	2000163c 	.word	0x2000163c
 8006994:	20001640 	.word	0x20001640
 8006998:	e000ed04 	.word	0xe000ed04

0800699c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80069a4:	4b0e      	ldr	r3, [pc, #56]	@ (80069e0 <prvGetNextExpireTime+0x44>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <prvGetNextExpireTime+0x16>
 80069ae:	2201      	movs	r2, #1
 80069b0:	e000      	b.n	80069b4 <prvGetNextExpireTime+0x18>
 80069b2:	2200      	movs	r2, #0
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d105      	bne.n	80069cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069c0:	4b07      	ldr	r3, [pc, #28]	@ (80069e0 <prvGetNextExpireTime+0x44>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	e001      	b.n	80069d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80069d0:	68fb      	ldr	r3, [r7, #12]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20001638 	.word	0x20001638

080069e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80069ec:	f7ff fa72 	bl	8005ed4 <xTaskGetTickCount>
 80069f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80069f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006a20 <prvSampleTimeNow+0x3c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d205      	bcs.n	8006a08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80069fc:	f000 f93a 	bl	8006c74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	e002      	b.n	8006a0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a0e:	4a04      	ldr	r2, [pc, #16]	@ (8006a20 <prvSampleTimeNow+0x3c>)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a14:	68fb      	ldr	r3, [r7, #12]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	20001648 	.word	0x20001648

08006a24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d812      	bhi.n	8006a70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	1ad2      	subs	r2, r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d302      	bcc.n	8006a5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e01b      	b.n	8006a96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a5e:	4b10      	ldr	r3, [pc, #64]	@ (8006aa0 <prvInsertTimerInActiveList+0x7c>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	3304      	adds	r3, #4
 8006a66:	4619      	mov	r1, r3
 8006a68:	4610      	mov	r0, r2
 8006a6a:	f7fe f9e5 	bl	8004e38 <vListInsert>
 8006a6e:	e012      	b.n	8006a96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d206      	bcs.n	8006a86 <prvInsertTimerInActiveList+0x62>
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d302      	bcc.n	8006a86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a80:	2301      	movs	r3, #1
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	e007      	b.n	8006a96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a86:	4b07      	ldr	r3, [pc, #28]	@ (8006aa4 <prvInsertTimerInActiveList+0x80>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4610      	mov	r0, r2
 8006a92:	f7fe f9d1 	bl	8004e38 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a96:	697b      	ldr	r3, [r7, #20]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	2000163c 	.word	0x2000163c
 8006aa4:	20001638 	.word	0x20001638

08006aa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08e      	sub	sp, #56	@ 0x38
 8006aac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006aae:	e0ce      	b.n	8006c4e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	da19      	bge.n	8006aea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ab6:	1d3b      	adds	r3, r7, #4
 8006ab8:	3304      	adds	r3, #4
 8006aba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10b      	bne.n	8006ada <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	61fb      	str	r3, [r7, #28]
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop
 8006ad8:	e7fd      	b.n	8006ad6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ae0:	6850      	ldr	r0, [r2, #4]
 8006ae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ae4:	6892      	ldr	r2, [r2, #8]
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f2c0 80ae 	blt.w	8006c4e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d004      	beq.n	8006b08 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b00:	3304      	adds	r3, #4
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe f9d1 	bl	8004eaa <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b08:	463b      	mov	r3, r7
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7ff ff6a 	bl	80069e4 <prvSampleTimeNow>
 8006b10:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b09      	cmp	r3, #9
 8006b16:	f200 8097 	bhi.w	8006c48 <prvProcessReceivedCommands+0x1a0>
 8006b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b20 <prvProcessReceivedCommands+0x78>)
 8006b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b20:	08006b49 	.word	0x08006b49
 8006b24:	08006b49 	.word	0x08006b49
 8006b28:	08006b49 	.word	0x08006b49
 8006b2c:	08006bbf 	.word	0x08006bbf
 8006b30:	08006bd3 	.word	0x08006bd3
 8006b34:	08006c1f 	.word	0x08006c1f
 8006b38:	08006b49 	.word	0x08006b49
 8006b3c:	08006b49 	.word	0x08006b49
 8006b40:	08006bbf 	.word	0x08006bbf
 8006b44:	08006bd3 	.word	0x08006bd3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b4e:	f043 0301 	orr.w	r3, r3, #1
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	18d1      	adds	r1, r2, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b68:	f7ff ff5c 	bl	8006a24 <prvInsertTimerInActiveList>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d06c      	beq.n	8006c4c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d061      	beq.n	8006c4c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	441a      	add	r2, r3
 8006b90:	2300      	movs	r3, #0
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	2300      	movs	r3, #0
 8006b96:	2100      	movs	r1, #0
 8006b98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b9a:	f7ff fe01 	bl	80067a0 <xTimerGenericCommand>
 8006b9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d152      	bne.n	8006c4c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	61bb      	str	r3, [r7, #24]
}
 8006bb8:	bf00      	nop
 8006bba:	bf00      	nop
 8006bbc:	e7fd      	b.n	8006bba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bc4:	f023 0301 	bic.w	r3, r3, #1
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006bd0:	e03d      	b.n	8006c4e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bd8:	f043 0301 	orr.w	r3, r3, #1
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10b      	bne.n	8006c0a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	617b      	str	r3, [r7, #20]
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop
 8006c08:	e7fd      	b.n	8006c06 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0c:	699a      	ldr	r2, [r3, #24]
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c10:	18d1      	adds	r1, r2, r3
 8006c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c18:	f7ff ff04 	bl	8006a24 <prvInsertTimerInActiveList>
					break;
 8006c1c:	e017      	b.n	8006c4e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d103      	bne.n	8006c34 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006c2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c2e:	f000 fbeb 	bl	8007408 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c32:	e00c      	b.n	8006c4e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c3a:	f023 0301 	bic.w	r3, r3, #1
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006c46:	e002      	b.n	8006c4e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006c48:	bf00      	nop
 8006c4a:	e000      	b.n	8006c4e <prvProcessReceivedCommands+0x1a6>
					break;
 8006c4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c4e:	4b08      	ldr	r3, [pc, #32]	@ (8006c70 <prvProcessReceivedCommands+0x1c8>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	1d39      	adds	r1, r7, #4
 8006c54:	2200      	movs	r2, #0
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe fbfc 	bl	8005454 <xQueueReceive>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f47f af26 	bne.w	8006ab0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop
 8006c68:	3730      	adds	r7, #48	@ 0x30
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	20001640 	.word	0x20001640

08006c74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c7a:	e049      	b.n	8006d10 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8006d38 <prvSwitchTimerLists+0xc4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c86:	4b2c      	ldr	r3, [pc, #176]	@ (8006d38 <prvSwitchTimerLists+0xc4>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	3304      	adds	r3, #4
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fe f908 	bl	8004eaa <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d02f      	beq.n	8006d10 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d90e      	bls.n	8006ce0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cce:	4b1a      	ldr	r3, [pc, #104]	@ (8006d38 <prvSwitchTimerLists+0xc4>)
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	f7fe f8ad 	bl	8004e38 <vListInsert>
 8006cde:	e017      	b.n	8006d10 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	2100      	movs	r1, #0
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f7ff fd58 	bl	80067a0 <xTimerGenericCommand>
 8006cf0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10b      	bne.n	8006d10 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	603b      	str	r3, [r7, #0]
}
 8006d0a:	bf00      	nop
 8006d0c:	bf00      	nop
 8006d0e:	e7fd      	b.n	8006d0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d10:	4b09      	ldr	r3, [pc, #36]	@ (8006d38 <prvSwitchTimerLists+0xc4>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1b0      	bne.n	8006c7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d1a:	4b07      	ldr	r3, [pc, #28]	@ (8006d38 <prvSwitchTimerLists+0xc4>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d20:	4b06      	ldr	r3, [pc, #24]	@ (8006d3c <prvSwitchTimerLists+0xc8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a04      	ldr	r2, [pc, #16]	@ (8006d38 <prvSwitchTimerLists+0xc4>)
 8006d26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d28:	4a04      	ldr	r2, [pc, #16]	@ (8006d3c <prvSwitchTimerLists+0xc8>)
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	6013      	str	r3, [r2, #0]
}
 8006d2e:	bf00      	nop
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20001638 	.word	0x20001638
 8006d3c:	2000163c 	.word	0x2000163c

08006d40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d46:	f000 f96f 	bl	8007028 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d4a:	4b15      	ldr	r3, [pc, #84]	@ (8006da0 <prvCheckForValidListAndQueue+0x60>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d120      	bne.n	8006d94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d52:	4814      	ldr	r0, [pc, #80]	@ (8006da4 <prvCheckForValidListAndQueue+0x64>)
 8006d54:	f7fe f81f 	bl	8004d96 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d58:	4813      	ldr	r0, [pc, #76]	@ (8006da8 <prvCheckForValidListAndQueue+0x68>)
 8006d5a:	f7fe f81c 	bl	8004d96 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d5e:	4b13      	ldr	r3, [pc, #76]	@ (8006dac <prvCheckForValidListAndQueue+0x6c>)
 8006d60:	4a10      	ldr	r2, [pc, #64]	@ (8006da4 <prvCheckForValidListAndQueue+0x64>)
 8006d62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d64:	4b12      	ldr	r3, [pc, #72]	@ (8006db0 <prvCheckForValidListAndQueue+0x70>)
 8006d66:	4a10      	ldr	r2, [pc, #64]	@ (8006da8 <prvCheckForValidListAndQueue+0x68>)
 8006d68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	4b11      	ldr	r3, [pc, #68]	@ (8006db4 <prvCheckForValidListAndQueue+0x74>)
 8006d70:	4a11      	ldr	r2, [pc, #68]	@ (8006db8 <prvCheckForValidListAndQueue+0x78>)
 8006d72:	2110      	movs	r1, #16
 8006d74:	200a      	movs	r0, #10
 8006d76:	f7fe f92d 	bl	8004fd4 <xQueueGenericCreateStatic>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	4a08      	ldr	r2, [pc, #32]	@ (8006da0 <prvCheckForValidListAndQueue+0x60>)
 8006d7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d80:	4b07      	ldr	r3, [pc, #28]	@ (8006da0 <prvCheckForValidListAndQueue+0x60>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d88:	4b05      	ldr	r3, [pc, #20]	@ (8006da0 <prvCheckForValidListAndQueue+0x60>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	490b      	ldr	r1, [pc, #44]	@ (8006dbc <prvCheckForValidListAndQueue+0x7c>)
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fd52 	bl	8005838 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d94:	f000 f97a 	bl	800708c <vPortExitCritical>
}
 8006d98:	bf00      	nop
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20001640 	.word	0x20001640
 8006da4:	20001610 	.word	0x20001610
 8006da8:	20001624 	.word	0x20001624
 8006dac:	20001638 	.word	0x20001638
 8006db0:	2000163c 	.word	0x2000163c
 8006db4:	200016ec 	.word	0x200016ec
 8006db8:	2000164c 	.word	0x2000164c
 8006dbc:	08007730 	.word	0x08007730

08006dc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3b04      	subs	r3, #4
 8006dd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3b04      	subs	r3, #4
 8006dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f023 0201 	bic.w	r2, r3, #1
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3b04      	subs	r3, #4
 8006dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006df0:	4a0c      	ldr	r2, [pc, #48]	@ (8006e24 <pxPortInitialiseStack+0x64>)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3b14      	subs	r3, #20
 8006dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3b04      	subs	r3, #4
 8006e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f06f 0202 	mvn.w	r2, #2
 8006e0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	3b20      	subs	r3, #32
 8006e14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e16:	68fb      	ldr	r3, [r7, #12]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	08006e29 	.word	0x08006e29

08006e28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e32:	4b13      	ldr	r3, [pc, #76]	@ (8006e80 <prvTaskExitError+0x58>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3a:	d00b      	beq.n	8006e54 <prvTaskExitError+0x2c>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	60fb      	str	r3, [r7, #12]
}
 8006e4e:	bf00      	nop
 8006e50:	bf00      	nop
 8006e52:	e7fd      	b.n	8006e50 <prvTaskExitError+0x28>
	__asm volatile
 8006e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	60bb      	str	r3, [r7, #8]
}
 8006e66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e68:	bf00      	nop
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0fc      	beq.n	8006e6a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e70:	bf00      	nop
 8006e72:	bf00      	nop
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	2000000c 	.word	0x2000000c
	...

08006e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e90:	4b07      	ldr	r3, [pc, #28]	@ (8006eb0 <pxCurrentTCBConst2>)
 8006e92:	6819      	ldr	r1, [r3, #0]
 8006e94:	6808      	ldr	r0, [r1, #0]
 8006e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9a:	f380 8809 	msr	PSP, r0
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f04f 0000 	mov.w	r0, #0
 8006ea6:	f380 8811 	msr	BASEPRI, r0
 8006eaa:	4770      	bx	lr
 8006eac:	f3af 8000 	nop.w

08006eb0 <pxCurrentTCBConst2>:
 8006eb0:	20001110 	.word	0x20001110
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop

08006eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006eb8:	4808      	ldr	r0, [pc, #32]	@ (8006edc <prvPortStartFirstTask+0x24>)
 8006eba:	6800      	ldr	r0, [r0, #0]
 8006ebc:	6800      	ldr	r0, [r0, #0]
 8006ebe:	f380 8808 	msr	MSP, r0
 8006ec2:	f04f 0000 	mov.w	r0, #0
 8006ec6:	f380 8814 	msr	CONTROL, r0
 8006eca:	b662      	cpsie	i
 8006ecc:	b661      	cpsie	f
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	df00      	svc	0
 8006ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006eda:	bf00      	nop
 8006edc:	e000ed08 	.word	0xe000ed08

08006ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ee6:	4b47      	ldr	r3, [pc, #284]	@ (8007004 <xPortStartScheduler+0x124>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a47      	ldr	r2, [pc, #284]	@ (8007008 <xPortStartScheduler+0x128>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d10b      	bne.n	8006f08 <xPortStartScheduler+0x28>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	60fb      	str	r3, [r7, #12]
}
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
 8006f06:	e7fd      	b.n	8006f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f08:	4b3e      	ldr	r3, [pc, #248]	@ (8007004 <xPortStartScheduler+0x124>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a3f      	ldr	r2, [pc, #252]	@ (800700c <xPortStartScheduler+0x12c>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d10b      	bne.n	8006f2a <xPortStartScheduler+0x4a>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	613b      	str	r3, [r7, #16]
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	e7fd      	b.n	8006f26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f2a:	4b39      	ldr	r3, [pc, #228]	@ (8007010 <xPortStartScheduler+0x130>)
 8006f2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	22ff      	movs	r2, #255	@ 0xff
 8006f3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f44:	78fb      	ldrb	r3, [r7, #3]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	4b31      	ldr	r3, [pc, #196]	@ (8007014 <xPortStartScheduler+0x134>)
 8006f50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f52:	4b31      	ldr	r3, [pc, #196]	@ (8007018 <xPortStartScheduler+0x138>)
 8006f54:	2207      	movs	r2, #7
 8006f56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f58:	e009      	b.n	8006f6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007018 <xPortStartScheduler+0x138>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	4a2d      	ldr	r2, [pc, #180]	@ (8007018 <xPortStartScheduler+0x138>)
 8006f62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f64:	78fb      	ldrb	r3, [r7, #3]
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f6e:	78fb      	ldrb	r3, [r7, #3]
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f76:	2b80      	cmp	r3, #128	@ 0x80
 8006f78:	d0ef      	beq.n	8006f5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f7a:	4b27      	ldr	r3, [pc, #156]	@ (8007018 <xPortStartScheduler+0x138>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f1c3 0307 	rsb	r3, r3, #7
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d00b      	beq.n	8006f9e <xPortStartScheduler+0xbe>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	60bb      	str	r3, [r7, #8]
}
 8006f98:	bf00      	nop
 8006f9a:	bf00      	nop
 8006f9c:	e7fd      	b.n	8006f9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007018 <xPortStartScheduler+0x138>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	021b      	lsls	r3, r3, #8
 8006fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8007018 <xPortStartScheduler+0x138>)
 8006fa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8007018 <xPortStartScheduler+0x138>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006fb0:	4a19      	ldr	r2, [pc, #100]	@ (8007018 <xPortStartScheduler+0x138>)
 8006fb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fbc:	4b17      	ldr	r3, [pc, #92]	@ (800701c <xPortStartScheduler+0x13c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a16      	ldr	r2, [pc, #88]	@ (800701c <xPortStartScheduler+0x13c>)
 8006fc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006fc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fc8:	4b14      	ldr	r3, [pc, #80]	@ (800701c <xPortStartScheduler+0x13c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a13      	ldr	r2, [pc, #76]	@ (800701c <xPortStartScheduler+0x13c>)
 8006fce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006fd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fd4:	f000 f8da 	bl	800718c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fd8:	4b11      	ldr	r3, [pc, #68]	@ (8007020 <xPortStartScheduler+0x140>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006fde:	f000 f8f9 	bl	80071d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fe2:	4b10      	ldr	r3, [pc, #64]	@ (8007024 <xPortStartScheduler+0x144>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8007024 <xPortStartScheduler+0x144>)
 8006fe8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006fec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006fee:	f7ff ff63 	bl	8006eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ff2:	f7ff f839 	bl	8006068 <vTaskSwitchContext>
	prvTaskExitError();
 8006ff6:	f7ff ff17 	bl	8006e28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	e000ed00 	.word	0xe000ed00
 8007008:	410fc271 	.word	0x410fc271
 800700c:	410fc270 	.word	0x410fc270
 8007010:	e000e400 	.word	0xe000e400
 8007014:	2000173c 	.word	0x2000173c
 8007018:	20001740 	.word	0x20001740
 800701c:	e000ed20 	.word	0xe000ed20
 8007020:	2000000c 	.word	0x2000000c
 8007024:	e000ef34 	.word	0xe000ef34

08007028 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	607b      	str	r3, [r7, #4]
}
 8007040:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007042:	4b10      	ldr	r3, [pc, #64]	@ (8007084 <vPortEnterCritical+0x5c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3301      	adds	r3, #1
 8007048:	4a0e      	ldr	r2, [pc, #56]	@ (8007084 <vPortEnterCritical+0x5c>)
 800704a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800704c:	4b0d      	ldr	r3, [pc, #52]	@ (8007084 <vPortEnterCritical+0x5c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d110      	bne.n	8007076 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007054:	4b0c      	ldr	r3, [pc, #48]	@ (8007088 <vPortEnterCritical+0x60>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00b      	beq.n	8007076 <vPortEnterCritical+0x4e>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	603b      	str	r3, [r7, #0]
}
 8007070:	bf00      	nop
 8007072:	bf00      	nop
 8007074:	e7fd      	b.n	8007072 <vPortEnterCritical+0x4a>
	}
}
 8007076:	bf00      	nop
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	2000000c 	.word	0x2000000c
 8007088:	e000ed04 	.word	0xe000ed04

0800708c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007092:	4b12      	ldr	r3, [pc, #72]	@ (80070dc <vPortExitCritical+0x50>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10b      	bne.n	80070b2 <vPortExitCritical+0x26>
	__asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	607b      	str	r3, [r7, #4]
}
 80070ac:	bf00      	nop
 80070ae:	bf00      	nop
 80070b0:	e7fd      	b.n	80070ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070b2:	4b0a      	ldr	r3, [pc, #40]	@ (80070dc <vPortExitCritical+0x50>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3b01      	subs	r3, #1
 80070b8:	4a08      	ldr	r2, [pc, #32]	@ (80070dc <vPortExitCritical+0x50>)
 80070ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070bc:	4b07      	ldr	r3, [pc, #28]	@ (80070dc <vPortExitCritical+0x50>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d105      	bne.n	80070d0 <vPortExitCritical+0x44>
 80070c4:	2300      	movs	r3, #0
 80070c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	f383 8811 	msr	BASEPRI, r3
}
 80070ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	2000000c 	.word	0x2000000c

080070e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070e0:	f3ef 8009 	mrs	r0, PSP
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	4b15      	ldr	r3, [pc, #84]	@ (8007140 <pxCurrentTCBConst>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	f01e 0f10 	tst.w	lr, #16
 80070f0:	bf08      	it	eq
 80070f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fa:	6010      	str	r0, [r2, #0]
 80070fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007100:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007104:	f380 8811 	msr	BASEPRI, r0
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f7fe ffaa 	bl	8006068 <vTaskSwitchContext>
 8007114:	f04f 0000 	mov.w	r0, #0
 8007118:	f380 8811 	msr	BASEPRI, r0
 800711c:	bc09      	pop	{r0, r3}
 800711e:	6819      	ldr	r1, [r3, #0]
 8007120:	6808      	ldr	r0, [r1, #0]
 8007122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007126:	f01e 0f10 	tst.w	lr, #16
 800712a:	bf08      	it	eq
 800712c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007130:	f380 8809 	msr	PSP, r0
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	f3af 8000 	nop.w

08007140 <pxCurrentTCBConst>:
 8007140:	20001110 	.word	0x20001110
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007144:	bf00      	nop
 8007146:	bf00      	nop

08007148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	607b      	str	r3, [r7, #4]
}
 8007160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007162:	f7fe fec7 	bl	8005ef4 <xTaskIncrementTick>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800716c:	4b06      	ldr	r3, [pc, #24]	@ (8007188 <xPortSysTickHandler+0x40>)
 800716e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	2300      	movs	r3, #0
 8007176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	f383 8811 	msr	BASEPRI, r3
}
 800717e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007180:	bf00      	nop
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	e000ed04 	.word	0xe000ed04

0800718c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007190:	4b0b      	ldr	r3, [pc, #44]	@ (80071c0 <vPortSetupTimerInterrupt+0x34>)
 8007192:	2200      	movs	r2, #0
 8007194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007196:	4b0b      	ldr	r3, [pc, #44]	@ (80071c4 <vPortSetupTimerInterrupt+0x38>)
 8007198:	2200      	movs	r2, #0
 800719a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800719c:	4b0a      	ldr	r3, [pc, #40]	@ (80071c8 <vPortSetupTimerInterrupt+0x3c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a0a      	ldr	r2, [pc, #40]	@ (80071cc <vPortSetupTimerInterrupt+0x40>)
 80071a2:	fba2 2303 	umull	r2, r3, r2, r3
 80071a6:	099b      	lsrs	r3, r3, #6
 80071a8:	4a09      	ldr	r2, [pc, #36]	@ (80071d0 <vPortSetupTimerInterrupt+0x44>)
 80071aa:	3b01      	subs	r3, #1
 80071ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071ae:	4b04      	ldr	r3, [pc, #16]	@ (80071c0 <vPortSetupTimerInterrupt+0x34>)
 80071b0:	2207      	movs	r2, #7
 80071b2:	601a      	str	r2, [r3, #0]
}
 80071b4:	bf00      	nop
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	e000e010 	.word	0xe000e010
 80071c4:	e000e018 	.word	0xe000e018
 80071c8:	20000000 	.word	0x20000000
 80071cc:	10624dd3 	.word	0x10624dd3
 80071d0:	e000e014 	.word	0xe000e014

080071d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80071d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80071e4 <vPortEnableVFP+0x10>
 80071d8:	6801      	ldr	r1, [r0, #0]
 80071da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80071de:	6001      	str	r1, [r0, #0]
 80071e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071e2:	bf00      	nop
 80071e4:	e000ed88 	.word	0xe000ed88

080071e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071ee:	f3ef 8305 	mrs	r3, IPSR
 80071f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b0f      	cmp	r3, #15
 80071f8:	d915      	bls.n	8007226 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071fa:	4a18      	ldr	r2, [pc, #96]	@ (800725c <vPortValidateInterruptPriority+0x74>)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4413      	add	r3, r2
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007204:	4b16      	ldr	r3, [pc, #88]	@ (8007260 <vPortValidateInterruptPriority+0x78>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	7afa      	ldrb	r2, [r7, #11]
 800720a:	429a      	cmp	r2, r3
 800720c:	d20b      	bcs.n	8007226 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	607b      	str	r3, [r7, #4]
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	e7fd      	b.n	8007222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007226:	4b0f      	ldr	r3, [pc, #60]	@ (8007264 <vPortValidateInterruptPriority+0x7c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800722e:	4b0e      	ldr	r3, [pc, #56]	@ (8007268 <vPortValidateInterruptPriority+0x80>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	429a      	cmp	r2, r3
 8007234:	d90b      	bls.n	800724e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	603b      	str	r3, [r7, #0]
}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	e7fd      	b.n	800724a <vPortValidateInterruptPriority+0x62>
	}
 800724e:	bf00      	nop
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	e000e3f0 	.word	0xe000e3f0
 8007260:	2000173c 	.word	0x2000173c
 8007264:	e000ed0c 	.word	0xe000ed0c
 8007268:	20001740 	.word	0x20001740

0800726c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b08a      	sub	sp, #40	@ 0x28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007274:	2300      	movs	r3, #0
 8007276:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007278:	f7fe fd80 	bl	8005d7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800727c:	4b5c      	ldr	r3, [pc, #368]	@ (80073f0 <pvPortMalloc+0x184>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007284:	f000 f924 	bl	80074d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007288:	4b5a      	ldr	r3, [pc, #360]	@ (80073f4 <pvPortMalloc+0x188>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4013      	ands	r3, r2
 8007290:	2b00      	cmp	r3, #0
 8007292:	f040 8095 	bne.w	80073c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d01e      	beq.n	80072da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800729c:	2208      	movs	r2, #8
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4413      	add	r3, r2
 80072a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f003 0307 	and.w	r3, r3, #7
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d015      	beq.n	80072da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f023 0307 	bic.w	r3, r3, #7
 80072b4:	3308      	adds	r3, #8
 80072b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f003 0307 	and.w	r3, r3, #7
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00b      	beq.n	80072da <pvPortMalloc+0x6e>
	__asm volatile
 80072c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	617b      	str	r3, [r7, #20]
}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop
 80072d8:	e7fd      	b.n	80072d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d06f      	beq.n	80073c0 <pvPortMalloc+0x154>
 80072e0:	4b45      	ldr	r3, [pc, #276]	@ (80073f8 <pvPortMalloc+0x18c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d86a      	bhi.n	80073c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072ea:	4b44      	ldr	r3, [pc, #272]	@ (80073fc <pvPortMalloc+0x190>)
 80072ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80072ee:	4b43      	ldr	r3, [pc, #268]	@ (80073fc <pvPortMalloc+0x190>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072f4:	e004      	b.n	8007300 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80072f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	429a      	cmp	r2, r3
 8007308:	d903      	bls.n	8007312 <pvPortMalloc+0xa6>
 800730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1f1      	bne.n	80072f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007312:	4b37      	ldr	r3, [pc, #220]	@ (80073f0 <pvPortMalloc+0x184>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007318:	429a      	cmp	r2, r3
 800731a:	d051      	beq.n	80073c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2208      	movs	r2, #8
 8007322:	4413      	add	r3, r2
 8007324:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	1ad2      	subs	r2, r2, r3
 8007336:	2308      	movs	r3, #8
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	429a      	cmp	r2, r3
 800733c:	d920      	bls.n	8007380 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800733e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4413      	add	r3, r2
 8007344:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00b      	beq.n	8007368 <pvPortMalloc+0xfc>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	613b      	str	r3, [r7, #16]
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	e7fd      	b.n	8007364 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	1ad2      	subs	r2, r2, r3
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800737a:	69b8      	ldr	r0, [r7, #24]
 800737c:	f000 f90a 	bl	8007594 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007380:	4b1d      	ldr	r3, [pc, #116]	@ (80073f8 <pvPortMalloc+0x18c>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	4a1b      	ldr	r2, [pc, #108]	@ (80073f8 <pvPortMalloc+0x18c>)
 800738c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800738e:	4b1a      	ldr	r3, [pc, #104]	@ (80073f8 <pvPortMalloc+0x18c>)
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	4b1b      	ldr	r3, [pc, #108]	@ (8007400 <pvPortMalloc+0x194>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	429a      	cmp	r2, r3
 8007398:	d203      	bcs.n	80073a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800739a:	4b17      	ldr	r3, [pc, #92]	@ (80073f8 <pvPortMalloc+0x18c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a18      	ldr	r2, [pc, #96]	@ (8007400 <pvPortMalloc+0x194>)
 80073a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	4b13      	ldr	r3, [pc, #76]	@ (80073f4 <pvPortMalloc+0x188>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80073b6:	4b13      	ldr	r3, [pc, #76]	@ (8007404 <pvPortMalloc+0x198>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3301      	adds	r3, #1
 80073bc:	4a11      	ldr	r2, [pc, #68]	@ (8007404 <pvPortMalloc+0x198>)
 80073be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073c0:	f7fe fcea 	bl	8005d98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00b      	beq.n	80073e6 <pvPortMalloc+0x17a>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	60fb      	str	r3, [r7, #12]
}
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop
 80073e4:	e7fd      	b.n	80073e2 <pvPortMalloc+0x176>
	return pvReturn;
 80073e6:	69fb      	ldr	r3, [r7, #28]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3728      	adds	r7, #40	@ 0x28
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	2000534c 	.word	0x2000534c
 80073f4:	20005360 	.word	0x20005360
 80073f8:	20005350 	.word	0x20005350
 80073fc:	20005344 	.word	0x20005344
 8007400:	20005354 	.word	0x20005354
 8007404:	20005358 	.word	0x20005358

08007408 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d04f      	beq.n	80074ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800741a:	2308      	movs	r3, #8
 800741c:	425b      	negs	r3, r3
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	4413      	add	r3, r2
 8007422:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	4b25      	ldr	r3, [pc, #148]	@ (80074c4 <vPortFree+0xbc>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4013      	ands	r3, r2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10b      	bne.n	800744e <vPortFree+0x46>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	60fb      	str	r3, [r7, #12]
}
 8007448:	bf00      	nop
 800744a:	bf00      	nop
 800744c:	e7fd      	b.n	800744a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00b      	beq.n	800746e <vPortFree+0x66>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	60bb      	str	r3, [r7, #8]
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	e7fd      	b.n	800746a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	4b14      	ldr	r3, [pc, #80]	@ (80074c4 <vPortFree+0xbc>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4013      	ands	r3, r2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01e      	beq.n	80074ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d11a      	bne.n	80074ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	4b0e      	ldr	r3, [pc, #56]	@ (80074c4 <vPortFree+0xbc>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	43db      	mvns	r3, r3
 800748e:	401a      	ands	r2, r3
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007494:	f7fe fc72 	bl	8005d7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	4b0a      	ldr	r3, [pc, #40]	@ (80074c8 <vPortFree+0xc0>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4413      	add	r3, r2
 80074a2:	4a09      	ldr	r2, [pc, #36]	@ (80074c8 <vPortFree+0xc0>)
 80074a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074a6:	6938      	ldr	r0, [r7, #16]
 80074a8:	f000 f874 	bl	8007594 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80074ac:	4b07      	ldr	r3, [pc, #28]	@ (80074cc <vPortFree+0xc4>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3301      	adds	r3, #1
 80074b2:	4a06      	ldr	r2, [pc, #24]	@ (80074cc <vPortFree+0xc4>)
 80074b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80074b6:	f7fe fc6f 	bl	8005d98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074ba:	bf00      	nop
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	20005360 	.word	0x20005360
 80074c8:	20005350 	.word	0x20005350
 80074cc:	2000535c 	.word	0x2000535c

080074d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80074da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074dc:	4b27      	ldr	r3, [pc, #156]	@ (800757c <prvHeapInit+0xac>)
 80074de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f003 0307 	and.w	r3, r3, #7
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00c      	beq.n	8007504 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3307      	adds	r3, #7
 80074ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 0307 	bic.w	r3, r3, #7
 80074f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	4a1f      	ldr	r2, [pc, #124]	@ (800757c <prvHeapInit+0xac>)
 8007500:	4413      	add	r3, r2
 8007502:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007508:	4a1d      	ldr	r2, [pc, #116]	@ (8007580 <prvHeapInit+0xb0>)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800750e:	4b1c      	ldr	r3, [pc, #112]	@ (8007580 <prvHeapInit+0xb0>)
 8007510:	2200      	movs	r2, #0
 8007512:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	4413      	add	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800751c:	2208      	movs	r2, #8
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 0307 	bic.w	r3, r3, #7
 800752a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4a15      	ldr	r2, [pc, #84]	@ (8007584 <prvHeapInit+0xb4>)
 8007530:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007532:	4b14      	ldr	r3, [pc, #80]	@ (8007584 <prvHeapInit+0xb4>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2200      	movs	r2, #0
 8007538:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800753a:	4b12      	ldr	r3, [pc, #72]	@ (8007584 <prvHeapInit+0xb4>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2200      	movs	r2, #0
 8007540:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	1ad2      	subs	r2, r2, r3
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007550:	4b0c      	ldr	r3, [pc, #48]	@ (8007584 <prvHeapInit+0xb4>)
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	4a0a      	ldr	r2, [pc, #40]	@ (8007588 <prvHeapInit+0xb8>)
 800755e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	4a09      	ldr	r2, [pc, #36]	@ (800758c <prvHeapInit+0xbc>)
 8007566:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007568:	4b09      	ldr	r3, [pc, #36]	@ (8007590 <prvHeapInit+0xc0>)
 800756a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800756e:	601a      	str	r2, [r3, #0]
}
 8007570:	bf00      	nop
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	20001744 	.word	0x20001744
 8007580:	20005344 	.word	0x20005344
 8007584:	2000534c 	.word	0x2000534c
 8007588:	20005354 	.word	0x20005354
 800758c:	20005350 	.word	0x20005350
 8007590:	20005360 	.word	0x20005360

08007594 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800759c:	4b28      	ldr	r3, [pc, #160]	@ (8007640 <prvInsertBlockIntoFreeList+0xac>)
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	e002      	b.n	80075a8 <prvInsertBlockIntoFreeList+0x14>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d8f7      	bhi.n	80075a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	4413      	add	r3, r2
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d108      	bne.n	80075d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	441a      	add	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	441a      	add	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d118      	bne.n	800761c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	4b15      	ldr	r3, [pc, #84]	@ (8007644 <prvInsertBlockIntoFreeList+0xb0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d00d      	beq.n	8007612 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	441a      	add	r2, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	e008      	b.n	8007624 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007612:	4b0c      	ldr	r3, [pc, #48]	@ (8007644 <prvInsertBlockIntoFreeList+0xb0>)
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	e003      	b.n	8007624 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	429a      	cmp	r2, r3
 800762a:	d002      	beq.n	8007632 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007632:	bf00      	nop
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	20005344 	.word	0x20005344
 8007644:	2000534c 	.word	0x2000534c

08007648 <memset>:
 8007648:	4402      	add	r2, r0
 800764a:	4603      	mov	r3, r0
 800764c:	4293      	cmp	r3, r2
 800764e:	d100      	bne.n	8007652 <memset+0xa>
 8007650:	4770      	bx	lr
 8007652:	f803 1b01 	strb.w	r1, [r3], #1
 8007656:	e7f9      	b.n	800764c <memset+0x4>

08007658 <__libc_init_array>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	4d0d      	ldr	r5, [pc, #52]	@ (8007690 <__libc_init_array+0x38>)
 800765c:	4c0d      	ldr	r4, [pc, #52]	@ (8007694 <__libc_init_array+0x3c>)
 800765e:	1b64      	subs	r4, r4, r5
 8007660:	10a4      	asrs	r4, r4, #2
 8007662:	2600      	movs	r6, #0
 8007664:	42a6      	cmp	r6, r4
 8007666:	d109      	bne.n	800767c <__libc_init_array+0x24>
 8007668:	4d0b      	ldr	r5, [pc, #44]	@ (8007698 <__libc_init_array+0x40>)
 800766a:	4c0c      	ldr	r4, [pc, #48]	@ (800769c <__libc_init_array+0x44>)
 800766c:	f000 f826 	bl	80076bc <_init>
 8007670:	1b64      	subs	r4, r4, r5
 8007672:	10a4      	asrs	r4, r4, #2
 8007674:	2600      	movs	r6, #0
 8007676:	42a6      	cmp	r6, r4
 8007678:	d105      	bne.n	8007686 <__libc_init_array+0x2e>
 800767a:	bd70      	pop	{r4, r5, r6, pc}
 800767c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007680:	4798      	blx	r3
 8007682:	3601      	adds	r6, #1
 8007684:	e7ee      	b.n	8007664 <__libc_init_array+0xc>
 8007686:	f855 3b04 	ldr.w	r3, [r5], #4
 800768a:	4798      	blx	r3
 800768c:	3601      	adds	r6, #1
 800768e:	e7f2      	b.n	8007676 <__libc_init_array+0x1e>
 8007690:	080077dc 	.word	0x080077dc
 8007694:	080077dc 	.word	0x080077dc
 8007698:	080077dc 	.word	0x080077dc
 800769c:	080077e0 	.word	0x080077e0

080076a0 <memcpy>:
 80076a0:	440a      	add	r2, r1
 80076a2:	4291      	cmp	r1, r2
 80076a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076a8:	d100      	bne.n	80076ac <memcpy+0xc>
 80076aa:	4770      	bx	lr
 80076ac:	b510      	push	{r4, lr}
 80076ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b6:	4291      	cmp	r1, r2
 80076b8:	d1f9      	bne.n	80076ae <memcpy+0xe>
 80076ba:	bd10      	pop	{r4, pc}

080076bc <_init>:
 80076bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076be:	bf00      	nop
 80076c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c2:	bc08      	pop	{r3}
 80076c4:	469e      	mov	lr, r3
 80076c6:	4770      	bx	lr

080076c8 <_fini>:
 80076c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ca:	bf00      	nop
 80076cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ce:	bc08      	pop	{r3}
 80076d0:	469e      	mov	lr, r3
 80076d2:	4770      	bx	lr
